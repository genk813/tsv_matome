#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
TMCloud 統合検索システム
Version: 2.0
Date: 2025-08-08

TMSONAR仕様準拠の統合検索システム
- 商標名検索（FTS5、文字統一処理）
- 称呼検索（TMSONAR準拠5段階処理）
- 番号検索（出願番号・登録番号）
- 日付範囲検索（和暦対応）
- ステータス検索
- 類似群コード検索（前方一致対応）
- 指定商品/役務検索（項目内AND）
"""

import sqlite3
import sys
import os
import unicodedata
import re
import time
from pathlib import Path
from typing import List, Tuple, Optional, Set, Dict, Any
from datetime import datetime
from enum import Enum


# ========== 正規化ユーティリティ ==========

class TextNormalizer:
    """テキスト正規化ユーティリティ（TMSONAR準拠）"""
    
    # ローマ数字→算用数字変換テーブル
    ROMAN_TO_ARABIC = {
        'Ⅰ': '1', 'Ⅱ': '2', 'Ⅲ': '3', 'Ⅳ': '4', 'Ⅴ': '5',
        'Ⅵ': '6', 'Ⅶ': '7', 'Ⅷ': '8', 'Ⅸ': '9', 'Ⅹ': '10',
        'Ⅺ': '11', 'Ⅻ': '12', 'ⅰ': '1', 'ⅱ': '2', 'ⅲ': '3',
        'ⅳ': '4', 'ⅴ': '5', 'ⅵ': '6', 'ⅶ': '7', 'ⅷ': '8',
        'ⅸ': '9', 'ⅹ': '10', 'ⅺ': '11', 'ⅻ': '12'
    }
    
    # 旧字体→新字体変換テーブル（簡易版）
    OLD_TO_NEW_KANJI = {
        '會': '会', '營': '営', '圓': '円', '應': '応', '歐': '欧',
        '價': '価', '學': '学', '關': '関', '氣': '気', '廣': '広',
        '國': '国', '齋': '斎', '劑': '剤', '參': '参', '雜': '雑',
        '實': '実', '從': '従', '證': '証', '條': '条', '淨': '浄',
        '齊': '斉', '專': '専', '體': '体', '臺': '台', '澤': '沢',
        '單': '単', '傳': '伝', '當': '当', '獨': '独', '讀': '読',
        '發': '発', '拂': '払', '佛': '仏', '變': '変', '寶': '宝',
        '萬': '万', '藥': '薬', '餘': '余', '與': '与', '樣': '様',
        '來': '来', '兩': '両', '禮': '礼', '勞': '労', '戰': '戦',
        '繼': '継', '續': '続', '轉': '転', '點': '点', '舊': '旧'
    }
    
    # ギリシャ文字・ラテン文字異体→アルファベット変換
    GREEK_LATIN_TO_ALPHABET = {
        'Α': 'A', 'Β': 'B', 'Γ': 'G', 'Δ': 'D', 'Ε': 'E', 'Ζ': 'Z',
        'Η': 'H', 'Θ': 'TH', 'Ι': 'I', 'Κ': 'K', 'Λ': 'L', 'Μ': 'M',
        'Ν': 'N', 'Ξ': 'X', 'Ο': 'O', 'Π': 'P', 'Ρ': 'R', 'Σ': 'S',
        'Τ': 'T', 'Υ': 'Y', 'Φ': 'F', 'Χ': 'CH', 'Ψ': 'PS', 'Ω': 'O',
        'α': 'a', 'β': 'b', 'γ': 'g', 'δ': 'd', 'ε': 'e', 'ζ': 'z',
        'η': 'h', 'θ': 'th', 'ι': 'i', 'κ': 'k', 'λ': 'l', 'μ': 'm',
        'ν': 'n', 'ξ': 'x', 'ο': 'o', 'π': 'p', 'ρ': 'r', 'σ': 's',
        'τ': 't', 'υ': 'y', 'φ': 'f', 'χ': 'ch', 'ψ': 'ps', 'ω': 'o',
        'Å': 'A', 'Ø': 'O', 'Æ': 'AE', 'æ': 'ae', 'ø': 'o', 'å': 'a'
    }
    
    # 会社種別（type-102でのみ除去）
    COMPANY_TYPES = [
        '株式会社', '有限会社', '合名会社', '合資会社', '合同会社', '保険相互会社',
        'カブシキガイシャ', 'ユウゲンガイシャ', 'ゴウメイガイシャ', 
        'ゴウシガイシャ', 'ゴウドウガイシャ', 'ホケンソウゴガイシャ'
    ]
    
    @classmethod
    def normalize_text_jp(cls, text: str, for_trademark: bool = False) -> str:
        """日本語テキストの正規化（TMSONAR準拠）
        
        Args:
            text: 入力テキスト
            for_trademark: 商標用の場合True（ローマ数字変換を適用）
        
        Returns:
            正規化されたテキスト
        """
        if not text:
            return text
        
        # 商標用：ローマ数字→算用数字（NFKC前に実行！）
        if for_trademark:
            for roman, arabic in cls.ROMAN_TO_ARABIC.items():
                text = text.replace(roman, arabic)
        
        # NFKC正規化
        text = unicodedata.normalize('NFKC', text)
        
        # ひらがな→カタカナ変換
        result = []
        for char in text:
            if 'ぁ' <= char <= 'ん':
                result.append(chr(ord(char) - ord('ぁ') + ord('ァ')))
            else:
                result.append(char)
        text = ''.join(result)
        
        # 英小文字→大文字、カナ小文字→大文字
        text = text.upper()
        
        # 長音・横線・ハイフン類をハイフン（-）に統一
        hyphens = '－—–―〜～‐ｰ'
        for h in hyphens:
            text = text.replace(h, '-')
        
        # ギリシャ文字・ラテン文字異体→アルファベット
        for old, new in cls.GREEK_LATIN_TO_ALPHABET.items():
            text = text.replace(old, new)
        
        # 特殊記号削除（▲▼§￠＼∞）
        special_chars = '▲▼§￠＼∞'
        for char in special_chars:
            text = text.replace(char, '')
        
        # 句読点・中点・カンマ・クォート類削除
        # ただし商標の場合、句点（。）と括弧類《》【】『』は残す
        if for_trademark:
            remove_chars = '、・．，\'\"`'
        else:
            remove_chars = '、。・．，\'\"`'
        
        for char in remove_chars:
            text = text.replace(char, '')
        
        # スペース削除
        text = text.replace(' ', '').replace('　', '')
        
        # 旧字体→新字体変換
        for old, new in cls.OLD_TO_NEW_KANJI.items():
            text = text.replace(old, new)
        
        return text
    
    @classmethod
    def normalize_kana_for_pron(cls, text: str) -> str:
        """称呼用カナ正規化（TMSONAR準拠5段階処理）
        
        Args:
            text: 入力テキスト（カナ）
        
        Returns:
            正規化された称呼
        """
        if not text:
            return text
        
        # 基本正規化（カタカナ化・大文字化）
        text = cls.normalize_text_jp(text)
        
        # 段階2: 発音同一
        text = text.replace('ヲ', 'オ')
        text = text.replace('ヂ', 'ジ')
        text = text.replace('ヅ', 'ズ')
        text = text.replace('ヂャ', 'ジャ')
        text = text.replace('ヂュ', 'ジュ')
        text = text.replace('ヂョ', 'ジョ')
        
        # 段階3: 微差音統一
        text = text.replace('ヴァ', 'バ')
        text = text.replace('ヴィ', 'ビ')
        text = text.replace('ヴ', 'ブ')
        text = text.replace('ヴェ', 'ベ')
        text = text.replace('ヴォ', 'ボ')
        text = text.replace('ツィ', 'チ')
        text = text.replace('テュ', 'チュ')
        text = text.replace('フュ', 'ヒュ')
        text = text.replace('ヴュ', 'ビュ')
        
        # 段階4: 長音処理
        # 長音記号除去
        text = text.replace('ー', '')
        
        # エイ→エー→エ、オウ→オー→オなどの処理
        # 母音連続の簡略化
        text = text.replace('エイ', 'エ')
        text = text.replace('オウ', 'オ')
        text = text.replace('アア', 'ア')
        text = text.replace('イイ', 'イ')
        text = text.replace('ウウ', 'ウ')
        text = text.replace('エエ', 'エ')
        text = text.replace('オオ', 'オ')
        
        # 促音の除去
        text = text.replace('ッ', '')
        
        # 段階5: 拗音大文字化（最後に実行）
        replacements = [
            ('ャ', 'ヤ'), ('ュ', 'ユ'), ('ョ', 'ヨ'),
            ('ァ', 'ア'), ('ィ', 'イ'), ('ゥ', 'ウ'), ('ェ', 'エ'), ('ォ', 'オ'),
        ]
        for small, large in replacements:
            text = text.replace(small, large)
        
        return text
    
    @classmethod
    def normalize_company_name(cls, text: str) -> str:
        """会社名正規化（type-102用）"""
        text = cls.normalize_text_jp(text)
        
        # 会社種別除去
        for company_type in cls.COMPANY_TYPES:
            text = text.replace(company_type, '')
        
        return text
    
    @classmethod
    def normalize_address(cls, text: str) -> str:
        """住所正規化（type-134用）"""
        text = cls.normalize_text_jp(text)
        
        # 丁目の漢数字→算用数字（1-44まで）
        chome_map = {
            '一丁目': '1丁目', '二丁目': '2丁目', '三丁目': '3丁目', '四丁目': '4丁目',
            '五丁目': '5丁目', '六丁目': '6丁目', '七丁目': '7丁目', '八丁目': '8丁目',
            '九丁目': '9丁目', '十丁目': '10丁目', '十一丁目': '11丁目', '十二丁目': '12丁目',
            '十三丁目': '13丁目', '十四丁目': '14丁目', '十五丁目': '15丁目', '十六丁目': '16丁目',
            '十七丁目': '17丁目', '十八丁目': '18丁目', '十九丁目': '19丁目', '二十丁目': '20丁目',
            '二十一丁目': '21丁目', '二十二丁目': '22丁目', '二十三丁目': '23丁目', '二十四丁目': '24丁目',
            '二十五丁目': '25丁目', '二十六丁目': '26丁目', '二十七丁目': '27丁目', '二十八丁目': '28丁目',
            '二十九丁目': '29丁目', '三十丁目': '30丁目', '三十一丁目': '31丁目', '三十二丁目': '32丁目',
            '三十三丁目': '33丁目', '三十四丁目': '34丁目', '三十五丁目': '35丁目', '三十六丁目': '36丁目',
            '三十七丁目': '37丁目', '三十八丁目': '38丁目', '三十九丁目': '39丁目', '四十丁目': '40丁目',
            '四十一丁目': '41丁目', '四十二丁目': '42丁目', '四十三丁目': '43丁目', '四十四丁目': '44丁目'
        }
        
        for kanji, arabic in chome_map.items():
            text = text.replace(kanji, arabic)
        
        return text


# ========== パースユーティリティ ==========

class QueryParser:
    """クエリパースユーティリティ"""
    
    @staticmethod
    def split_terms(text: str) -> List[str]:
        """複数キーワードの分割
        
        Args:
            text: 入力テキスト（空白/カンマ区切り）
        
        Returns:
            キーワードのリスト
        """
        if not text:
            return []
        
        # 全指定の場合
        if text.strip() in ['？', '?']:
            return ['?']
        
        # 空白とカンマで分割（全角・半角両対応）
        import re
        # カンマ（全角・半角）と空白（全角・半角）で分割
        terms = re.split(r'[,，\s　]+', text)
        
        # 空要素除去
        terms = [t.strip() for t in terms if t.strip()]
        
        return terms
    
    @staticmethod
    def wildcard_like(term: str) -> str:
        """LIKE用ワイルドカード変換とエスケープ"""
        if not term:
            return '%'
        
        # まずエスケープ処理（順序重要！）
        pattern = term.replace('\\', '\\\\')  # バックスラッシュを先に
        pattern = pattern.replace('%', '\\%')  # 既存の%をエスケープ
        pattern = pattern.replace('_', '\\_')  # アンダースコアをエスケープ
        
        # その後ワイルドカード変換
        pattern = pattern.replace('？', '%').replace('?', '%')
        
        return pattern
    
    @staticmethod
    def wildcard_fts(term: str) -> str:
        """FTS用ワイルドカード変換"""
        if not term:
            return '*'
        
        # ?を*に変換
        pattern = term.replace('？', '*').replace('?', '*')
        
        return pattern
    
    @staticmethod
    def parse_date_range(expr: str) -> Tuple[Optional[str], Optional[str]]:
        """日付範囲のパース（和暦対応）"""
        if not expr or expr.strip() in ['？', '?']:
            return (None, None)
        
        # 範囲指定の場合
        if ':' in expr:
            parts = expr.split(':', 1)
            start = QueryParser._parse_single_date(parts[0].strip()) if parts[0].strip() else None
            end = QueryParser._parse_single_date(parts[1].strip()) if parts[1].strip() else None
            return (start, end)
        
        # 単一日付の場合
        date = QueryParser._parse_single_date(expr)
        return (date, date) if date else (None, None)
    
    @staticmethod
    def _parse_single_date(date_str: str) -> Optional[str]:
        """単一日付のパース（YYYYMMDD形式に変換）"""
        if not date_str:
            return None
        
        # 和暦変換テーブル（簡易版）
        wareki_map = {
            'R': 2019, 'H': 1989, 'S': 1926, 'T': 1912, 'M': 1868,
            '令和': 2019, '平成': 1989, '昭和': 1926, '大正': 1912, '明治': 1868
        }
        
        # 和暦の処理
        for era, base_year in wareki_map.items():
            if date_str.startswith(era):
                # 和暦年を抽出して西暦に変換
                match = re.match(rf'{era}(\d+)[/.\-]?(\d+)[/.\-]?(\d+)', date_str)
                if match:
                    year = base_year + int(match.group(1)) - 1
                    month = match.group(2).zfill(2)
                    day = match.group(3).zfill(2)
                    return f'{year}{month}{day}'
        
        # 西暦の処理
        # 区切り文字を統一
        date_str = date_str.replace('/', '').replace('.', '').replace('-', '')
        
        # 8桁の場合はそのまま
        if len(date_str) == 8 and date_str.isdigit():
            return date_str
        
        # その他の形式を試みる
        match = re.match(r'(\d{4})(\d{2})(\d{2})', date_str)
        if match:
            return date_str
        
        return None
    
    @staticmethod
    def parse_number_range(expr: str) -> Tuple[Optional[str], Optional[str]]:
        """番号範囲のパース"""
        if not expr or expr.strip() in ['？', '?']:
            return (None, None)
        
        # 範囲指定の場合
        if ':' in expr:
            parts = expr.split(':', 1)
            start = QueryParser._normalize_number(parts[0].strip()) if parts[0].strip() else None
            end = QueryParser._normalize_number(parts[1].strip()) if parts[1].strip() else None
            return (start, end)
        
        # 単一番号の場合
        number = QueryParser._normalize_number(expr)
        return (number, number) if number else (None, None)
    
    @staticmethod
    def _normalize_number(number_str: str) -> Optional[str]:
        """番号の正規化（ハイフン除去）"""
        if not number_str:
            return None
        
        # ハイフンを除去
        return number_str.replace('-', '').replace('－', '')
    
    @staticmethod
    def parse_law_class(expr: str) -> Tuple[Optional[str], Optional[str]]:
        """法区分＋類のパース"""
        if not expr or expr.strip() in ['？', '?']:
            return (None, None)
        
        expr = expr.strip()
        
        # ?09形式（類のみ）
        if expr.startswith('?') or expr.startswith('？'):
            if len(expr) >= 3:
                return (None, expr[1:3])
            return (None, None)
        
        # W?形式（法区分のみ）
        if expr.endswith('?') or expr.endswith('？'):
            if len(expr) >= 1:
                return (expr[0], None)
            return (None, None)
        
        # Y01形式（両方指定）
        if len(expr) >= 3:
            return (expr[0], expr[1:3])
        
        return (None, None)


class SearchType(Enum):
    """検索タイプの定義"""
    TRADEMARK = "trademark"     # 商標名検索
    PHONETIC = "phonetic"       # 称呼検索
    APP_NUM = "app_num"         # 出願番号検索
    REG_NUM = "reg_num"         # 登録番号検索
    DATE_RANGE = "date_range"   # 日付範囲検索
    STATUS = "status"           # ステータス検索
    SIMILAR_GROUP = "similar_group"  # 類似群コード検索
    GOODS_SERVICES = "goods_services"  # 商品・役務検索
    APPLICANT = "applicant"     # 出願人/権利者検索
    LAW_CLASS = "law_class"     # 法区分＋類検索
    VIENNA_CODE = "vienna_code"  # ウィーンコード検索
    DETAILED_DESC = "detailed_desc"  # 商標の詳細な説明検索
    TRADEMARK_TYPE = "trademark_type"  # 商標タイプ検索
    APP_TYPE = "app_type"       # 出願種別
    # 追加検索タイプ（TMSONAR仕様完全準拠）
    REJECTION_CODE = "rejection_code"          # ID108: 拒絶条文コード
    INTERMEDIATE_CODE = "intermediate_code"    # ID131: 中間記録コード
    APPLICANT_ADDRESS = "applicant_address"    # ID134: 出願人/権利者住所
    TRADEMARK_LENGTH = "trademark_length"      # ID132: 商標文字数
    PHONETIC_LENGTH = "phonetic_length"        # ID133: 称呼音数検索
    CLASS_COUNT = "class_count"                # ID137: 区分数検索
    APPLICANT_COUNT = "applicant_count"        # ID138: 出願人/権利者数検索
    PHONETIC_COUNT = "phonetic_count"          # ID139: 称呼数検索
    ADDITIONAL_INFO = "additional_info"        # ID128: 付加情報検索
    COUNTRY_CODE = "country_code"              # ID129: 国県コード検索
    EXPIRY_DATE = "expiry_date"                # ID114: 存続期間満了日検索
    PAYMENT_DATE = "payment_date"              # ID121: 分納満了日検索
    DECISION_DATE = "decision_date"            # ID116: 最終処分日検索
    APPEAL_NUM = "appeal_num"                  # ID120: 審判番号検索
    DECISION_CLASS = "decision_class"          # ID109: 審決分類検索
    INFO_PROVISION_COUNT = "info_provision_count"      # ID135: 情報提供数検索
    BROWSING_REQUEST_COUNT = "browsing_request_count"  # ID136: 閲覧請求数検索

class TMCloudIntegratedSearch:
    """統合検索クラス"""
    
    # 種別コードマッピング（特許庁公式定義より）
    
    # 四法コード（C0010）
    LAW_CODE_MAP = {
        '１': '特許',
        '２': '実用新案',
        '３': '意匠',
        '４': '商標',
        '９': '審判',
    }
    
    # 審査最終処分種別コード（C0360/C0440）
    EXAMINATION_DISPOSITION_MAP = {
        'Ａ００': '欠号',
        'Ａ０１': '登録',
        'Ａ０２': '拒絶',
        'Ａ０４': '取下',
        'Ａ０５': '放棄',
        'Ａ０６': '変更',
        'Ａ０７': '翻訳文未提出による取下（ＰＣＴ）',
        'Ａ０８': '補正却下',
        'Ａ０９': '未審査請求によるみなし取下',
        'Ａ１０': '出願却下（方式）',
        'Ａ１１': '国内優先権に基づくみなし取下',
        'Ａ１２': '再審査請求期間満了によるみなし取下',
        'Ａ１３': '手続無効（無効処分）',
        'Ａ１４': '取下・放棄後の出願却下（方式）',
        'Ａ１５': '出願変更取下による原出願回復',
        'Ａ１６': '手続（出願）取消',
        'Ａ１７': '特許公報発行',
        'Ａ１８': '却下理由通知',
        'Ａ１９': '国際商標登録出願・領域指定の取下',
        'Ａ２０': '国際商標登録出願・領域指定の放棄',
        'Ａ２１': '存続期間満了',
        'Ａ３１': '出願無効（方式）',
        'Ａ３２': '出願無効（登録）',
        'Ａ４２': '出願却下（方式却理）',
        'Ａ４３': '出願却下（方式指令）',
        'Ａ４５': '出願却下（登録）',
        # 半角版も追加
        'A42': '出願却下（方式却理）',
        'A43': '出願却下（方式指令）',
        'A45': '出願却下（登録）',
    }
    
    # 商標中間コードマッピング（DOCXファイルから包括的に抽出）
    # 全180個のコードマッピングを含む
    # C0840（審査中間コード）から抽出した441個の完全版マッピング
    # 総数: 882個（全角441個 + 半角441個）
    INTERMEDIATE_CODE_MAP = {
        "A0071": "中断",
        "A0072": "中断解除",
        "A01": "登録査定",
        "A011": "書換登録査定",
        "A02": "拒絶査定",
        "A021": "書換拒絶査定",
        "A031": "出願無効の処分（出",
        "A032": "出願無効処分書（登",
        "A033": "出願無効の処分（審査請求）",
        "A034": "出願無効の処分（商",
        "A041": "出願却下処分書（補完指令）",
        "A042": "出願却下処分書（却下理由）",
        "A043": "出願却下処分書（補正指令）",
        "A044": "出願却下処分書（本人確認）",
        "A045": "出願却下処分書（登",
        "A046": "出願却下処分書（審査請求）",
        "A047": "出願却下処分書（商",
        "A048": "書換登録申請却下の処分",
        "A06": "異議申立無効の処分",
        "A071": "通知書（再提出通知）",
        "A072": "手続却下の処分（却下理由）",
        "A073": "手続却下の処分（補正指令）",
        "A074": "手続却下の処分（本人確認）",
        "A075": "手続却下処分書（証明書等請求）",
        "A08": "処分書",
        "A091": "手続無効の処分（出",
        "A092": "手続無効（異議）",
        "A093": "通知書（３０条失効）",
        "A094": "通知書（パリ優先権失効）",
        "A10": "補完指令",
        "A101": "却下理由通知書（願書）",
        "A102": "却下理由通知書（中間書類）",
        "A103": "通知書（却下処分前通知）",
        "A111": "手続補正指令書（出",
        "A112": "手続補正指令書（中間書類）",
        "A113": "手続補正指令書（方式）（願",
        "A114": "手続補正指令書（方式）（願",
        "A115": "ＩＢ照会書",
        "A121": "物件提出命令書（方式）",
        "A122": "物件提出指示書（審査部）",
        "A131": "拒絶理由通知書",
        "A132": "拒絶理由通知書（先",
        "A133": "拒絶理由通知書（面",
        "A14": "受継命令",
        "A141": "手続受継指令書",
        "A15": "出願公告の決定",
        "A16": "異議決定",
        "A17": "答弁決定",
        "A18": "弁駁指令",
        "A191": "補正の却下の決定",
        "A192": "補正の却下の決定",
        "A201": "副本送達（出願人宛）",
        "A205": "副本送達（申立人宛）",
        "A211": "異議補正指令（申 立 書）",
        "A212": "異議補正指令（理由補充書）",
        "A221": "手続補正指令書（審査部）",
        "A222": "手続補正指示書（審査官）",
        "A223": "同一出願人による同日出願の協議指令書",
        "A224": "出願人相違の同日出願の協議指令書",
        "A23": "出願番号通知",
        "A231": "出願番号特定通知書",
        "A232": "出願番号通知",
        "A241": "通知書（その他の通知）（期間有）",
        "A241000": "特許管理人の選任通知",
        "A241764": "国内優先権主張無効の通知（期間有）",
        "A24182": "見本還付の通知",
        "A242": "通知書（その他の通知）（期間無）",
        "A242000": "戸籍謄本等請求の通知",
        "A24214": "手続続行通知書",
        "A24215": "長官通知（期間無）公報誤植による通知",
        "A24219": "長官通知（期間無）補正却下の新出願による通知",
        "A2426": "長官通知（期間無）変更出願による通知",
        "A242623": "実用新案技術評価の通知",
        "A242624": "通知書（他人評価請求）",
        "A242625": "通知書（他人請求）",
        "A242671": "長官通知（期間無）異議取下の通知",
        "A242672": "長官通知（期間無）異議一部放棄の通知",
        "A242711": "長官通知（期間無）名義変更（特定承継）の通知",
        "A242712": "長官通知（期間無）名義変更（一般承継）の通知",
        "A242761": "長官通知（期間無）出願取下の通知",
        "A242762": "長官通知（期間無）出願放棄の通知",
        "A242763": "長官通知（期間無）指定商品一部放棄の通知",
        "A242764": "国内優先権主張無効の通知（期間無）",
        "A242831": "刊行物等提出による通知書",
        "A242881": "長官通知（期間無）既納手数料返還の通知",
        "A242883": "通知書（証明書返還）",
        "A24289": "長官通知（期間無）就業先送達の通知",
        "A242902": "伺い回答書",
        "A243624": "評価書未作成通知",
        "A244001": "アクセスコード通知書",
        "A251": "審査官通知（その他の通知）（期間有）",
        "A2511": "協議指示書",
        "A25110": "１９４条の通知（分割出願に関する説明書）",
        "A25111": "１９４条の通知（その他）",
        "A2512": "取下げ勧告の通知書",
        "A2513": "書類等提出命令の通知書",
        "A2514": "立会実験申請書の提出命令書",
        "A2515": "同一出願人による同日出願通知書",
        "A2516": "出願人相違の同日出願通知書",
        "A2517": "遡及を認めない一回目の通知書",
        "A2518": "優先権主張無効の一回目の通知書",
        "A2519": "新規性喪失例外の一回目不認通知書",
        "A252": "審査官通知（その他の通知）（期間無）",
        "A2521": "審査官通知（期間無）くじ実施通知",
        "A2522": "先願未請求による審査不可能通知書",
        "A2523": "遡及を認めない二回目の通知書",
        "A2524": "審査官通知（期間無）特許法６１条２項の通知",
        "A2525": "優先権主張無効の二回目の通知書",
        "A2526": "新規性喪失例外の二回目不認通知書",
        "A2527": "待ち登録の通知書",
        "A2528": "早期審査選定結果の通知書",
        "A2529": "先行技術文献情報不開示の通知",
        "A26": "誤送通知",
        "A271": "職権訂正通知",
        "A272": "印紙還付通知",
        "A273": "職権訂正通知書（職権訂正）",
        "A274": "職権訂正通知書（書類修正）",
        "A275": "認定情報通知書",
        "A28": "再送",
        "A29": "官報公告",
        "A300": "未審査請求包袋抽出表作成",
        "A311": "出願無効戻し",
        "A312": "戻し中止",
        "A313": "拒絶理由戻し",
        "A315": "公告戻し",
        "A317": "答弁戻し",
        "A318": "弁駁戻し",
        "A319": "補正却下戻し",
        "A322": "補正指令戻し",
        "A325": "雑指令戻し",
        "A330": "登録無効戻し",
        "A364": "異議戻し",
        "A50": "誤記訂正書",
        "A51": "手続補正書（方式）",
        "A511": "手続補完書",
        "A521": "手続補正書",
        "A5210": "特許協力条約第３４条補正の翻訳文提出書（職権）",
        "A5211": "特許協力条約第３４条補正の写し提出書",
        "A5212": "特許協力条約第３４条補正の写し提出書（職権）",
        "A522": "手続補正書",
        "A523": "手続補正書",
        "A524": "誤訳訂正書",
        "A525": "特許協力条約第１９条補正の翻訳文提出書",
        "A526": "特許協力条約第１９条補正の翻訳文提出書（職権）",
        "A527": "特許協力条約第１９条補正の写し提出書",
        "A528": "特許協力条約第１９条補正の写し提出書（職権）",
        "A529": "特許協力条約第３４条補正の翻訳文提出書",
        "A53": "意見書",
        "A531": "意見書（要約）",
        "A541": "ＰＣＴ１９条補正書",
        "A542": "ＰＣＴ３４条補正書",
        "A55": "受継申立書",
        "A56": "異議補正書",
        "A57": "答弁書",
        "A58": "弁駁書",
        "A59": "弁明書",
        "A601": "期間延長請求書",
        "A602": "期間延長許可書",
        "A603": "期間延長請求書（期間徒過）",
        "A61": "登録料納付",
        "A621": "出願審査請求書",
        "A623": "実用新案技術評価請求書",
        "A624": "実用新案技術評価請求書（他人）",
        "A625": "出願審査請求書（他人）",
        "A626": "国内処理請求書",
        "A627": "出願公開請求書",
        "A63": "願書",
        "A631": "翻訳文提出書",
        "A632": "防護標章登録願",
        "A633": "防護標章登録に基づく権利存続期間更新登録願",
        "A6330": "明細書",
        "A6331": "図面",
        "A6332": "要約書",
        "A634": "書換登録申請書",
        "A6340": "外国語明細書",
        "A6341": "外国語図面",
        "A6342": "外国語要約",
        "A635": "防護標章登録に基づく権利書換登録申請書",
        "A636": "類似意匠登録願",
        "A637": "商標重複登録更新出願",
        "A638": "地域団体商標登録願",
        "A639": "団体商標登録願",
        "A641": "異議申立書",
        "A642": "意見申立書",
        "A651": "異議理由補充書",
        "A652": "証拠調申請書",
        "A653": "証拠保全申立書",
        "A654": "証人尋問申請書",
        "A655": "検証申請書",
        "A656": "当事者尋問申立書",
        "A657": "鑑定申立書",
        "A658": "証拠保全申立取消書",
        "A659": "証拠調期日変更願書",
        "A6591": "証拠調申請取下書",
        "A6592": "証人不参届",
        "A661": "異議取下書",
        "A662": "異議一部放棄書",
        "A67": "受託番号変更届",
        "A681": "代表者選定届",
        "A685": "代表者選定届（申立人）",
        "A691": "雑書類",
        "A695": "雑書類（申立人第三者）",
        "A701": "組織変更届（出願人）",
        "A705": "組織変更届（申立人）",
        "A711": "出願人名義変更届",
        "A712": "出願人名義変更届（一般承継）",
        "A713": "出願人名義変更届（特例商標登録出願）",
        "A714": "出願人名義変更届（特例商標登録出願）（一般承継）",
        "A715": "書換登録申請者名義変更届",
        "A721": "名称（氏名）変更届（出願人）",
        "A722": "名称（氏名）変更届（代理人）",
        "A723": "名称（氏名）変更届（復代理人）",
        "A724": "名称（氏名）変更届（指定代理人）",
        "A725": "名称（氏名）変更届（申立人）",
        "A726": "名称（氏名）変更届（申立人代理人）",
        "A727": "名称（氏名）変更届（申立人復代理人）",
        "A728": "名称（氏名）変更届（申立人指定代理人）",
        "A731": "住所変更届（出願人）",
        "A732": "住所変更届（代理人）",
        "A733": "住所変更届（復代理人）",
        "A734": "住所変更届（指定代理人）",
        "A735": "住所変更届（申立人）",
        "A736": "住所変更届（申立人代理人）",
        "A737": "住所変更届（申立人復代理人）",
        "A738": "住所変更届（申立人指定代理人）",
        "A7421": "代理人変更届",
        "A7422": "代理人受任届",
        "A7423": "代理人選任届",
        "A7424": "代理人辞任届",
        "A7425": "代理人解任届",
        "A7426": "代理権変更届",
        "A7427": "代理権消滅届",
        "A7428": "包括委任状援用制限届",
        "A7431": "復代理人変更届",
        "A7432": "復代理人受任届",
        "A7433": "復代理人選任届",
        "A7434": "復代理人辞任届",
        "A7435": "復代理人解任届",
        "A7436": "復代理権変更届",
        "A7437": "復代理権消滅届",
        "A7461": "代理人変更届（申立人）",
        "A7462": "代理人受任届（申立人）",
        "A7463": "代理人選任届（申立人）",
        "A7464": "代理人辞任届（申立人）",
        "A7465": "代理人解任届（申立人）",
        "A7466": "代理権変更届（申立人）",
        "A7467": "代理権消滅届（申立人）",
        "A7468": "包括委任状援用制限届（申立人）",
        "A7471": "復代理人変更届（申立人）",
        "A7472": "復代理人受任届（申立人）",
        "A7473": "復代理人選任届（申立人）",
        "A7474": "復代理人辞任届（申立人）",
        "A7475": "復代理人解任届（申立人）",
        "A7476": "復代理権変更届（申立人）",
        "A7477": "復代理権消滅届（申立人）",
        "A751": "印鑑変更届（出願人）",
        "A752": "印鑑変更届（代理人）",
        "A753": "印鑑変更届（復代理人）",
        "A754": "印鑑変更届（指定代理人）",
        "A755": "印鑑変更届（申立人）",
        "A756": "印鑑変更届（申立人代理人）",
        "A757": "印鑑変更届（申立人復代理人）",
        "A758": "印鑑変更届（申立人指定代理人）",
        "A761": "出願取下書",
        "A762": "出願放棄書",
        "A763": "指定商品一部放棄書",
        "A764": "先の出願に基づく優先権主張取下書",
        "A765": "パリ条約による優先権主張放棄書",
        "A766": "書換登録申請取下書",
        "A768": "使用に基づく特例の適用の主張取下書",
        "A7731": "出願変更届（独立→類似）",
        "A7732": "出願変更届（類似→独立）",
        "A7741": "出願変更届（独立→連合）",
        "A7742": "出願変更届（連合→独立）",
        "A781": "上申書",
        "A785": "上申書（申立人）",
        "A79": "優先権証明書提出書",
        "A791": "優先権証明書（電子データ交換協定）",
        "A792": "優先権証明書類（電子データ交換協定）",
        "A7A1": "一括組織変更届（出願人）",
        "A7A5": "一括組織変更届（申立人）",
        "A7B": "一括名義変更届（一般承継）",
        "A7C1": "一括名称（氏名）変更届（出願人）",
        "A7C2": "一括名称（氏名）変更届（代理人）",
        "A7C3": "一括名称（氏名）変更届（復代理人）",
        "A7C4": "一括名称（氏名）変更届（指定代理人）",
        "A7C5": "一括名称（氏名）変更届（申立人）",
        "A7C6": "一括名称（氏名）変更届（申立人代理人）",
        "A7C7": "一括名称（氏名）変更届（申立人復代理人）",
        "A7C8": "一括名称（氏名）変更届（申立人指定代理人）",
        "A7D1": "一括住所変更届（出願人）",
        "A7D2": "一括住所変更届（代理人）",
        "A7D3": "一括住所変更届（復代理人）",
        "A7D4": "一括住所変更届（指定代理人）",
        "A7D5": "一括住所変更届（申立人）",
        "A7D6": "一括住所変更届（申立人代理人）",
        "A7D7": "一括住所変更届（申立人復代理人）",
        "A7D8": "一括住所変更届（申立人指定代理人）",
        "A80": "出願時の特例証明書提出書",
        "A801": "新規性喪失の例外適用申請書",
        "A802": "新規性喪失の例外適用申請書",
        "A81": "出願日証明書提出書",
        "A82": "物件提出書",
        "A821": "手続補足書",
        "A822": "証明書類提出書",
        "A824": "ひな形又は見本補足書",
        "A826": "協議の結果届",
        "A831": "刊行物等提出書",
        "A832": "情報提供書",
        "A833": "特徴記載書",
        "A84": "証明請求書",
        "A841": "優先権証明請求書",
        "A842": "証明請求書",
        "A843": "優先権証明請求（電子データ交換協定）",
        "A8431": "優先権証明書類請求（電子データ交換協定）",
        "A844": "本国登録証明請求書",
        "A845": "優先権証明応答（電子データ交換協定）",
        "A8451": "優先権証明書類応答（電子データ交換協定）",
        "A85": "謄本請求書",
        "A851": "ファイル記録事項記載書類の交付請求書",
        "A852": "認証付きファイル記録事項記載書類の交付請求書",
        "A853": "登録事項記載書類の交付請求書",
        "A854": "認証付登録事項記載書類の交付請求書",
        "A86": "閲覧請求書",
        "A861": "ファイル記録事項の閲覧（縦覧）請求書",
        "A862": "登録事項の閲覧請求書",
        "A87": "優先審査に関する事情説明書",
        "A871": "早期審査に関する事情説明書",
        "A872": "早期審査に関する事情説明補充書",
        "A881": "既納手数料返還請求書",
        "A8911": "就業先届（出願人）",
        "A8912": "就業先届（代理人）",
        "A8915": "就業先届（申立人）",
        "A8916": "就業先届（申立人代理人）",
        "A8921": "就業先変更届（出願人）",
        "A8922": "就業先変更届（代理人）",
        "A8925": "就業先変更届（申立人）",
        "A8926": "就業先変更届（申立人代理人）",
        "A8931": "就業先消滅届（出願人）",
        "A8932": "就業先消滅届（代理人）",
        "A8935": "就業先消滅届（申立人）",
        "A8936": "就業先消滅届（申立人代理人）",
        "A900": "職権訂正データ（登録発）",
        "A901": "伺い書",
        "A902": "伺い回答書",
        "A903": "伺い回答書",
        "A903001": "伺い回答書",
        "A904": "戸籍謄本等請求の通知",
        "A905": "通知書（既納手数料返還）",
        "A907": "秘密意匠期間変更請求書",
        "A908": "協議の結果届",
        "A909": "通知書（出願審査請求手数料返還）",
        "A911": "審査前置移管",
        "A912": "審査前置解除",
        "A913": "前置報告書",
        "A914": "出願審査請求手数料返還請求書",
        "A915": "既納手数料返還請求書",
        "A916": "個別指定手数料返還請求書",
        "A921": "行政不服申立",
        "A922": "行政不服取下",
        "A923": "行政不服指令",
        "A924": "行政不服通知",
        "A931": "決定（却下）",
        "A932": "決定（棄却）",
        "A933": "行服決定（認容）",
        "A934": "検査の決定",
        "A94": "出訴",
        "A951": "判決（取消）",
        "A952": "判決（却下）",
        "A953": "判決（差戻）",
        "A954": "判決（棄却）",
        "A961": "職権訂正データ（方式）",
        "A962": "職権訂正データ（審査部）",
        "A963": "職権訂正データ（書類修正）",
        "A964": "職権訂正データ（起案書）",
        "A965": "職権訂正履歴（職権訂正）",
        "A966": "起案書訂正",
        "A967": "認定・付加情報",
        "A968": "職権訂正履歴（書類修正）",
        "A971001": "面接記録",
        "A971002": "資料提出書等による情報提供",
        "A971003": "審査用メモ（実体審査）",
        "A971004": "公告決定メモ",
        "A971005": "早期審査に関する報告書",
        "A971006": "優先審査選別会議議事録",
        "A971007": "検索報告書",
        "A971008": "審査用メモ（分類付与）",
        "A971009": "優先審査選別会議の非開催理由書",
        "A971010": "予備的見解書",
        "A971011": "検索外注利用状況票",
        "A971012": "拒絶理由通知書（手交）受領書",
        "A971013": "協議成立メモ",
        "A971014": "審査記録",
        "A971015": "応対記録",
        "A971016": "審査協力情報",
        "A971017": "くじ実施通知書",
        "A971018": "くじ実施結果の調書",
        "A971019": "商標審査前サーチレポート",
        "A971020": "特徴記載（公報用）",
        "A971021": "協議メモ",
        "A971022": "迅速フィードバック",
        "A971023": "調査報告（特定登録調査機関）",
        "A971046": "出願却下の処分（他人請求）",
        "A971091": "職権取消通知",
        "A971092": "無効通知",
        "A971093": "職権更正通知",
        "A971099": "庁内書類（その他の庁内書類）",
        "A972001": "要約不備職権訂正",
        "A972002": "公序良俗違反",
        "A981": "再調整（願書）",
        "A982": "再調整（中間）",
        "A983": "再調整（全部）",
        "A99": "不受理",
        "AHD1711": "拒絶の通報",
        "AHD1712": "拒絶の通報",
        "AHD1713": "拒絶の通報",
        "AHD1714": "拒絶の通報",
        "AHD1715": "拒絶の通報",
        "AHD1716": "拒絶の通報",
        "AHD172": "所有権の変更が効果を有しない旨の宣言",
        "AHD173": "所有権の変更が効果を有しない旨の宣言の撤回",
        "AHD174": "拒絶の後の保護の付与の声明",
        "AHD176": "保護の付与の声明",
        "AHD177": "無効の通報",
        "AHD178": "更正の効果を拒絶する旨の宣言",
        "AHD179": "通知書",
        "ANEN": "公表された国際登録の写し",
        "ANFU": "併合の写し",
        "ANGP": "保護の付与の声明の写し",
        "ANIN": "無効の写し",
        "ANLI": "限定の写し",
        "ANMT": "名義人の氏名（名称）・住所（居所）の変更の写し",
        "ANNC": "創作者の変更の写し",
        "ANRA2": "更新されなかった国際登録の写し",
        "ANRE": "更新の写し",
        "ANRI": "更正の写し",
        "ANRL": "拒絶の写し",
        "ANRN": "放棄の写し",
        "ANRT": "所有権の変更が効果を有しない旨の宣言の写し",
        "ANTR": "所有権の変更の写し",
        "ANWT": "所有権の変更が効果を有しない旨の宣言の撤回の写し",
        "Ａ００７１": "中断",
        "Ａ００７２": "中断解除",
        "Ａ０１": "登録査定",
        "Ａ０１１": "書換登録査定",
        "Ａ０２": "拒絶査定",
        "Ａ０２１": "書換拒絶査定",
        "Ａ０３１": "出願無効の処分（出",
        "Ａ０３２": "出願無効処分書（登",
        "Ａ０３３": "出願無効の処分（審査請求）",
        "Ａ０３４": "出願無効の処分（商",
        "Ａ０４１": "出願却下処分書（補完指令）",
        "Ａ０４２": "出願却下処分書（却下理由）",
        "Ａ０４３": "出願却下処分書（補正指令）",
        "Ａ０４４": "出願却下処分書（本人確認）",
        "Ａ０４５": "出願却下処分書（登",
        "Ａ０４６": "出願却下処分書（審査請求）",
        "Ａ０４７": "出願却下処分書（商",
        "Ａ０４８": "書換登録申請却下の処分",
        "Ａ０６": "異議申立無効の処分",
        "Ａ０７１": "通知書（再提出通知）",
        "Ａ０７２": "手続却下の処分（却下理由）",
        "Ａ０７３": "手続却下の処分（補正指令）",
        "Ａ０７４": "手続却下の処分（本人確認）",
        "Ａ０７５": "手続却下処分書（証明書等請求）",
        "Ａ０８": "処分書",
        "Ａ０９１": "手続無効の処分（出",
        "Ａ０９２": "手続無効（異議）",
        "Ａ０９３": "通知書（３０条失効）",
        "Ａ０９４": "通知書（パリ優先権失効）",
        "Ａ１０": "補完指令",
        "Ａ１０１": "却下理由通知書（願書）",
        "Ａ１０２": "却下理由通知書（中間書類）",
        "Ａ１０３": "通知書（却下処分前通知）",
        "Ａ１１１": "手続補正指令書（出",
        "Ａ１１２": "手続補正指令書（中間書類）",
        "Ａ１１３": "手続補正指令書（方式）（願",
        "Ａ１１４": "手続補正指令書（方式）（願",
        "Ａ１１５": "ＩＢ照会書",
        "Ａ１２１": "物件提出命令書（方式）",
        "Ａ１２２": "物件提出指示書（審査部）",
        "Ａ１３１": "拒絶理由通知書",
        "Ａ１３２": "拒絶理由通知書（先",
        "Ａ１３３": "拒絶理由通知書（面",
        "Ａ１４": "受継命令",
        "Ａ１４１": "手続受継指令書",
        "Ａ１５": "出願公告の決定",
        "Ａ１６": "異議決定",
        "Ａ１７": "答弁決定",
        "Ａ１８": "弁駁指令",
        "Ａ１９１": "補正の却下の決定",
        "Ａ１９２": "補正の却下の決定",
        "Ａ２０１": "副本送達（出願人宛）",
        "Ａ２０５": "副本送達（申立人宛）",
        "Ａ２１１": "異議補正指令（申 立 書）",
        "Ａ２１２": "異議補正指令（理由補充書）",
        "Ａ２２１": "手続補正指令書（審査部）",
        "Ａ２２２": "手続補正指示書（審査官）",
        "Ａ２２３": "同一出願人による同日出願の協議指令書",
        "Ａ２２４": "出願人相違の同日出願の協議指令書",
        "Ａ２３": "出願番号通知",
        "Ａ２３１": "出願番号特定通知書",
        "Ａ２３２": "出願番号通知",
        "Ａ２４１": "通知書（その他の通知）（期間有）",
        "Ａ２４１０００": "特許管理人の選任通知",
        "Ａ２４１７６４": "国内優先権主張無効の通知（期間有）",
        "Ａ２４１８２": "見本還付の通知",
        "Ａ２４２": "通知書（その他の通知）（期間無）",
        "Ａ２４２０００": "戸籍謄本等請求の通知",
        "Ａ２４２１４": "手続続行通知書",
        "Ａ２４２１５": "長官通知（期間無）公報誤植による通知",
        "Ａ２４２１９": "長官通知（期間無）補正却下の新出願による通知",
        "Ａ２４２６": "長官通知（期間無）変更出願による通知",
        "Ａ２４２６２３": "実用新案技術評価の通知",
        "Ａ２４２６２４": "通知書（他人評価請求）",
        "Ａ２４２６２５": "通知書（他人請求）",
        "Ａ２４２６７１": "長官通知（期間無）異議取下の通知",
        "Ａ２４２６７２": "長官通知（期間無）異議一部放棄の通知",
        "Ａ２４２７１１": "長官通知（期間無）名義変更（特定承継）の通知",
        "Ａ２４２７１２": "長官通知（期間無）名義変更（一般承継）の通知",
        "Ａ２４２７６１": "長官通知（期間無）出願取下の通知",
        "Ａ２４２７６２": "長官通知（期間無）出願放棄の通知",
        "Ａ２４２７６３": "長官通知（期間無）指定商品一部放棄の通知",
        "Ａ２４２７６４": "国内優先権主張無効の通知（期間無）",
        "Ａ２４２８３１": "刊行物等提出による通知書",
        "Ａ２４２８８１": "長官通知（期間無）既納手数料返還の通知",
        "Ａ２４２８８３": "通知書（証明書返還）",
        "Ａ２４２８９": "長官通知（期間無）就業先送達の通知",
        "Ａ２４２９０２": "伺い回答書",
        "Ａ２４３６２４": "評価書未作成通知",
        "Ａ２４４００１": "アクセスコード通知書",
        "Ａ２５１": "審査官通知（その他の通知）（期間有）",
        "Ａ２５１１": "協議指示書",
        "Ａ２５１１０": "１９４条の通知（分割出願に関する説明書）",
        "Ａ２５１１１": "１９４条の通知（その他）",
        "Ａ２５１２": "取下げ勧告の通知書",
        "Ａ２５１３": "書類等提出命令の通知書",
        "Ａ２５１４": "立会実験申請書の提出命令書",
        "Ａ２５１５": "同一出願人による同日出願通知書",
        "Ａ２５１６": "出願人相違の同日出願通知書",
        "Ａ２５１７": "遡及を認めない一回目の通知書",
        "Ａ２５１８": "優先権主張無効の一回目の通知書",
        "Ａ２５１９": "新規性喪失例外の一回目不認通知書",
        "Ａ２５２": "審査官通知（その他の通知）（期間無）",
        "Ａ２５２１": "審査官通知（期間無）くじ実施通知",
        "Ａ２５２２": "先願未請求による審査不可能通知書",
        "Ａ２５２３": "遡及を認めない二回目の通知書",
        "Ａ２５２４": "審査官通知（期間無）特許法６１条２項の通知",
        "Ａ２５２５": "優先権主張無効の二回目の通知書",
        "Ａ２５２６": "新規性喪失例外の二回目不認通知書",
        "Ａ２５２７": "待ち登録の通知書",
        "Ａ２５２８": "早期審査選定結果の通知書",
        "Ａ２５２９": "先行技術文献情報不開示の通知",
        "Ａ２６": "誤送通知",
        "Ａ２７１": "職権訂正通知",
        "Ａ２７２": "印紙還付通知",
        "Ａ２７３": "職権訂正通知書（職権訂正）",
        "Ａ２７４": "職権訂正通知書（書類修正）",
        "Ａ２７５": "認定情報通知書",
        "Ａ２８": "再送",
        "Ａ２９": "官報公告",
        "Ａ３００": "未審査請求包袋抽出表作成",
        "Ａ３１１": "出願無効戻し",
        "Ａ３１２": "戻し中止",
        "Ａ３１３": "拒絶理由戻し",
        "Ａ３１５": "公告戻し",
        "Ａ３１７": "答弁戻し",
        "Ａ３１８": "弁駁戻し",
        "Ａ３１９": "補正却下戻し",
        "Ａ３２２": "補正指令戻し",
        "Ａ３２５": "雑指令戻し",
        "Ａ３３０": "登録無効戻し",
        "Ａ３６４": "異議戻し",
        "Ａ５０": "誤記訂正書",
        "Ａ５１": "手続補正書（方式）",
        "Ａ５１１": "手続補完書",
        "Ａ５２１": "手続補正書",
        "Ａ５２１０": "特許協力条約第３４条補正の翻訳文提出書（職権）",
        "Ａ５２１１": "特許協力条約第３４条補正の写し提出書",
        "Ａ５２１２": "特許協力条約第３４条補正の写し提出書（職権）",
        "Ａ５２２": "手続補正書",
        "Ａ５２３": "手続補正書",
        "Ａ５２４": "誤訳訂正書",
        "Ａ５２５": "特許協力条約第１９条補正の翻訳文提出書",
        "Ａ５２６": "特許協力条約第１９条補正の翻訳文提出書（職権）",
        "Ａ５２７": "特許協力条約第１９条補正の写し提出書",
        "Ａ５２８": "特許協力条約第１９条補正の写し提出書（職権）",
        "Ａ５２９": "特許協力条約第３４条補正の翻訳文提出書",
        "Ａ５３": "意見書",
        "Ａ５３１": "意見書（要約）",
        "Ａ５４１": "ＰＣＴ１９条補正書",
        "Ａ５４２": "ＰＣＴ３４条補正書",
        "Ａ５５": "受継申立書",
        "Ａ５６": "異議補正書",
        "Ａ５７": "答弁書",
        "Ａ５８": "弁駁書",
        "Ａ５９": "弁明書",
        "Ａ６０１": "期間延長請求書",
        "Ａ６０２": "期間延長許可書",
        "Ａ６０３": "期間延長請求書（期間徒過）",
        "Ａ６１": "登録料納付",
        "Ａ６２１": "出願審査請求書",
        "Ａ６２３": "実用新案技術評価請求書",
        "Ａ６２４": "実用新案技術評価請求書（他人）",
        "Ａ６２５": "出願審査請求書（他人）",
        "Ａ６２６": "国内処理請求書",
        "Ａ６２７": "出願公開請求書",
        "Ａ６３": "願書",
        "Ａ６３１": "翻訳文提出書",
        "Ａ６３２": "防護標章登録願",
        "Ａ６３３": "防護標章登録に基づく権利存続期間更新登録願",
        "Ａ６３３０": "明細書",
        "Ａ６３３１": "図面",
        "Ａ６３３２": "要約書",
        "Ａ６３４": "書換登録申請書",
        "Ａ６３４０": "外国語明細書",
        "Ａ６３４１": "外国語図面",
        "Ａ６３４２": "外国語要約",
        "Ａ６３５": "防護標章登録に基づく権利書換登録申請書",
        "Ａ６３６": "類似意匠登録願",
        "Ａ６３７": "商標重複登録更新出願",
        "Ａ６３８": "地域団体商標登録願",
        "Ａ６３９": "団体商標登録願",
        "Ａ６４１": "異議申立書",
        "Ａ６４２": "意見申立書",
        "Ａ６５１": "異議理由補充書",
        "Ａ６５２": "証拠調申請書",
        "Ａ６５３": "証拠保全申立書",
        "Ａ６５４": "証人尋問申請書",
        "Ａ６５５": "検証申請書",
        "Ａ６５６": "当事者尋問申立書",
        "Ａ６５７": "鑑定申立書",
        "Ａ６５８": "証拠保全申立取消書",
        "Ａ６５９": "証拠調期日変更願書",
        "Ａ６５９１": "証拠調申請取下書",
        "Ａ６５９２": "証人不参届",
        "Ａ６６１": "異議取下書",
        "Ａ６６２": "異議一部放棄書",
        "Ａ６７": "受託番号変更届",
        "Ａ６８１": "代表者選定届",
        "Ａ６８５": "代表者選定届（申立人）",
        "Ａ６９１": "雑書類",
        "Ａ６９５": "雑書類（申立人第三者）",
        "Ａ７０１": "組織変更届（出願人）",
        "Ａ７０５": "組織変更届（申立人）",
        "Ａ７１１": "出願人名義変更届",
        "Ａ７１２": "出願人名義変更届（一般承継）",
        "Ａ７１３": "出願人名義変更届（特例商標登録出願）",
        "Ａ７１４": "出願人名義変更届（特例商標登録出願）（一般承継）",
        "Ａ７１５": "書換登録申請者名義変更届",
        "Ａ７２１": "名称（氏名）変更届（出願人）",
        "Ａ７２２": "名称（氏名）変更届（代理人）",
        "Ａ７２３": "名称（氏名）変更届（復代理人）",
        "Ａ７２４": "名称（氏名）変更届（指定代理人）",
        "Ａ７２５": "名称（氏名）変更届（申立人）",
        "Ａ７２６": "名称（氏名）変更届（申立人代理人）",
        "Ａ７２７": "名称（氏名）変更届（申立人復代理人）",
        "Ａ７２８": "名称（氏名）変更届（申立人指定代理人）",
        "Ａ７３１": "住所変更届（出願人）",
        "Ａ７３２": "住所変更届（代理人）",
        "Ａ７３３": "住所変更届（復代理人）",
        "Ａ７３４": "住所変更届（指定代理人）",
        "Ａ７３５": "住所変更届（申立人）",
        "Ａ７３６": "住所変更届（申立人代理人）",
        "Ａ７３７": "住所変更届（申立人復代理人）",
        "Ａ７３８": "住所変更届（申立人指定代理人）",
        "Ａ７４２１": "代理人変更届",
        "Ａ７４２２": "代理人受任届",
        "Ａ７４２３": "代理人選任届",
        "Ａ７４２４": "代理人辞任届",
        "Ａ７４２５": "代理人解任届",
        "Ａ７４２６": "代理権変更届",
        "Ａ７４２７": "代理権消滅届",
        "Ａ７４２８": "包括委任状援用制限届",
        "Ａ７４３１": "復代理人変更届",
        "Ａ７４３２": "復代理人受任届",
        "Ａ７４３３": "復代理人選任届",
        "Ａ７４３４": "復代理人辞任届",
        "Ａ７４３５": "復代理人解任届",
        "Ａ７４３６": "復代理権変更届",
        "Ａ７４３７": "復代理権消滅届",
        "Ａ７４６１": "代理人変更届（申立人）",
        "Ａ７４６２": "代理人受任届（申立人）",
        "Ａ７４６３": "代理人選任届（申立人）",
        "Ａ７４６４": "代理人辞任届（申立人）",
        "Ａ７４６５": "代理人解任届（申立人）",
        "Ａ７４６６": "代理権変更届（申立人）",
        "Ａ７４６７": "代理権消滅届（申立人）",
        "Ａ７４６８": "包括委任状援用制限届（申立人）",
        "Ａ７４７１": "復代理人変更届（申立人）",
        "Ａ７４７２": "復代理人受任届（申立人）",
        "Ａ７４７３": "復代理人選任届（申立人）",
        "Ａ７４７４": "復代理人辞任届（申立人）",
        "Ａ７４７５": "復代理人解任届（申立人）",
        "Ａ７４７６": "復代理権変更届（申立人）",
        "Ａ７４７７": "復代理権消滅届（申立人）",
        "Ａ７５１": "印鑑変更届（出願人）",
        "Ａ７５２": "印鑑変更届（代理人）",
        "Ａ７５３": "印鑑変更届（復代理人）",
        "Ａ７５４": "印鑑変更届（指定代理人）",
        "Ａ７５５": "印鑑変更届（申立人）",
        "Ａ７５６": "印鑑変更届（申立人代理人）",
        "Ａ７５７": "印鑑変更届（申立人復代理人）",
        "Ａ７５８": "印鑑変更届（申立人指定代理人）",
        "Ａ７６１": "出願取下書",
        "Ａ７６２": "出願放棄書",
        "Ａ７６３": "指定商品一部放棄書",
        "Ａ７６４": "先の出願に基づく優先権主張取下書",
        "Ａ７６５": "パリ条約による優先権主張放棄書",
        "Ａ７６６": "書換登録申請取下書",
        "Ａ７６８": "使用に基づく特例の適用の主張取下書",
        "Ａ７７３１": "出願変更届（独立→類似）",
        "Ａ７７３２": "出願変更届（類似→独立）",
        "Ａ７７４１": "出願変更届（独立→連合）",
        "Ａ７７４２": "出願変更届（連合→独立）",
        "Ａ７８１": "上申書",
        "Ａ７８５": "上申書（申立人）",
        "Ａ７９": "優先権証明書提出書",
        "Ａ７９１": "優先権証明書（電子データ交換協定）",
        "Ａ７９２": "優先権証明書類（電子データ交換協定）",
        "Ａ７Ａ１": "一括組織変更届（出願人）",
        "Ａ７Ａ５": "一括組織変更届（申立人）",
        "Ａ７Ｂ": "一括名義変更届（一般承継）",
        "Ａ７Ｃ１": "一括名称（氏名）変更届（出願人）",
        "Ａ７Ｃ２": "一括名称（氏名）変更届（代理人）",
        "Ａ７Ｃ３": "一括名称（氏名）変更届（復代理人）",
        "Ａ７Ｃ４": "一括名称（氏名）変更届（指定代理人）",
        "Ａ７Ｃ５": "一括名称（氏名）変更届（申立人）",
        "Ａ７Ｃ６": "一括名称（氏名）変更届（申立人代理人）",
        "Ａ７Ｃ７": "一括名称（氏名）変更届（申立人復代理人）",
        "Ａ７Ｃ８": "一括名称（氏名）変更届（申立人指定代理人）",
        "Ａ７Ｄ１": "一括住所変更届（出願人）",
        "Ａ７Ｄ２": "一括住所変更届（代理人）",
        "Ａ７Ｄ３": "一括住所変更届（復代理人）",
        "Ａ７Ｄ４": "一括住所変更届（指定代理人）",
        "Ａ７Ｄ５": "一括住所変更届（申立人）",
        "Ａ７Ｄ６": "一括住所変更届（申立人代理人）",
        "Ａ７Ｄ７": "一括住所変更届（申立人復代理人）",
        "Ａ７Ｄ８": "一括住所変更届（申立人指定代理人）",
        "Ａ８０": "出願時の特例証明書提出書",
        "Ａ８０１": "新規性喪失の例外適用申請書",
        "Ａ８０２": "新規性喪失の例外適用申請書",
        "Ａ８１": "出願日証明書提出書",
        "Ａ８２": "物件提出書",
        "Ａ８２１": "手続補足書",
        "Ａ８２２": "証明書類提出書",
        "Ａ８２４": "ひな形又は見本補足書",
        "Ａ８２６": "協議の結果届",
        "Ａ８３１": "刊行物等提出書",
        "Ａ８３２": "情報提供書",
        "Ａ８３３": "特徴記載書",
        "Ａ８４": "証明請求書",
        "Ａ８４１": "優先権証明請求書",
        "Ａ８４２": "証明請求書",
        "Ａ８４３": "優先権証明請求（電子データ交換協定）",
        "Ａ８４３１": "優先権証明書類請求（電子データ交換協定）",
        "Ａ８４４": "本国登録証明請求書",
        "Ａ８４５": "優先権証明応答（電子データ交換協定）",
        "Ａ８４５１": "優先権証明書類応答（電子データ交換協定）",
        "Ａ８５": "謄本請求書",
        "Ａ８５１": "ファイル記録事項記載書類の交付請求書",
        "Ａ８５２": "認証付きファイル記録事項記載書類の交付請求書",
        "Ａ８５３": "登録事項記載書類の交付請求書",
        "Ａ８５４": "認証付登録事項記載書類の交付請求書",
        "Ａ８６": "閲覧請求書",
        "Ａ８６１": "ファイル記録事項の閲覧（縦覧）請求書",
        "Ａ８６２": "登録事項の閲覧請求書",
        "Ａ８７": "優先審査に関する事情説明書",
        "Ａ８７１": "早期審査に関する事情説明書",
        "Ａ８７２": "早期審査に関する事情説明補充書",
        "Ａ８８１": "既納手数料返還請求書",
        "Ａ８９１１": "就業先届（出願人）",
        "Ａ８９１２": "就業先届（代理人）",
        "Ａ８９１５": "就業先届（申立人）",
        "Ａ８９１６": "就業先届（申立人代理人）",
        "Ａ８９２１": "就業先変更届（出願人）",
        "Ａ８９２２": "就業先変更届（代理人）",
        "Ａ８９２５": "就業先変更届（申立人）",
        "Ａ８９２６": "就業先変更届（申立人代理人）",
        "Ａ８９３１": "就業先消滅届（出願人）",
        "Ａ８９３２": "就業先消滅届（代理人）",
        "Ａ８９３５": "就業先消滅届（申立人）",
        "Ａ８９３６": "就業先消滅届（申立人代理人）",
        "Ａ９００": "職権訂正データ（登録発）",
        "Ａ９０１": "伺い書",
        "Ａ９０２": "伺い回答書",
        "Ａ９０３": "伺い回答書",
        "Ａ９０３００１": "伺い回答書",
        "Ａ９０４": "戸籍謄本等請求の通知",
        "Ａ９０５": "通知書（既納手数料返還）",
        "Ａ９０７": "秘密意匠期間変更請求書",
        "Ａ９０８": "協議の結果届",
        "Ａ９０９": "通知書（出願審査請求手数料返還）",
        "Ａ９１１": "審査前置移管",
        "Ａ９１２": "審査前置解除",
        "Ａ９１３": "前置報告書",
        "Ａ９１４": "出願審査請求手数料返還請求書",
        "Ａ９１５": "既納手数料返還請求書",
        "Ａ９１６": "個別指定手数料返還請求書",
        "Ａ９２１": "行政不服申立",
        "Ａ９２２": "行政不服取下",
        "Ａ９２３": "行政不服指令",
        "Ａ９２４": "行政不服通知",
        "Ａ９３１": "決定（却下）",
        "Ａ９３２": "決定（棄却）",
        "Ａ９３３": "行服決定（認容）",
        "Ａ９３４": "検査の決定",
        "Ａ９４": "出訴",
        "Ａ９５１": "判決（取消）",
        "Ａ９５２": "判決（却下）",
        "Ａ９５３": "判決（差戻）",
        "Ａ９５４": "判決（棄却）",
        "Ａ９６１": "職権訂正データ（方式）",
        "Ａ９６２": "職権訂正データ（審査部）",
        "Ａ９６３": "職権訂正データ（書類修正）",
        "Ａ９６４": "職権訂正データ（起案書）",
        "Ａ９６５": "職権訂正履歴（職権訂正）",
        "Ａ９６６": "起案書訂正",
        "Ａ９６７": "認定・付加情報",
        "Ａ９６８": "職権訂正履歴（書類修正）",
        "Ａ９７１００１": "面接記録",
        "Ａ９７１００２": "資料提出書等による情報提供",
        "Ａ９７１００３": "審査用メモ（実体審査）",
        "Ａ９７１００４": "公告決定メモ",
        "Ａ９７１００５": "早期審査に関する報告書",
        "Ａ９７１００６": "優先審査選別会議議事録",
        "Ａ９７１００７": "検索報告書",
        "Ａ９７１００８": "審査用メモ（分類付与）",
        "Ａ９７１００９": "優先審査選別会議の非開催理由書",
        "Ａ９７１０１０": "予備的見解書",
        "Ａ９７１０１１": "検索外注利用状況票",
        "Ａ９７１０１２": "拒絶理由通知書（手交）受領書",
        "Ａ９７１０１３": "協議成立メモ",
        "Ａ９７１０１４": "審査記録",
        "Ａ９７１０１５": "応対記録",
        "Ａ９７１０１６": "審査協力情報",
        "Ａ９７１０１７": "くじ実施通知書",
        "Ａ９７１０１８": "くじ実施結果の調書",
        "Ａ９７１０１９": "商標審査前サーチレポート",
        "Ａ９７１０２０": "特徴記載（公報用）",
        "Ａ９７１０２１": "協議メモ",
        "Ａ９７１０２２": "迅速フィードバック",
        "Ａ９７１０２３": "調査報告（特定登録調査機関）",
        "Ａ９７１０４６": "出願却下の処分（他人請求）",
        "Ａ９７１０９１": "職権取消通知",
        "Ａ９７１０９２": "無効通知",
        "Ａ９７１０９３": "職権更正通知",
        "Ａ９７１０９９": "庁内書類（その他の庁内書類）",
        "Ａ９７２００１": "要約不備職権訂正",
        "Ａ９７２００２": "公序良俗違反",
        "Ａ９８１": "再調整（願書）",
        "Ａ９８２": "再調整（中間）",
        "Ａ９８３": "再調整（全部）",
        "Ａ９９": "不受理",
        "ＡＨＤ１７１１": "拒絶の通報",
        "ＡＨＤ１７１２": "拒絶の通報",
        "ＡＨＤ１７１３": "拒絶の通報",
        "ＡＨＤ１７１４": "拒絶の通報",
        "ＡＨＤ１７１５": "拒絶の通報",
        "ＡＨＤ１７１６": "拒絶の通報",
        "ＡＨＤ１７２": "所有権の変更が効果を有しない旨の宣言",
        "ＡＨＤ１７３": "所有権の変更が効果を有しない旨の宣言の撤回",
        "ＡＨＤ１７４": "拒絶の後の保護の付与の声明",
        "ＡＨＤ１７６": "保護の付与の声明",
        "ＡＨＤ１７７": "無効の通報",
        "ＡＨＤ１７８": "更正の効果を拒絶する旨の宣言",
        "ＡＨＤ１７９": "通知書",
        "ＡＮＥＮ": "公表された国際登録の写し",
        "ＡＮＦＵ": "併合の写し",
        "ＡＮＧＰ": "保護の付与の声明の写し",
        "ＡＮＩＮ": "無効の写し",
        "ＡＮＬＩ": "限定の写し",
        "ＡＮＭＴ": "名義人の氏名（名称）・住所（居所）の変更の写し",
        "ＡＮＮＣ": "創作者の変更の写し",
        "ＡＮＲＡ２": "更新されなかった国際登録の写し",
        "ＡＮＲＥ": "更新の写し",
        "ＡＮＲＩ": "更正の写し",
        "ＡＮＲＬ": "拒絶の写し",
        "ＡＮＲＮ": "放棄の写し",
        "ＡＮＲＴ": "所有権の変更が効果を有しない旨の宣言の写し",
        "ＡＮＴＲ": "所有権の変更の写し",
        "ＡＮＷＴ": "所有権の変更が効果を有しない旨の宣言の撤回の写し",
    }

    # C0850（審判中間コード）完全版マッピング
    # 項番1～425から425個のマッピングを抽出
    # 全角・半角両対応版（計850個）
    TRIAL_INTERMEDIATE_CODE_MAP = {
    "03": "審決",
    "04": "審決の予告",
    "07": "手続却下処分",
    "09": "手続無効処分",
    "10": "取消理由通知書",
    "11": "手続補正指令書（請求）（長官）",
    "12": "手続補正指令書（中間）（長官）",
    "13": "拒絶理由通知書",
    "14": "尋問",
    "15": "公告決定",
    "16": "異議の決定",
    "17": "請求書副本の送達通知（答弁指令）",
    "18": "異議申立書副本の送付通知",
    "19": "補正の却下の決定",
    "20": "審判番号通知",
    "21": "審査前置移管通知",
    "22": "審判官指定（変更）通知",
    "23": "審理終結通知書",
    "24": "手続続行通知書（権利異動）",
    "26": "嘱託書（個人）",
    "27": "通知書（その他）はがき",
    "28": "再送",
    "29": "官報",
    "30": "面接記録",
    "31": "付箋（起案用）",
    "32": "審判専門官発指令応答なし",
    "33": "審判官発指令応答なし",
    "35": "紙出力",
    "36": "異議答弁戻し",
    "37": "異議番号設定",
    "41": "公示送達依頼",
    "44": "方式完",
    "51": "手続補正書（方式）",
    "53": "意見書・答弁書",
    "54": "回答書",
    "55": "審判請求書",
    "57": "弁駁書",
    "58": "口頭審理陳述要領書",
    "59": "訂正",
    "60": "審判請求書（その他の請求書・申立書を含む）",
    "64": "審理再開申立書",
    "65": "口頭審理・証拠調",
    "67": "情報提供",
    "82": "証拠（物件）提出書（翻訳文提出書含む）",
    "84": "その他提出物件",
    "91": "審査前置移管",
    "92": "審査前置解除",
    "94": "閲覧照会",
    "95": "証明・交付請求",
    "96": "確定登録通知",
    "99": "行政不服申立",
    "7B": "一括名義変更届（一般承継）",
    "７Ｂ": "一括名義変更届（一般承継）",
    "7A-1": "一括組織変更届（出願人・請求人）",
    "7A-2": "一括組織変更届（被請求人・権利者）",
    "7A-3": "一括組織変更届（参加人・準参加人）",
    "7A-5": "一括組織変更届（申立人・付与後異議申立人）",
    "7C-1": "一括名称（氏名）変更届（出願人・請求人）",
    "7C-2": "一括名称（氏名）変更届（ 同上 の代理人）",
    "7C-3": "一括名称（氏名）変更届（ 同上 の復代理人）",
    "7C-4": "一括名称（氏名）変更届（ 同上 の指定代理人）",
    "7C-5": "一括名称（氏名）変更届（申立人・付与後異議申立人",
    "7C-6": "一括名称（氏名）変更届（ 同上 の代理人）",
    "7C-7": "一括名称（氏名）変更届（ 同上 の復代理人）",
    "7C-8": "一括名称（氏名）変更届（ 同上 の指定代理人）",
    "7D-1": "住所変更届（一括）（出願人・請求人）",
    "7D-2": "住所変更届（一括）（出願人・請求人の代理人）",
    "7D-3": "住所変更届（一括）（出願人・請求人の復代理人）",
    "7D-4": "住所変更届（一括）（出願人・請求人の指定代理人）",
    "7D-5": "住所変更届（一括）（申立人・付与後異議申立人）",
    "7D-6": "住所変更届（一括）（ 同上 の代理人）",
    "7D-7": "住所変更届（一括）（ 同上 の復代理人）",
    "7D-8": "住所変更届（一括）（ 同上 の指定代理人）",
    "C031": "判定",
    "C032": "却下決定",
    "C033": "請求無効処分",
    "C034": "審判請求却下の処分",
    "C071": "手続却下の処分（長官名）",
    "C072": "手続却下の決定（審判長名）",
    "C091": "通知書（再提出通知）（期間有）",
    "C092": "通知書（再提出通知）（期間無）",
    "C116": "手続補正指令書（請求）（審判長）",
    "C126": "手続補正指令書（中間）（審判長）",
    "C131": "訂正拒絶理由通知書",
    "C132": "無効理由通知書",
    "C133": "職権審理結果通知書",
    "C136": "却下理由通知書（長官）",
    "C137": "却下理由通知書（審判長）",
    "C141": "審尋（審判官）",
    "C142": "審尋（書記官）",
    "C143": "審尋（被請求人）（審判官）",
    "C144": "審尋（被請求人）（書記官）",
    "C151": "請求公告決定",
    "C161": "参加許否の決定",
    "C162": "受継許否の決定",
    "C163": "証拠保全の決定",
    "C164": "除斥の決定",
    "C165": "忌避の決定",
    "C171": "答弁書副本の送付通知（弁駁指令）",
    "C172": "弁駁書副本の送付通知（答弁指令）",
    "C173": "訂正請求副本送付通知（弁駁指令）",
    "C174": "参加申請副本送達通知（意見指令）",
    "C181": "異議答弁副本送付通知（弁駁指令）",
    "C182": "異議弁駁副本送付通知（答弁指令）",
    "C183": "審尋（申立人）（審判官）",
    "C184": "審尋（申立人）（書記官）",
    "C185": "審尋（権利者）（審判官）",
    "C186": "審尋（権利者）（書記官）",
    "C201": "異議番号通知",
    "C202": "審判請求通知",
    "C203": "異議申立通知",
    "C211": "審査前置解除通知",
    "C231": "審理再開通知書",
    "C232": "書面審理通知書",
    "C233": "口頭審理通知書",
    "C234": "手続中止通知書",
    "C235": "手続中止解除通知書",
    "C236": "併合審理通知書",
    "C237": "併合分離通知書",
    "C238": "併合分離通知（一部）書",
    "C239": "併合しない旨の通知",
    "C241": "手続受継指令書",
    "C242": "手続続行通知書",
    "C245": "印紙還付通知書（特許印紙以外）",
    "C261": "拒絶査定送達の件",
    "C262": "嘱託書（法人）",
    "C271": "職権訂正通知書",
    "C272": "職権訂正通知書（職権訂正）",
    "C273": "職権訂正通知書（書類修正）",
    "C274": "認定情報通知書",
    "C275": "審判番号特定通知書",
    "C281": "通知書（その他）特別送達",
    "C301": "審決書",
    "C302": "判定書",
    "C303": "決定書",
    "C304": "審決の予告",
    "C305": "審判請求却下の処分",
    "C306": "請求無効処分",
    "C307": "旅費放棄書",
    "C308": "受領書",
    "C309": "調書",
    "C321": "審判専門官発指令応答あり",
    "C331": "審判官発指令応答あり",
    "C361": "異議戻し",
    "C401": "審判請求書",
    "C402": "判定請求書",
    "C403": "訂正請求書",
    "C404": "手続補正書",
    "C405": "補正許否の決定",
    "C406": "手続補正指令書",
    "C407": "手続却下処分",
    "C408": "期間延長請求書",
    "C409": "意見書",
    "C410": "答弁書",
    "C411": "弁駁書",
    "C412": "口頭審理陳述要領書",
    "C413": "審判事件答弁書",
    "C414": "審判事件弁駁書",
    "C415": "早期審理に関する事情説明書",
    "C416": "証拠調べ通知書",
    "C417": "証拠申出書",
    "C418": "尋問事項書",
    "C419": "証人尋問調書",
    "C420": "検証調書",
    "C421": "鑑定書",
    "C441": "その他の処分",
    "C442": "審決却下",
    "C501": "審理終結通知書",
    "C502": "審理再開通知書",
    "C503": "職権審理通知書",
    "C504": "前置審査通知書",
    "C505": "前置報告書",
    "C506": "審尋書",
    "C507": "通知書",
    "C508": "調書",
    "C509": "上申書",
    "C510": "期日請書",
    "C511": "面接記録",
    "C512": "電話応対記録",
    "C513": "ファクシミリ送達通知書",
    "C514": "返還通知書",
    "C523": "手続補正書（自発・内容）",
    "C524": "誤訳訂正書",
    "C543": "同意回答書",
    "C561": "異議申立書",
    "C565": "異議理由補充書",
    "C601": "取下書",
    "C602": "放棄書",
    "C603": "取消申立書",
    "C604": "職権取消通知書",
    "C605": "中止通知書",
    "C606": "中断通知書",
    "C607": "受継申立書",
    "C608": "承継届",
    "C609": "名義変更届",
    "C610": "代理人変更届",
    "C611": "代理人受任届",
    "C612": "代理人辞任届",
    "C613": "代理権消滅通知書",
    "C614": "包括委任状援用届",
    "C615": "代表者選定届",
    "C616": "脱退書",
    "C617": "参加申請書",
    "C618": "参加許否の決定",
    "C619": "訂正取下書",
    "C635": "参加申請書",
    "C636": "補助参加申請書",
    "C638": "補助参加取下書",
    "C639": "参加取下書",
    "C641": "特許異議申立期間満了前審理の上申書",
    "C652": "証拠調申立書",
    "C654": "証人尋問申出書",
    "C655": "検証申出書",
    "C657": "鑑定の申出書",
    "C659": "期日変更請求書",
    "C661": "異議取下書",
    "C662": "一部異議取下書（付与後異議）",
    "C665": "訴状等",
    "C681": "代表選定届（出願人・請求人）",
    "C682": "代表選定届（申立人・付与後異議申立人）",
    "C691": "雑書類（出願人・請求人）",
    "C695": "雑書類（申立人・付与後異議申立人）",
    "C696": "雑書類（被請求人・権利者）",
    "C697": "雑書類（参加人・準参加人）",
    "C701": "手数料納付書",
    "C702": "予納届",
    "C703": "予納台帳番号通知書",
    "C704": "既納手数料返還請求書",
    "C705": "過誤納手数料返還通知書",
    "C706": "手数料補正指令書",
    "C707": "手数料追納書",
    "C711": "出願人名義変更届",
    "C712": "出願人名義変更届（一般承継）",
    "C715": "申請者名義変更届",
    "C721": "名称（氏名）変更届（出願人・請求人）",
    "C722": "名称（氏名）変更届（出願人・請求人の代理人）",
    "C723": "名称（氏名）変更届（出願人・請求人の復代理人）",
    "C724": "名称（氏名）変更届（出願人・請求人の指定代理人）",
    "C725": "名称（氏名）変更届（申立人・付与後異議申立人）",
    "C726": "名称（氏名）変更届（申立人・付与後異議申立人の代理人",
    "C727": "名称（氏名）変更届（申立人・付与後異議申立人の復代理人）",
    "C728": "名称（氏名）変更届（申立人・付与後異議申立人の指定代理人",
    "C731": "住所変更届（出願人・請求人）",
    "C732": "住所変更届（出願人・請求人の代理人）",
    "C733": "住所変更届（出願人・請求人の復代理人）",
    "C734": "住所変更届（出願人・請求人の指定代理人）",
    "C735": "住所変更届（申立人・付与後異議申立人）",
    "C736": "住所変更届（申立人・付与後異議申立人の代理人）",
    "C737": "住所変更届（申立人・付与後異議申立人の復代理人）",
    "C738": "住所変更届（申立人・付与後異議申立人の指定代理人",
    "C751": "印鑑変更届（出願人・請求人）",
    "C752": "印鑑変更届（出願人・請求人の代理人）",
    "C753": "印鑑変更届（出願人・請求人の復代理人）",
    "C754": "印鑑変更届（出願人・請求人の指定代理人）",
    "C755": "印鑑変更届（申立人・付与後異議申立人）",
    "C756": "印鑑変更届（申立人・付与後異議申立人の代理人）",
    "C757": "印鑑変更届（申立人・付与後異議申立人の復代理人）",
    "C758": "印鑑変更届（申立人・付与後異議申立人の指定代理人",
    "C761": "出願取下書",
    "C762": "出願放棄書",
    "C766": "書換登録申請取下書",
    "C768": "使用に基づく特例適用の主張取下書",
    "C781": "上申書（出願人・請求人）",
    "C782": "上申書（被請求人・権利者）",
    "C783": "上申書（参加人・準参加人）",
    "C785": "上申書（申立人・付与後異議申立人）",
    "C801": "口頭審理通知書",
    "C802": "口頭審理調書",
    "C803": "口頭審理期日変更申請書",
    "C804": "証人等出頭申請書",
    "C805": "通訳人出頭申請書",
    "C806": "速記録",
    "C807": "録音体",
    "C821": "手続補足書",
    "C822": "証明書類提出書",
    "C825": "特徴記載書",
    "C826": "意匠法第９条第５項に基づく協議の結果届",
    "C831": "刊行物等提出書",
    "C832": "情報提供書",
    "C833": "特徴記載書",
    "C875": "優先審理に関する事情説明書",
    "C876": "早期審理に関する事情説明書",
    "C877": "早期審理に関する事情説明補充書",
    "C881": "既納手数料返還請求書",
    "C901": "優先権主張書",
    "C902": "優先権証明書",
    "C903": "新規性喪失の例外証明書",
    "C904": "微生物寄託証明書",
    "C905": "翻訳文",
    "C906": "誤訳訂正書",
    "C907": "国際出願関係書類",
    "C908": "パリ条約関係書類",
    "C909": "特許協力条約関係書類",
    "C910": "実用新案技術評価書",
    "C911": "先行技術調査報告書",
    "C912": "情報提供書",
    "C913": "刊行物等提出書",
    "C914": "特許異議申立書",
    "C915": "商標登録異議申立書",
    "C916": "異議決定書",
    "C917": "異議答弁書",
    "C918": "異議弁駁書",
    "C921": "審査前置登録",
    "C941": "閲覧貸出",
    "C942": "閲覧返却",
    "C965": "職権訂正履歴（職権訂正）",
    "C968": "職権訂正履歴（書類修正）",
    "C991": "中断",
    "C992": "中止",
    "C993": "行政不服決定（却下）",
    "C994": "行政不服決定（棄却）",
    "C995": "行政不服決定（認容）",
    "C996": "行政不服取下",
    "０３－１": "判定",
    "０３－２": "却下決定",
    "０３－３": "請求無効処分",
    "０３－４": "審判請求却下の処分",
    "０７－１": "手続却下の処分（長官名）",
    "０７－２": "手続却下の決定（審判長名）",
    "０９－１": "通知書（再提出通知）（期間有）",
    "０９－２": "通知書（再提出通知）（期間無）",
    "１１－６": "手続補正指令書（請求）（審判長）",
    "１２－６": "手続補正指令書（中間）（審判長）",
    "１３－１": "訂正拒絶理由通知書",
    "１３－２": "無効理由通知書",
    "１３－３": "職権審理結果通知書",
    "１３－６": "却下理由通知書（長官）",
    "１３－７": "却下理由通知書（審判長）",
    "１４－１": "審尋（審判官）",
    "１４－２": "審尋（書記官）",
    "１４－３": "審尋（被請求人）（審判官）",
    "１４－４": "審尋（被請求人）（書記官）",
    "１５－１": "請求公告決定",
    "１６－１": "参加許否の決定",
    "１６－２": "受継許否の決定",
    "１６－３": "証拠保全の決定",
    "１６－４": "除斥の決定",
    "１６－５": "忌避の決定",
    "１７－１": "答弁書副本の送付通知（弁駁指令）",
    "１７－２": "弁駁書副本の送付通知（答弁指令）",
    "１７－３": "訂正請求副本送付通知（弁駁指令）",
    "１７－４": "参加申請副本送達通知（意見指令）",
    "１８－１": "異議答弁副本送付通知（弁駁指令）",
    "１８－２": "異議弁駁副本送付通知（答弁指令）",
    "１８－３": "審尋（申立人）（審判官）",
    "１８－４": "審尋（申立人）（書記官）",
    "１８－５": "審尋（権利者）（審判官）",
    "１８－６": "審尋（権利者）（書記官）",
    "２０－１": "異議番号通知",
    "２０－２": "審判請求通知",
    "２０－３": "異議申立通知",
    "２１－１": "審査前置解除通知",
    "２３－１": "審理再開通知書",
    "２３－２": "書面審理通知書",
    "２３－３": "口頭審理通知書",
    "２３－４": "手続中止通知書",
    "２３－５": "手続中止解除通知書",
    "２３－６": "併合審理通知書",
    "２３－７": "併合分離通知書",
    "２３－８": "併合分離通知（一部）書",
    "２３－９": "併合しない旨の通知",
    "２４－１": "手続受継指令書",
    "２４－２": "手続続行通知書",
    "２４－５": "印紙還付通知書（特許印紙以外）",
    "２６－１": "拒絶査定送達の件",
    "２６－２": "嘱託書（法人）",
    "２７－１": "職権訂正通知書",
    "２７－２": "職権訂正通知書（職権訂正）",
    "２７－３": "職権訂正通知書（書類修正）",
    "２７－４": "認定情報通知書",
    "２７－５": "審判番号特定通知書",
    "２８－１": "通知書（その他）特別送達",
    "３０－１": "審尋記録",
    "３０－２": "応対記録",
    "３０－５": "早期審理に関する報告書",
    "３０－６": "期日請書",
    "３０－７": "旅費放棄書",
    "３０－８": "受領書",
    "３０－９": "調書",
    "３２－１": "審判専門官発指令応答あり",
    "３３－１": "審判官発指令応答あり",
    "３６－１": "異議戻し",
    "４４－１": "その他の処分",
    "４４－２": "審決却下",
    "５１－２": "手数料補正書",
    "５２－３": "手続補正書（自発・内容）",
    "５２－４": "誤訳訂正書",
    "５４－３": "同意回答書",
    "５６－１": "異議申立書",
    "５６－５": "異議理由補充書",
    "６０－１": "期間延長請求書",
    "６０－２": "期間延長許可",
    "６０－９": "請求取下書",
    "６１－１": "訂正請求書",
    "６１－２": "訂正申立",
    "６１－９": "訂正取下書",
    "６３－５": "参加申請書",
    "６３－６": "補助参加申請書",
    "６３－８": "補助参加取下書",
    "６３－９": "参加取下書",
    "６４－１": "特許異議申立期間満了前審理の上申書",
    "６５－２": "証拠調申立書",
    "６５－４": "証人尋問申出書",
    "６５－５": "検証申出書",
    "６５－７": "鑑定の申出書",
    "６５－９": "期日変更請求書",
    "６６－１": "異議取下書",
    "６６－２": "一部異議取下書（付与後異議）",
    "６６－５": "訴状等",
    "６８－１": "代表選定届（出願人・請求人）",
    "６８－２": "代表選定届（申立人・付与後異議申立人）",
    "６９－１": "雑書類（出願人・請求人）",
    "６９－５": "雑書類（申立人・付与後異議申立人）",
    "６９－６": "雑書類（被請求人・権利者）",
    "６９－７": "雑書類（参加人・準参加人）",
    "７０－１": "組織変更届（出願人・請求人）",
    "７０－２": "組織変更届（被請求人・権利者）",
    "７０－３": "組織変更届（参加人・準参加人）",
    "７０－５": "組織変更届（申立人・付与後異議申立人）",
    "７１－１": "出願人名義変更届",
    "７１－２": "出願人名義変更届（一般承継）",
    "７１－５": "申請者名義変更届",
    "７２－１": "名称（氏名）変更届（出願人・請求人）",
    "７２－２": "名称（氏名）変更届（出願人・請求人の代理人）",
    "７２－３": "名称（氏名）変更届（出願人・請求人の復代理人）",
    "７２－４": "名称（氏名）変更届（出願人・請求人の指定代理人）",
    "７２－５": "名称（氏名）変更届（申立人・付与後異議申立人）",
    "７２－６": "名称（氏名）変更届（申立人・付与後異議申立人の代理人",
    "７２－７": "名称（氏名）変更届（申立人・付与後異議申立人の復代理人）",
    "７２－８": "名称（氏名）変更届（申立人・付与後異議申立人の指定代理人",
    "７３－１": "住所変更届（出願人・請求人）",
    "７３－２": "住所変更届（出願人・請求人の代理人）",
    "７３－３": "住所変更届（出願人・請求人の復代理人）",
    "７３－４": "住所変更届（出願人・請求人の指定代理人）",
    "７３－５": "住所変更届（申立人・付与後異議申立人）",
    "７３－６": "住所変更届（申立人・付与後異議申立人の代理人）",
    "７３－７": "住所変更届（申立人・付与後異議申立人の復代理人）",
    "７３－８": "住所変更届（申立人・付与後異議申立人の指定代理人",
    "７５－１": "印鑑変更届（出願人・請求人）",
    "７５－２": "印鑑変更届（出願人・請求人の代理人）",
    "７５－３": "印鑑変更届（出願人・請求人の復代理人）",
    "７５－４": "印鑑変更届（出願人・請求人の指定代理人）",
    "７５－５": "印鑑変更届（申立人・付与後異議申立人）",
    "７５－６": "印鑑変更届（申立人・付与後異議申立人の代理人）",
    "７５－７": "印鑑変更届（申立人・付与後異議申立人の復代理人）",
    "７５－８": "印鑑変更届（申立人・付与後異議申立人の指定代理人",
    "７６－１": "出願取下書",
    "７６－２": "出願放棄書",
    "７６－６": "書換登録申請取下書",
    "７６－８": "使用に基づく特例適用の主張取下書",
    "７８－１": "上申書（出願人・請求人）",
    "７８－２": "上申書（被請求人・権利者）",
    "７８－３": "上申書（参加人・準参加人）",
    "７８－５": "上申書（申立人・付与後異議申立人）",
    "７Ａ－１": "一括組織変更届（出願人・請求人）",
    "７Ａ－２": "一括組織変更届（被請求人・権利者）",
    "７Ａ－３": "一括組織変更届（参加人・準参加人）",
    "７Ａ－５": "一括組織変更届（申立人・付与後異議申立人）",
    "７Ｃ－１": "一括名称（氏名）変更届（出願人・請求人）",
    "７Ｃ－２": "一括名称（氏名）変更届（ 同上 の代理人）",
    "７Ｃ－３": "一括名称（氏名）変更届（ 同上 の復代理人）",
    "７Ｃ－４": "一括名称（氏名）変更届（ 同上 の指定代理人）",
    "７Ｃ－５": "一括名称（氏名）変更届（申立人・付与後異議申立人",
    "７Ｃ－６": "一括名称（氏名）変更届（ 同上 の代理人）",
    "７Ｃ－７": "一括名称（氏名）変更届（ 同上 の復代理人）",
    "７Ｃ－８": "一括名称（氏名）変更届（ 同上 の指定代理人）",
    "７Ｄ－１": "住所変更届（一括）（出願人・請求人）",
    "７Ｄ－２": "住所変更届（一括）（出願人・請求人の代理人）",
    "７Ｄ－３": "住所変更届（一括）（出願人・請求人の復代理人）",
    "７Ｄ－４": "住所変更届（一括）（出願人・請求人の指定代理人）",
    "７Ｄ－５": "住所変更届（一括）（申立人・付与後異議申立人）",
    "７Ｄ－６": "住所変更届（一括）（ 同上 の代理人）",
    "７Ｄ－７": "住所変更届（一括）（ 同上 の復代理人）",
    "７Ｄ－８": "住所変更届（一括）（ 同上 の指定代理人）",
    "８２－１": "手続補足書",
    "８２－２": "証明書類提出書",
    "８２－５": "特徴記載書",
    "８２－６": "意匠法第９条第５項に基づく協議の結果届",
    "８３－１": "刊行物等提出書",
    "８３－２": "情報提供書",
    "８３－３": "特徴記載書",
    "８７－５": "優先審理に関する事情説明書",
    "８７－６": "早期審理に関する事情説明書",
    "８７－７": "早期審理に関する事情説明補充書",
    "８８－１": "既納手数料返還請求書",
    "９０－５": "通知書（既納手数料返還）",
    "９０－７": "秘密意匠期間変更請求書",
    "９２－１": "審査前置登録",
    "９４－１": "閲覧貸出",
    "９４－２": "閲覧返却",
    "９６－５": "職権訂正履歴（職権訂正）",
    "９６－８": "職権訂正履歴（書類修正）",
    "９９－１": "中断",
    "９９－２": "中止",
    "９９－３": "行政不服決定（却下）",
    "９９－４": "行政不服決定（棄却）",
    "９９－５": "行政不服決定（認容）",
    "９９－６": "行政不服取下",
    "7C-11": "一括名称（氏名）変更届（被請求人・権利者）",
    "7C-12": "一括名称（氏名）変更届（ 同上 の代理人）",
    "7C-13": "一括名称（氏名）変更届（ 同上 の復代理人）",
    "7C-14": "一括名称（氏名）変更届（ 同上 の指定代理人）",
    "7C-15": "一括名称（氏名）変更届（参加人・準参加人）",
    "7C-16": "一括名称（氏名）変更届（ 同上 の代理人）",
    "7C-17": "一括名称（氏名）変更届（ 同上 の復代理人）",
    "7C-18": "一括名称（氏名）変更届（ 同上 の指定代理人）",
    "7D-11": "住所変更届（一括）（被請求人・権利者）",
    "7D-12": "住所変更届（一括）（被請求人・権利者の代理人）",
    "7D-13": "住所変更届（一括）（被請求人・権利者の復代理人）",
    "7D-14": "住所変更届（一括）（被請求人・権利者の指定代理人",
    "7D-15": "住所変更届（一括）（参加人・準参加人）",
    "7D-16": "住所変更届（一括）（参加人・準参加人の代理人）",
    "7D-17": "住所変更届（一括）（参加人・準参加人の復代理人）",
    "7D-18": "住所変更届（一括）（参加人・準参加人の指定代理人",
    "C1850": "副本の送付通知",
    "C1851": "答弁書副本の送付通知",
    "C1852": "弁駁書副本の送付通知",
    "C1853": "異議答弁書副本の送付通知",
    "C1854": "異議弁駁書副本の送付通知",
    "C1855": "訂正請求書副本の送付通知",
    "C1856": "意見書副本の送付通知",
    "C1857": "手続補正書副本の送付通知",
    "C1858": "上申書副本の送付通知",
    "C1859": "回答書副本の送付通知",
    "C1860": "口頭審理陳述要領書副本の送付通知",
    "C1861": "文書提出命令申立書副本の送付通知",
    "C1862": "文書特定の申立書副本の送付通知",
    "C1863": "鑑定の申立書副本の送付通知",
    "C1864": "証人尋問申出書副本の送付通知",
    "C1865": "尋問事項書副本の送付通知",
    "C1866": "鑑定事項書副本の送付通知",
    "C2331": "審理事項通知書",
    "C2711": "却下処分前通知書",
    "C2712": "一部取下通知",
    "C2713": "取下通知",
    "C2714": "刊行物等提出による通知書",
    "C2720": "書留郵便に付する送達の通知書",
    "C2721": "伺い回答書",
    "C2722": "情報提供利用状況通知書",
    "C2811": "更生決定",
    "C2812": "審判の費用の額の決定",
    "C2813": "催告書",
    "C2814": "予納通知書",
    "C2815": "証拠調べ期日呼出状",
    "C2816": "証拠調べ期日呼出状（職権）",
    "C2817": "証人呼出状",
    "C2818": "鑑定証人呼出状",
    "C2819": "口頭審理期日呼出状",
    "C2823": "審判手続終了通知書",
    "C2824": "誤送通知書",
    "C2825": "中断通知書",
    "C2826": "早期審理選定結果の通知書",
    "C2827": "面接通知書",
    "C2828": "審尋通知書",
    "C2829": "証拠調べ通知書",
    "C2830": "証拠保全通知書",
    "C2831": "鑑定依頼通知書",
    "C2832": "口頭審理陳述要領書の提出通知書",
    "C2833": "文書提出指令書",
    "C2834": "原本提出指令書",
    "C2835": "ひな形・見本・証拠物件還付通知書",
    "C2836": "訂正を認める審決の確定の通知書",
    "C2837": "補正許否の決定",
    "C2838": "参加申請書",
    "C2891": "通知書（その他）期間有",
    "C2892": "通知書（その他）期間無",
    "C2893": "指令書（その他）処分有（長官）",
    "C2894": "指令書（その他）処分有（審判長）",
    "C2895": "指令書（その他）処分無（長官）",
    "C2896": "指令書（その他）処分無（審判長）",
    "C3010": "証人等の陳述を記載した書面",
    "C3012": "郵便送達報告書",
    "C3013": "庁内書類（その他の庁内書類）",
    "C6091": "一部請求取下書",
    "C6511": "書面審理申立書",
    "C6512": "口頭審理申立書",
    "C6513": "口頭審理陳述要領書",
    "C6514": "証拠申出書",
    "C6515": "証拠説明書",
    "C6516": "録音テープ等の書面化申出書",
    "C6517": "録音テープ等の内容説明書",
    "C6518": "録音テープ等の内容説明書に対する意見書",
    "C6519": "費用の額の決定請求書",
    "C6520": "催告に対する意見書",
    "C6521": "費用額の疎明書",
    "C6541": "尋問事項書",
    "C6542": "回答希望事項記載書面",
    "C6543": "尋問に代わる書面の提出書",
    "C6544": "書証の申出書",
    "C6545": "文書提出命令の申立書",
    "C6546": "文書特定の申出書",
    "C6547": "文書提出命令に対する意見書",
    "C6571": "鑑定の申出に対する意見書",
    "C6572": "鑑定事項書",
    "C6573": "鑑定書",
    "C6591": "証拠取下書",
    "C6592": "不出頭の届出書",
    "C6821": "代表選定届（被請求人・権利者）",
    "C6822": "代表選定届（参加人・準参加人）",
    "C7211": "名称（氏名）変更届（被請求人・権利者）",
    "C7212": "名称（氏名）変更届（被請求人・権利者の代理人）",
    "C7213": "名称（氏名）変更届（被請求人・権利者の復代理人）",
    "C7214": "名称（氏名）変更届（被請求人・権利者の指定代理人",
    "C7215": "名称（氏名）変更届（参加人・準参加人）",
    "C7216": "名称（氏名）変更届（参加人・準参加人の代理人）",
    "C7217": "名称（氏名）変更届（参加人・準参加人の復代理人）",
    "C7218": "名称（氏名）変更届（参加人・準参加人の指定代理人",
    "C7311": "住所変更届（被請求人・権利者）",
    "C7312": "住所変更届（被請求人・権利者の代理人）",
    "C7313": "住所変更届（被請求人・権利者の復代理人）",
    "C7314": "住所変更届（被請求人・権利者の指定代理人）",
    "C7315": "住所変更届（参加人・準参加人）",
    "C7316": "住所変更届（参加人・準参加人の代理人）",
    "C7317": "住所変更届（参加人・準参加人の復代理人）",
    "C7318": "住所変更届（参加人・準参加人の指定代理人）",
    "C7421": "代理人変更届（出願人・請求人）",
    "C7422": "代理人受任届（出願人・請求人）",
    "C7423": "代理人選任届（出願人・請求人）",
    "C7424": "代理人辞任届（出願人・請求人）",
    "C7425": "代理人解任届（出願人・請求人）",
    "C7426": "代理権変更届（出願人・請求人）",
    "C7427": "代理権消滅届（出願人・請求人）",
    "C7428": "包括委任状援用制限届（出願人・請求人）",
    "C7431": "復代理人変更届（出願人・請求人）",
    "C7432": "復代理人受任届（出願人・請求人）",
    "C7433": "復代理人選任届（出願人・請求人）",
    "C7434": "復代理人辞任届（出願人・請求人）",
    "C7435": "復代理人解任届（出願人・請求人）",
    "C7436": "復代理権変更届（出願人・請求人）",
    "C7437": "復代理権消滅届（出願人・請求人）",
    "C7441": "代理人変更届（被請求人・権利者）",
    "C7442": "代理人受任届（被請求人・権利者）",
    "C7443": "代理人選任届（被請求人・権利者）",
    "C7444": "代理人辞任届（被請求人・権利者）",
    "C7445": "代理人解任届（被請求人・権利者）",
    "C7446": "代理権変更届（被請求人・権利者）",
    "C7447": "代理権消滅届（被請求人・権利者）",
    "C7448": "包括委任状援用制限届（被請求人・権利者）",
    "C7451": "復代理人変更届（被請求人・権利者）",
    "C7452": "復代理人受任届（被請求人・権利者）",
    "C7453": "復代理人選任届（被請求人・権利者）",
    "C7454": "復代理人辞任届（被請求人・権利者）",
    "C7455": "復代理人解任届（被請求人・権利者）",
    "C7456": "復代理権変更届（被請求人・権利者）",
    "C7457": "復代理権消滅届（被請求人・権利者）",
    "C7461": "代理人変更届（申立人・付与後異議申立人）",
    "C7462": "代理人受任届（申立人・付与後異議申立人）",
    "C7463": "代理人選任届（申立人・付与後異議申立人）",
    "C7464": "代理人辞任届（申立人・付与後異議申立人）",
    "C7465": "代理人解任届（申立人・付与後異議申立人）",
    "C7466": "代理権変更届（申立人・付与後異議申立人）",
    "C7467": "代理権消滅届（申立人・付与後異議申立人）",
    "C7468": "包括委任状援用制限届（申立人・付与後異議申立人）",
    "C7471": "復代理人変更届（申立人・付与後異議申立人）",
    "C7472": "復代理人受任届（申立人・付与後異議申立人）",
    "C7473": "復代理人選任届（申立人・付与後異議申立人）",
    "C7474": "復代理人辞任届（申立人・付与後異議申立人）",
    "C7475": "復代理人解任届（申立人・付与後異議申立人）",
    "C7476": "復代理権変更届（申立人・付与後異議申立人）",
    "C7477": "復代理権消滅届（申立人・付与後異議申立人）",
    "C7481": "代理人変更届（参加人・準参加人）",
    "C7482": "代理人受任届（参加人・準参加人）",
    "C7483": "代理人選任届（参加人・準参加人）",
    "C7484": "代理人辞任届（参加人・準参加人）",
    "C7485": "代理人解任届（参加人・準参加人）",
    "C7486": "代理権変更届（参加人・準参加人）",
    "C7487": "代理権消滅届（参加人・準参加人）",
    "C7488": "包括委任状援用制限届（参加人・準参加人）",
    "C7491": "復代理人変更届（参加人・準参加人）",
    "C7492": "復代理人受任届（参加人・準参加人）",
    "C7493": "復代理人選任届（参加人・準参加人）",
    "C7494": "復代理人辞任届（参加人・準参加人）",
    "C7495": "復代理人解任届（参加人・準参加人）",
    "C7496": "復代理権変更届（参加人・準参加人）",
    "C7497": "復代理権消滅届（参加人・準参加人）",
    "C7511": "印鑑変更届（被請求人・権利者）",
    "C7512": "印鑑変更届（被請求人・権利者の代理人）",
    "C7513": "印鑑変更届（被請求人・権利者の復代理人）",
    "C7514": "印鑑変更届（被請求人・権利者の指定代理人）",
    "C7515": "印鑑変更届（参加人・準参加人）",
    "C7516": "印鑑変更届（参加人・準参加人の代理人）",
    "C7517": "印鑑変更届（参加人・準参加人の復代理人）",
    "C7518": "印鑑変更届（参加人・準参加人の指定代理人）",
    "C7731": "出願変更届（独立→類似）",
    "C7732": "出願変更届（類似→独立）",
    "C9611": "請求取下登録",
    "１８－５０": "副本の送付通知",
    "１８－５１": "答弁書副本の送付通知",
    "１８－５２": "弁駁書副本の送付通知",
    "１８－５３": "異議答弁書副本の送付通知",
    "１８－５４": "異議弁駁書副本の送付通知",
    "１８－５５": "訂正請求書副本の送付通知",
    "１８－５６": "意見書副本の送付通知",
    "１８－５７": "手続補正書副本の送付通知",
    "１８－５８": "上申書副本の送付通知",
    "１８－５９": "回答書副本の送付通知",
    "１８－６０": "口頭審理陳述要領書副本の送付通知",
    "１８－６１": "文書提出命令申立書副本の送付通知",
    "１８－６２": "文書特定の申立書副本の送付通知",
    "１８－６３": "鑑定の申立書副本の送付通知",
    "１８－６４": "証人尋問申出書副本の送付通知",
    "１８－６５": "尋問事項書副本の送付通知",
    "１８－６６": "鑑定事項書副本の送付通知",
    "２３－３１": "審理事項通知書",
    "２７－１１": "却下処分前通知書",
    "２７－１２": "一部取下通知",
    "２７－１３": "取下通知",
    "２７－１４": "刊行物等提出による通知書",
    "２７－２０": "書留郵便に付する送達の通知書",
    "２７－２１": "伺い回答書",
    "２７－２２": "情報提供利用状況通知書",
    "２８－１１": "更生決定",
    "２８－１２": "審判の費用の額の決定",
    "２８－１３": "催告書",
    "２８－１４": "予納通知書",
    "２８－１５": "証拠調べ期日呼出状",
    "２８－１６": "証拠調べ期日呼出状（職権）",
    "２８－１７": "証人呼出状",
    "２８－１８": "鑑定証人呼出状",
    "２８－１９": "口頭審理期日呼出状",
    "２８－２３": "審判手続終了通知書",
    "２８－２４": "誤送通知書",
    "２８－２５": "中断通知書",
    "２８－２６": "早期審理選定結果の通知書",
    "２８－２７": "面接通知書",
    "２８－２８": "審尋通知書",
    "２８－２９": "証拠調べ通知書",
    "２８－３０": "証拠保全通知書",
    "２８－３１": "鑑定依頼通知書",
    "２８－３２": "口頭審理陳述要領書の提出通知書",
    "２８－３３": "文書提出指令書",
    "２８－３４": "原本提出指令書",
    "２８－３５": "ひな形・見本・証拠物件還付通知書",
    "２８－３６": "訂正を認める審決の確定の通知書",
    "２８－３７": "補正許否の決定",
    "２８－９１": "通知書（その他）期間有",
    "２８－９２": "通知書（その他）期間無",
    "２８－９３": "指令書（その他）処分有（長官）",
    "２８－９４": "指令書（その他）処分有（審判長）",
    "２８－９５": "指令書（その他）処分無（長官）",
    "２８－９６": "指令書（その他）処分無（審判長）",
    "３０－１０": "証人等の陳述を記載した書面",
    "３０－１２": "郵便送達報告書",
    "３０－１３": "庁内書類（その他の庁内書類）",
    "６０－９１": "一部請求取下書",
    "６５－１１": "書面審理申立書",
    "６５－１２": "口頭審理申立書",
    "６５－１３": "口頭審理陳述要領書",
    "６５－１４": "証拠申出書",
    "６５－１５": "証拠説明書",
    "６５－１６": "録音テープ等の書面化申出書",
    "６５－１７": "録音テープ等の内容説明書",
    "６５－１８": "録音テープ等の内容説明書に対する意見書",
    "６５－１９": "費用の額の決定請求書",
    "６５－２０": "催告に対する意見書",
    "６５－２１": "費用額の疎明書",
    "６５－４１": "尋問事項書",
    "６５－４２": "回答希望事項記載書面",
    "６５－４３": "尋問に代わる書面の提出書",
    "６５－４４": "書証の申出書",
    "６５－４５": "文書提出命令の申立書",
    "６５－４６": "文書特定の申出書",
    "６５－４７": "文書提出命令に対する意見書",
    "６５－７１": "鑑定の申出に対する意見書",
    "６５－７２": "鑑定事項書",
    "６５－７３": "鑑定書",
    "６５－９１": "証拠取下書",
    "６５－９２": "不出頭の届出書",
    "６８－２１": "代表選定届（被請求人・権利者）",
    "６８－２２": "代表選定届（参加人・準参加人）",
    "７２－１１": "名称（氏名）変更届（被請求人・権利者）",
    "７２－１２": "名称（氏名）変更届（被請求人・権利者の代理人）",
    "７２－１３": "名称（氏名）変更届（被請求人・権利者の復代理人）",
    "７２－１４": "名称（氏名）変更届（被請求人・権利者の指定代理人",
    "７２－１５": "名称（氏名）変更届（参加人・準参加人）",
    "７２－１６": "名称（氏名）変更届（参加人・準参加人の代理人）",
    "７２－１７": "名称（氏名）変更届（参加人・準参加人の復代理人）",
    "７２－１８": "名称（氏名）変更届（参加人・準参加人の指定代理人",
    "７３－１１": "住所変更届（被請求人・権利者）",
    "７３－１２": "住所変更届（被請求人・権利者の代理人）",
    "７３－１３": "住所変更届（被請求人・権利者の復代理人）",
    "７３－１４": "住所変更届（被請求人・権利者の指定代理人）",
    "７３－１５": "住所変更届（参加人・準参加人）",
    "７３－１６": "住所変更届（参加人・準参加人の代理人）",
    "７３－１７": "住所変更届（参加人・準参加人の復代理人）",
    "７３－１８": "住所変更届（参加人・準参加人の指定代理人）",
    "７４－２１": "代理人変更届（出願人・請求人）",
    "７４－２２": "代理人受任届（出願人・請求人）",
    "７４－２３": "代理人選任届（出願人・請求人）",
    "７４－２４": "代理人辞任届（出願人・請求人）",
    "７４－２５": "代理人解任届（出願人・請求人）",
    "７４－２６": "代理権変更届（出願人・請求人）",
    "７４－２７": "代理権消滅届（出願人・請求人）",
    "７４－２８": "包括委任状援用制限届（出願人・請求人）",
    "７４－３１": "復代理人変更届（出願人・請求人）",
    "７４－３２": "復代理人受任届（出願人・請求人）",
    "７４－３３": "復代理人選任届（出願人・請求人）",
    "７４－３４": "復代理人辞任届（出願人・請求人）",
    "７４－３５": "復代理人解任届（出願人・請求人）",
    "７４－３６": "復代理権変更届（出願人・請求人）",
    "７４－３７": "復代理権消滅届（出願人・請求人）",
    "７４－４１": "代理人変更届（被請求人・権利者）",
    "７４－４２": "代理人受任届（被請求人・権利者）",
    "７４－４３": "代理人選任届（被請求人・権利者）",
    "７４－４４": "代理人辞任届（被請求人・権利者）",
    "７４－４５": "代理人解任届（被請求人・権利者）",
    "７４－４６": "代理権変更届（被請求人・権利者）",
    "７４－４７": "代理権消滅届（被請求人・権利者）",
    "７４－４８": "包括委任状援用制限届（被請求人・権利者）",
    "７４－５１": "復代理人変更届（被請求人・権利者）",
    "７４－５２": "復代理人受任届（被請求人・権利者）",
    "７４－５３": "復代理人選任届（被請求人・権利者）",
    "７４－５４": "復代理人辞任届（被請求人・権利者）",
    "７４－５５": "復代理人解任届（被請求人・権利者）",
    "７４－５６": "復代理権変更届（被請求人・権利者）",
    "７４－５７": "復代理権消滅届（被請求人・権利者）",
    "７４－６１": "代理人変更届（申立人・付与後異議申立人）",
    "７４－６２": "代理人受任届（申立人・付与後異議申立人）",
    "７４－６３": "代理人選任届（申立人・付与後異議申立人）",
    "７４－６４": "代理人辞任届（申立人・付与後異議申立人）",
    "７４－６５": "代理人解任届（申立人・付与後異議申立人）",
    "７４－６６": "代理権変更届（申立人・付与後異議申立人）",
    "７４－６７": "代理権消滅届（申立人・付与後異議申立人）",
    "７４－６８": "包括委任状援用制限届（申立人・付与後異議申立人）",
    "７４－７１": "復代理人変更届（申立人・付与後異議申立人）",
    "７４－７２": "復代理人受任届（申立人・付与後異議申立人）",
    "７４－７３": "復代理人選任届（申立人・付与後異議申立人）",
    "７４－７４": "復代理人辞任届（申立人・付与後異議申立人）",
    "７４－７５": "復代理人解任届（申立人・付与後異議申立人）",
    "７４－７６": "復代理権変更届（申立人・付与後異議申立人）",
    "７４－７７": "復代理権消滅届（申立人・付与後異議申立人）",
    "７４－８１": "代理人変更届（参加人・準参加人）",
    "７４－８２": "代理人受任届（参加人・準参加人）",
    "７４－８３": "代理人選任届（参加人・準参加人）",
    "７４－８４": "代理人辞任届（参加人・準参加人）",
    "７４－８５": "代理人解任届（参加人・準参加人）",
    "７４－８６": "代理権変更届（参加人・準参加人）",
    "７４－８７": "代理権消滅届（参加人・準参加人）",
    "７４－８８": "包括委任状援用制限届（参加人・準参加人）",
    "７４－９１": "復代理人変更届（参加人・準参加人）",
    "７４－９２": "復代理人受任届（参加人・準参加人）",
    "７４－９３": "復代理人選任届（参加人・準参加人）",
    "７４－９４": "復代理人辞任届（参加人・準参加人）",
    "７４－９５": "復代理人解任届（参加人・準参加人）",
    "７４－９６": "復代理権変更届（参加人・準参加人）",
    "７４－９７": "復代理権消滅届（参加人・準参加人）",
    "７５－１１": "印鑑変更届（被請求人・権利者）",
    "７５－１２": "印鑑変更届（被請求人・権利者の代理人）",
    "７５－１３": "印鑑変更届（被請求人・権利者の復代理人）",
    "７５－１４": "印鑑変更届（被請求人・権利者の指定代理人）",
    "７５－１５": "印鑑変更届（参加人・準参加人）",
    "７５－１６": "印鑑変更届（参加人・準参加人の代理人）",
    "７５－１７": "印鑑変更届（参加人・準参加人の復代理人）",
    "７５－１８": "印鑑変更届（参加人・準参加人の指定代理人）",
    "７７－３１": "出願変更届（独立→類似）",
    "７７－３２": "出願変更届（類似→独立）",
    "７Ｃ－１１": "一括名称（氏名）変更届（被請求人・権利者）",
    "７Ｃ－１２": "一括名称（氏名）変更届（ 同上 の代理人）",
    "７Ｃ－１３": "一括名称（氏名）変更届（ 同上 の復代理人）",
    "７Ｃ－１４": "一括名称（氏名）変更届（ 同上 の指定代理人）",
    "７Ｃ－１５": "一括名称（氏名）変更届（参加人・準参加人）",
    "７Ｃ－１６": "一括名称（氏名）変更届（ 同上 の代理人）",
    "７Ｃ－１７": "一括名称（氏名）変更届（ 同上 の復代理人）",
    "７Ｃ－１８": "一括名称（氏名）変更届（ 同上 の指定代理人）",
    "７Ｄ－１１": "住所変更届（一括）（被請求人・権利者）",
    "７Ｄ－１２": "住所変更届（一括）（被請求人・権利者の代理人）",
    "７Ｄ－１３": "住所変更届（一括）（被請求人・権利者の復代理人）",
    "７Ｄ－１４": "住所変更届（一括）（被請求人・権利者の指定代理人",
    "７Ｄ－１５": "住所変更届（一括）（参加人・準参加人）",
    "７Ｄ－１６": "住所変更届（一括）（参加人・準参加人の代理人）",
    "７Ｄ－１７": "住所変更届（一括）（参加人・準参加人の復代理人）",
    "７Ｄ－１８": "住所変更届（一括）（参加人・準参加人の指定代理人",
    "９６－１１": "請求取下登録",
    "C971020": "特徴記載（公報用）",
    "９７－１０２０": "特徴記載（公報用）"
}

    
    # 審判最終処分種別コード（C0470）
    APPEAL_DISPOSITION_MAP = {
        '００': '審査部差戻し',
        '０１': '請求成立',
        '０２': '請求不成立',
        '０３': '一部成立',
        '０４': '出願取下による審判終了',
        '０５': '出願放棄による審判終了',
        '０６': '出願変更による審判終了',
        '０７': '前置登録査定',
        '０８': '補正却下新出願による審判終了',
        '０９': '審判請求取下',
        '１０': '請求無効',
        '１１': '審決却下',
        '１２': '決定却下',
        '１３': '欠号（誤送取戻等による審判終了）',
        '１４': '不受理',
        '１５': '異議終了',
        '１６': '請求手続却下（旧請求無効）',
        '１７': '書換申請取下による審判終了',
    }

    # C0860（登録中間コード）完全版マッピング
    # 項番1～521から480個のマッピングを抽出
    # 全角・半角両対応版（計960個）
    # C0860（登録中間コード）完全版マッピング
    # 項番1～1978から1978個のマッピングを抽出
    # 全角・半角両対応版（計3956個）
    REGISTRATION_INTERMEDIATE_CODE_MAP = {
    "A01": "登録査定書",
    "A045": "出願却下処分書",
    "A26": "誤送通知書",
    "A28": "再送",
    "A29": "官報",
    "A971091": "職権取消通知",
    "A971092": "無効通知",
    "A971093": "職権更正通知",
    "R100": "設定納付書",
    "R1001": "設定納付書（包括納付）",
    "R1004": "設定納付書（官庁）",
    "R1005": "設定納付書（延長）",
    "R101": "追加の特許の特許料納付書",
    "R1011": "追加の特許の特許料納付書（包括納付）",
    "R1014": "追加の特許の特許料納付書（官庁）",
    "R102": "類似意匠登録料納付書",
    "R1021": "類似意匠登録料納付書（包括納付）",
    "R1022": "類似意匠登録料納付書（免除）",
    "R1023": "類似意匠登録料納付書（猶予）",
    "R1024": "類似意匠登録料納付書（官庁）",
    "R103": "防護標章登録料納付書",
    "R1031": "防護標章登録料納付書（包括納付）",
    "R1032": "防護標章登録料納付書（免除）",
    "R1033": "防護標章登録料納付書（猶予）",
    "R1034": "防護標章登録料納付書（官庁）",
    "R104": "商標更新登録料納付書",
    "R1041": "商標更新登録料納付書（包括納付）",
    "R1042": "商標更新登録料納付書（免除）",
    "R1043": "商標更新登録料納付書（猶予）",
    "R1044": "商標更新登録料納付書（官庁）",
    "R105": "防護標章更新登録料納付書",
    "R1051": "防護標章更新登録料納付書（包括納付）",
    "R1052": "防護標章更新登録料納付書（免除）",
    "R1053": "防護標章更新登録料納付書（猶予）",
    "R1054": "防護標章更新登録料納付書（官庁）",
    "R110": "納付書（設定補充）",
    "R111": "追加の特許の特許料納付書（設定補充）",
    "R112": "類似意匠登録料納付書（設定補充）",
    "R113": "防護標章登録料納付書（設定補充）",
    "R114": "商標更新登録料納付書（設定補充）",
    "R115": "防護標章更新登録料納付書（設定補充）",
    "R150": "登録証",
    "R151": "登録通知書",
    "R152": "商標登録通知書",
    "R153": "特許存続期間延長登録通知書",
    "R154": "登録証（再発行）",
    "R155": "出願却下処分前通知",
    "R1561": "書換時期通知",
    "R1562": "書換期限通知",
    "R1563": "書換登録済通知",
    "R157": "特許証（訂正）",
    "R1581": "意匠登録証（ハーグ）（再発行）",
    "R1582": "意匠登録証（ハーグ）（訂正）",
    "R160": "却下理由通知書（設定）",
    "R1601": "却下理由通知（設定）（返送）",
    "R1602": "却下理由通知（設定）（再送）",
    "R1603": "却下理由通知（設定）（官報）",
    "R170": "手続却下の処分（設定）",
    "R1701": "手続却下処分書（設定）（返送）",
    "R1702": "手続却下処分書（設定）（再送）",
    "R1703": "手続却下処分書（設定）（官報）",
    "R180": "納付書補充命令書（設定）",
    "R1801": "納付書補充指令書（設定）（返送）",
    "R1802": "納付書補充指令書（設定）（再送）",
    "R1803": "納付書補充指令書（設定）（官報）",
    "R191": "弁明書（設定）",
    "R193": "上申書（設定）",
    "R195": "雑書類（設定）",
    "R197": "手続補足書（設定）",
    "R20": "年金納付書",
    "R200": "商標登録料納付書",
    "R2001": "特許料納付書（自動納付）",
    "R201": "商標権存続期間更新登録申請書",
    "R21": "年金納付書（補充）",
    "R210": "商標登録料納付書（分納補充）",
    "R211": "商標権存続期間更新登録申請書（補充）",
    "R212": "納付書（補充）（差出書）",
    "R220": "商標権存続期間更新登録申請書（補足）",
    "R230": "訂正書（請求項削除）",
    "R231": "訂正書（明細書等）",
    "R250": "年金領収書、年金領収書（分納）",
    "R2501": "年金領収書（一括）",
    "R251": "更新申請登録通知書",
    "R2521": "自動納付登録通知書",
    "R2522": "自動納付事前通知書",
    "R2523": "自動納付終了通知書",
    "R2524": "自動納付中止の通知",
    "R2525": "適用除外通知",
    "R260": "却下理由通知書（年金）",
    "R2601": "却下理由通知書（訂正）",
    "R2602": "却下理由通知（年金）（返送）",
    "R2603": "却下理由通知（年金）（再送）",
    "R2604": "却下理由通知（年金）（官報）",
    "R261": "一部却下理由通知書（年金）",
    "R2611": "一部却下理由通知（返送）",
    "R2612": "一部却下理由通知（再送）",
    "R2613": "一部却下理由通知（官報）",
    "R270": "手続却下の処分（年金）",
    "R2701": "手続却下処分書（訂正）",
    "R2702": "手続却下処分書（年金）（返送）",
    "R2703": "手続却下処分書（年金）（再送）",
    "R2704": "手続却下処分書（年金）（官報）",
    "R271": "一部手続却下の処分（年金）",
    "R2711": "一部手続却下処分書（年金）（返送）",
    "R2712": "一部手続却下処分書（年金）（再送）",
    "R2713": "一部手続却下処分書（年金）（官報）",
    "R280": "納付書補充指令書",
    "R2801": "納付書補充指令書（差出書）",
    "R2802": "手続補正指令書（訂正）",
    "R2803": "納付書補充指令書（分納）（返送）",
    "R2804": "納付書補充指令書（分納）（再送）",
    "R2805": "納付書補充指令書（分納）（官報）",
    "R2806": "納付書補充指令書（年金）（差出書）（返送）",
    "R2807": "納付書補充指令書（年金）（差出書）（再送）",
    "R2808": "納付書補充指令書（年金）（差出書）（官報）",
    "R281": "商標更新登録申請書補充指令書",
    "R2811": "商標更新登録申請書補充指令書（返送）",
    "R2812": "商標更新登録申請書補充指令書（再送）",
    "R2813": "商標更新登録申請書補充指令書（官報）",
    "R291": "弁明書（年金）",
    "R292": "弁明書（訂正）",
    "R293": "上申書（年金）",
    "R294": "上申書（回復）",
    "R295": "雑書類（年金）",
    "R296": "通知書（その他通知）",
    "R297": "手続補足書（年金）",
    "R2971": "手続補正書（訂正）",
    "R311801": "本権抹消登録申請書 （権利放棄）",
    "R311802": "本権一部抹消登録申請書 （一部放棄）",
    "R311899": "抹消登録申請書",
    "R311Ｄ99": "回復登録申請書",
    "R311Ｇ99": "仮登録申請書",
    "R311Ｈ99": "嘱託書 （予告登録）",
    "R311Ｌ99": "嘱託書 （和議）",
    "R312899": "抹消登録申請書",
    "R313111": "本権移転登録申請書",
    "R313112": "本権移転登録申請書",
    "R313113": "本権移転登録申請書",
    "R313114": "本権移転登録申請書",
    "R313115": "本権移転登録申請書",
    "R313116": "本権移転登録申請書",
    "R313117": "本権移転登録申請書",
    "R313118": "本権移転登録申請書",
    "R313119": "本権移転登録申請書",
    "R313121": "本権移転登録申請書",
    "R313122": "本権移転登録申請書",
    "R313131": "本権移転信託登録申請書 （信託契約）",
    "R313132": "本権移転信託抹消登録申請書（信託抹消）",
    "R313133": "本権移転信託登録申請書（信託契約）",
    "R313134": "本権移転信託登録申請書（持分信託契約）",
    "R313135": "本権変更信託登録申請書（信託契約）",
    "R313136": "本権変更信託登録申請書（共有信託契約）",
    "R313137": "本権変更信託登録申請書（持分信託契約）",
    "R313138": "本権変更信託登録申請書（信託変更契約）",
    "R313141": "本権共有の特約等の事項の変更登録申請書",
    "R313199": "本権移転登録申請書",
    "R313501": "表示変更登録申請書 （移転）",
    "R313502": "表示変更登録申請書 （組織変更）",
    "R313503": "表示変更登録申請書 （改姓）",
    "R313504": "表示変更登録申請書 （改称）",
    "R313505": "表示変更登録申請書 （国籍変更）",
    "R313506": "表示変更登録申請書 （行政区画の変更）",
    "R313507": "表示変更登録申請書 （住居表示の実施）",
    "R313508": "表示変更登録申請書 （地番変更）",
    "R313509": "表示変更登録申請書 （土地名称変更）",
    "R313510": "表示変更登録申請書 （転入）",
    "R313511": "表示変更登録申請書 （転居）",
    "R313512": "表示変更登録申請書 （市制施行）",
    "R313513": "表示変更登録申請書 （区制施行）",
    "R313514": "表示変更登録申請書 （町名地番変更）",
    "R313531": "表示変更登録申請書 （住所）",
    "R313532": "表示変更登録申請書 （住所）",
    "R313533": "表示変更登録申請書 （氏名）",
    "R313534": "表示変更登録申請書 （国籍）",
    "R313599": "表示変更登録申請書",
    "R313611": "表示更正登録申請書 （住所）",
    "R313612": "表示更正登録申請書 （氏名）",
    "R313613": "表示更正登録申請書 （国籍）",
    "R313614": "表示更正登録申請書 （商号）",
    "R313631": "表示更正登録申請書 （住所）",
    "R313632": "表示更正登録申請書 （住所）",
    "R313633": "表示更正登録申請書 （氏名）",
    "R313634": "表示更正登録申請書 （国籍）",
    "R313699": "表示更正登録申請書",
    "R313803": "仮登録抹消登録申請書 （解除・弁済）",
    "R313805": "仮登録抹消登録申請書 （放棄）",
    "R313899": "抹消登録申請書",
    "R313Ｄ99": "回復登録申請書",
    "R313Ｆ01": "嘱託書 （差押命令）",
    "R313Ｆ02": "嘱託書 （仮差押決定）",
    "R313Ｆ99": "嘱託書",
    "R313Ｇ01": "仮登録申請書 （代物弁済予約）",
    "R313Ｇ99": "仮登録申請書",
    "R313Ｈ99": "嘱託書 （予告登録）",
    "R313Ｉ99": "通知書 （工場抵当）",
    "R313Ｊ01": "嘱託書 （会社更正計画許可）",
    "R313Ｊ99": "嘱託書 （会社更正）",
    "R313Ｋ99": "嘱託書 （破産）",
    "R313Ｌ99": "嘱託書 （和議）",
    "R313Ｚ02": "信託登録申請書",
    "R313Ｚ03": "信託抹消登録申請書",
    "R314201": "専用実施権設定登録申請書 （契約・許諾）",
    "R314202": "専用実施権設定登録申請書 （許諾）",
    "R314211": "専用実施権移転登録申請書 （相続・合併）",
    "R314212": "専用実施権移転登録申請書 （合併）",
    "R314213": "専用実施権移転登録申請書 （譲渡）",
    "R314214": "専用実施権移転登録申請書 （共有）",
    "R314215": "専用実施権移転登録申請書 （持分相続合併）",
    "R314216": "専用実施権移転登録申請書 （持分合併）",
    "R314217": "専用実施権移転登録申請書 （持分譲渡放棄）",
    "R314218": "専用実施権移転登録申請書 （持分共有）",
    "R314219": "専用実施権移転登録申請書 （持分放棄）",
    "R314221": "専用実施権変更登録申請書 （変更契約）",
    "R314222": "専用実施権変更登録申請書 （契約）",
    "R314223": "専用実施権変更登録申請書 （許諾）",
    "R314225": "専用実施権移転登録申請書 （共有分割）",
    "R314226": "専用実施権移転登録申請書（持分共有分割）",
    "R314230": "専用実施権設定信託登録申請書 （信託契約）",
    "R314231": "専用実施権移転信託登録申請書 （信託契約）",
    "R314232": "専用実施権信託抹消登録申請書 （信託抹消）",
    "R314233": "専用実施権設定信託登録申請書（信託契約）",
    "R314234": "専用実施権移転信託登録申請書（信託契約）",
    "R314235": "専用実施権移転信託登録申請書（持分信託）",
    "R314236": "専用実施権変更信託登録申請書（信託契約）",
    "R314237": "専用実施権変更信託登録申請書（共有信託）",
    "R314238": "専用実施権変更信託登録申請書（持分信託）",
    "R314239": "専用実施権変更信託登録申請書（信託変更）",
    "R314240": "専用実施権抹消信託登録申請書（契約解除）",
    "R314299": "専用実施権登録申請書",
    "R314303": "質権設定登録申請書 （設定契約）",
    "R314304": "根質権設定登録申請書 （設定契約）",
    "R314311": "質権移転登録申請書 （相続・合併）",
    "R314312": "質権移転登録申請書 （合併）",
    "R314313": "質権移転登録申請書 （譲渡）",
    "R314314": "質権移転登録申請書 （一部譲渡）",
    "R314315": "質権移転登録申請書 （持分相続・合併）",
    "R314316": "質権移転登録申請書 （持分合併）",
    "R314317": "質権移転登録申請書 （持分譲渡・放棄）",
    "R314318": "質権移転登録申請書 （持分の一部譲渡）",
    "R314319": "質権移転登録申請書 （持分放棄）",
    "R314321": "質権変更登録申請書 （変更契約）",
    "R314325": "質権移転登録申請書 （一部分割）",
    "R314326": "質権移転登録申請書 （持分の一部分割）",
    "R314327": "根質権移転登録申請書 （一部分割）",
    "R314328": "根質権移転登録申請書（持分の一部分割）",
    "R314330": "質権設定信託登録申請書 （信託契約）",
    "R314331": "質権移転信託登録申請書 （信託契約）",
    "R314332": "質権移転信託抹消登録申請書 （信託抹消）",
    "R314333": "根質権設定信託登録申請書 （信託契約）",
    "R314334": "根質権移転信託登録申請書 （信託契約）",
    "R314335": "根質権移転信託抹消登録申請書（信託抹消）",
    "R314336": "質権設定信託登録申請書（信託契約）",
    "R314337": "質権移転信託登録申請書（信託契約）",
    "R314338": "質権移転信託登録申請書（持分信託契約）",
    "R314339": "質権変更信託登録申請書（信託契約）",
    "R314340": "質権変更信託登録申請書（共有信託契約）",
    "R314341": "根質権設定信託登録申請書 （相続・合併）",
    "R314343": "根質権移転登録申請書 （譲渡）",
    "R314344": "根質権移転登録申請書 （一部譲渡）",
    "R314345": "根質権移転登録申請書 （持分相続・合併）",
    "R314347": "根質権移転登録申請書 （持分譲渡・放棄）",
    "R314348": "根質権移転登録申請書 （持分の一部譲渡）",
    "R314350": "根質権変更登録申請書 （変更契約）",
    "R314351": "質権変更信託登録申請書（持分信託契約）",
    "R314352": "質権変更信託登録申請書（信託変更契約）",
    "R314353": "質権抹消信託登録申請書（契約解除）",
    "R314354": "根質権設定信託登録申請書（信託契約）",
    "R314355": "根質権移転信託登録申請書（信託契約）",
    "R314356": "根質権移転信託登録申請書（持分信託契約）",
    "R314357": "根質権変更信託登録申請書（信託契約）",
    "R314358": "根質権変更信託登録申請書（共有信託契約）",
    "R314359": "根質権変更信託登録申請書（持分信託契約）",
    "R314360": "根質権変更信託登録申請書（信託変更契約）",
    "R314361": "根質権抹消信託登録申請書（契約解除）",
    "R314399": "質権登録申請書",
    "R314501": "表示変更登録申請書 （移転）",
    "R314502": "表示変更登録申請書 （組織変更）",
    "R314503": "表示変更登録申請書 （改姓）",
    "R314504": "表示変更登録申請書 （改称）",
    "R314505": "表示変更登録申請書 （国籍変更）",
    "R314506": "表示変更登録申請書 （行政区画の変更）",
    "R314507": "表示変更登録申請書 （住居表示の実施）",
    "R314508": "表示変更登録申請書 （地番変更）",
    "R314509": "表示変更登録申請書 （土地名称変更）",
    "R314510": "表示変更登録申請書 （転入）",
    "R314511": "表示変更登録申請書 （転居）",
    "R314512": "表示変更登録申請書 （市制施行）",
    "R314513": "表示変更登録申請書 （区制施行）",
    "R314514": "表示変更登録申請書 （町名地番変更）",
    "R314531": "表示変更登録申請書 （住所）",
    "R314532": "表示変更登録申請書 （住所）",
    "R314533": "表示変更登録申請書 （氏名）",
    "R314534": "表示変更登録申請書 （国籍）",
    "R314599": "表示変更登録申請書",
    "R314611": "表示更正登録申請書 （住所）",
    "R314612": "表示更正登録申請書 （氏名）",
    "R314613": "表示更正登録申請書 （国籍）",
    "R314614": "表示更正登録申請書 （商号）",
    "R314631": "表示更正登録申請書 （住所）",
    "R314632": "表示更正登録申請書 （住所）",
    "R314633": "表示更正登録申請書 （氏名）",
    "R314634": "表示更正登録申請書 （国籍）",
    "R314699": "表示更正登録申請書",
    "R314803": "専用実施権抹消登録申請書 （解除・弁済）",
    "R314804": "専用実施権抹消登録申請書 （債務弁済）",
    "R314805": "専用実施権抹消登録申請書 （放棄）",
    "R314899": "抹消登録申請書",
    "R314Ｄ99": "回復登録申請書",
    "R314Ｆ01": "嘱託書 （差押命令）",
    "R314Ｆ02": "嘱託書 （仮差押決定）",
    "R314Ｆ99": "嘱託書",
    "R314Ｇ01": "仮登録申請書 （代物弁済予約）",
    "R314Ｇ99": "仮登録申請書",
    "R314Ｈ99": "嘱託書 （予告登録）",
    "R314Ｉ99": "通知書 （工場抵当）",
    "R314Ｊ01": "嘱託書 （会社更正計画許可）",
    "R314Ｊ99": "嘱託書 （会社更正）",
    "R314Ｋ99": "嘱託書 （破産）",
    "R314Ｌ99": "嘱託書 （和議）",
    "R314Ｚ02": "信託登録申請書",
    "R314Ｚ03": "信託抹消登録申請書",
    "R315201": "通常実施権設定登録申請書 （契約・許諾）",
    "R315202": "通常実施権設定登録申請書 （許諾）",
    "R315211": "通常実施権移転登録申請書 （相続・合併）",
    "R315212": "通常実施権移転登録申請書 （合併）",
    "R315213": "通常実施権移転登録申請書 （譲渡）",
    "R315214": "通常実施権移転登録申請書 （共有）",
    "R315215": "通常実施権移転登録申請書 （持分相続合併）",
    "R315216": "通常実施権移転登録申請書 （持分合併）",
    "R315217": "通常実施権移転登録申請書 （持分譲渡放棄）",
    "R315218": "通常実施権移転登録申請書 （持分共有）",
    "R315219": "通常実施権移転登録申請書 （持分放棄）",
    "R315221": "通常実施権変更登録申請書 （変更契約）",
    "R315222": "通常実施権変更登録申請書 （契約）",
    "R315223": "通常実施権変更登録申請書 （許諾）",
    "R315225": "通常実施権移転登録申請書 （共有分割）",
    "R315226": "通常実施権移転登録申請書（持分共有分割）",
    "R315230": "通常実施権設定信託登録申請書 （信託契約）",
    "R315231": "通常実施権移転信託登録申請書 （信託契約）",
    "R315232": "通常実施権信託抹消登録申請書 （信託抹消）",
    "R315233": "通常実施権設定信託登録申請書（信託契約）",
    "R315234": "通常実施権移転信託登録申請書（信託契約）",
    "R315235": "通常実施権移転信託登録申請書（持分信託）",
    "R315236": "通常実施権変更信託登録申請書（信託契約）",
    "R315237": "通常実施権変更信託登録申請書（共有信託）",
    "R315238": "通常実施権変更信託登録申請書（持分信託）",
    "R315239": "通常実施権変更信託登録申請書（信託変更）",
    "R315240": "通常実施権抹消信託登録申請書（契約解除）",
    "R315299": "通常実施権登録申請書",
    "R315303": "質権設定登録申請書 （設定契約）",
    "R315304": "根質権設定登録申請書 （設定契約）",
    "R315311": "質権移転登録申請書 （相続・合併）",
    "R315312": "質権移転登録申請書 （合併）",
    "R315313": "質権移転登録申請書 （譲渡）",
    "R315314": "質権移転登録申請書 （一部譲渡）",
    "R315315": "質権移転登録申請書 （持分相続・合併）",
    "R315316": "質権移転登録申請書 （持分合併）",
    "R315317": "質権移転登録申請書 （持分譲渡・放棄）",
    "R315318": "質権移転登録申請書 （持分の一部譲渡）",
    "R315319": "質権移転登録申請書 （持分放棄）",
    "R315321": "質権変更登録申請書 （変更契約）",
    "R315325": "質権移転登録申請書 （一部分割）",
    "R315326": "質権移転登録申請書 （持分の一部分割）",
    "R315327": "根質権移転登録申請書 （一部分割）",
    "R315328": "根質権移転登録申請書（持分の一部分割）",
    "R315330": "質権設定信託登録申請書 （信託契約）",
    "R315331": "質権移転信託登録申請書 （信託契約）",
    "R315332": "質権移転信託抹消登録申請書 （信託抹消）",
    "R315333": "根質権設定信託登録申請書 （信託契約）",
    "R315334": "根質権移転信託登録申請書 （信託契約）",
    "R315335": "根質権移転信託抹消登録申請書（信託抹消）",
    "R315336": "質権設定信託登録申請書（信託契約）",
    "R315337": "質権移転信託登録申請書（信託契約）",
    "R315338": "質権移転信託登録申請書（持分信託契約）",
    "R315339": "質権変更信託登録申請書（信託契約）",
    "R315340": "質権変更信託登録申請書（共有信託契約）",
    "R315341": "根質権移転登録申請書 （相続・合併）",
    "R315343": "根質権移転登録申請書 （譲渡）",
    "R315344": "根質権移転登録申請書 （一部譲渡）",
    "R315345": "根質権移転登録申請書 （持分相続・合併）",
    "R315347": "根質権移転登録申請書 （持分譲渡・放棄）",
    "R315348": "根質権移転登録申請書 （持分の一部譲渡）",
    "R315350": "根質権変更登録申請書 （変更契約）",
    "R315351": "質権変更信託登録申請書（持分信託契約）",
    "R315352": "質権変更信託登録申請書（信託変更契約）",
    "R315353": "質権抹消信託登録申請書（契約解除）",
    "R315354": "根質権設定信託登録申請書（信託契約）",
    "R315355": "根質権移転信託登録申請書（信託契約）",
    "R315356": "根質権移転信託登録申請書（持分信託契約）",
    "R315357": "根質権変更信託登録申請書（信託契約）",
    "R315358": "根質権変更信託登録申請書（共有信託契約）",
    "R315359": "根質権変更信託登録申請書（持分信託契約）",
    "R315360": "根質権変更信託登録申請書（信託変更契約）",
    "R315361": "根質権抹消信託登録申請書（契約解除）",
    "R315399": "質権登録申請書",
    "R315501": "表示変更登録申請書 （移転）",
    "R315502": "表示変更登録申請書 （組織変更）",
    "R315503": "表示変更登録申請書 （改姓）",
    "R315504": "表示変更登録申請書 （改称）",
    "R315505": "表示変更登録申請書 （国籍変更）",
    "R315506": "表示変更登録申請書 （行政区画の変更）",
    "R315507": "表示変更登録申請書 （住居表示の実施）",
    "R315508": "表示変更登録申請書 （地番変更）",
    "R315509": "表示変更登録申請書 （土地名称変更）",
    "R315510": "表示変更登録申請書 （転入）",
    "R315511": "表示変更登録申請書 （転居）",
    "R315512": "表示変更登録申請書 （市制施行）",
    "R315513": "表示変更登録申請書 （区制施行）",
    "R315514": "表示変更登録申請書 （町名地番変更）",
    "R315531": "表示変更登録申請書 （町名地番変更）",
    "R315532": "表示変更登録申請書 （住所）",
    "R315533": "表示変更登録申請書 （氏名）",
    "R315534": "表示変更登録申請書 （国籍）",
    "R315599": "表示変更登録申請書",
    "R315611": "表示更正登録申請書 （住所）",
    "R315612": "表示更正登録申請書 （氏名）",
    "R315613": "表示更正登録申請書 （国籍）",
    "R315614": "表示更正登録申請書 （商号）",
    "R315631": "表示更正登録申請書 （住所）",
    "R315632": "表示更正登録申請書 （住所）",
    "R315633": "表示更正登録申請書 （氏名）",
    "R315634": "表示更正登録申請書 （国籍）",
    "R315699": "表示更正登録申請書",
    "R315803": "通常実施権抹消登録申請書 （解除・弁済）",
    "R315804": "通常実施権抹消登録申請書 （債務弁済）",
    "R315805": "通常実施権抹消登録申請書 （放棄）",
    "R315899": "抹消登録申請書",
    "R315Ｄ99": "回復登録申請書",
    "R315Ｆ01": "嘱託書 （差押命令）",
    "R315Ｆ02": "嘱託書 （仮差押決定）",
    "R315Ｆ99": "嘱託書",
    "R315Ｇ01": "仮登録申請書 （代物弁済予約）",
    "R315Ｇ99": "仮登録申請書",
    "R315Ｈ99": "嘱託書 （予告登録）",
    "R315Ｉ99": "通知書 （工場抵当）",
    "R315Ｊ01": "嘱託書 （会社更正計画許可）",
    "R315Ｊ99": "嘱託書 （会社更正）",
    "R315Ｋ99": "嘱託書 （破産）",
    "R315Ｌ99": "嘱託書 （和議）",
    "R315Ｚ02": "信託登録申請書",
    "R315Ｚ03": "信託抹消登録申請書",
    "R316303": "質権設定登録申請書 （設定契約）",
    "R316304": "根質権設定登録申請書 （設定契約）",
    "R316311": "質権移転登録申請書 （相続・合併）",
    "R316312": "質権移転登録申請書 （合併）",
    "R316313": "質権移転登録申請書 （譲渡）",
    "R316314": "質権移転登録申請書 （一部譲渡）",
    "R316315": "質権移転登録申請書 （持分相続・合併）",
    "R316316": "質権移転登録申請書 （持分合併）",
    "R316317": "質権移転登録申請書 （持分譲渡・放棄）",
    "R316318": "質権移転登録申請書 （持分の一部譲渡）",
    "R316319": "質権移転登録申請書 （持分放棄）",
    "R316321": "質権変更登録申請書 （変更契約）",
    "R316325": "質権移転登録申請書 （一部分割）",
    "R316326": "質権移転登録申請書 （持分の一部分割）",
    "R316327": "根質権移転登録申請書 （一部分割）",
    "R316328": "根質権移転登録申請書（持分の一部分割）",
    "R316330": "質権設定信託登録申請書 （信託契約）",
    "R316331": "質権移転信託登録申請書 （信託契約）",
    "R316332": "質権移転信託抹消登録申請書 （信託抹消）",
    "R316333": "根質権設定信託登録申請書 （信託契約）",
    "R316334": "根質権移転信託登録申請書 （信託契約）",
    "R316335": "根質権移転信託抹消登録申請書（信託抹消）",
    "R316336": "質権設定信託登録申請書（信託契約）",
    "R316337": "質権移転信託登録申請書（信託契約）",
    "R316338": "質権移転信託登録申請書（持分信託契約）",
    "R316339": "質権変更信託登録申請書（信託契約）",
    "R316340": "質権変更信託登録申請書（共有信託契約）",
    "R316341": "根質権移転登録申請書 （相続・合併）",
    "R316343": "根質権移転登録申請書 （譲渡）",
    "R316344": "根質権移転登録申請書 （一部譲渡）",
    "R316345": "根質権移転登録申請書 （持分相続・合併）",
    "R316347": "根質権移転登録申請書 （持分譲渡・放棄）",
    "R316348": "根質権移転登録申請書 （持分の一部譲渡）",
    "R316350": "根質権変更登録申請書 （変更契約）",
    "R316351": "質権変更信託登録申請書（持分信託契約）",
    "R316352": "質権変更信託登録申請書（信託変更契約）",
    "R316353": "質権抹消信託登録申請書（契約解除）",
    "R316354": "根質権設定信託登録申請書（信託契約）",
    "R316355": "根質権移転信託登録申請書（信託契約）",
    "R316356": "根質権移転信託登録申請書（持分信託契約）",
    "R316357": "根質権変更信託登録申請書（信託契約）",
    "R316358": "根質権変更信託登録申請書（共有信託契約）",
    "R316359": "根質権変更信託登録申請書（持分信託契約）",
    "R316360": "根質権変更信託登録申請書（信託変更契約）",
    "R316361": "根質権抹消信託登録申請書（契約解除）",
    "R316399": "質権登録申請書",
    "R316501": "表示変更登録申請書 （移転）",
    "R316502": "表示変更登録申請書 （組織変更）",
    "R316503": "表示変更登録申請書 （改姓）",
    "R316504": "表示変更登録申請書 （改称）",
    "R316505": "表示変更登録申請書 （国籍変更）",
    "R316506": "表示変更登録申請書 （行政区画の変更）",
    "R316507": "表示変更登録申請書 （住居表示の実施）",
    "R316508": "表示変更登録申請書 （地番変更）",
    "R316509": "表示変更登録申請書 （土地名称変更）",
    "R316510": "表示変更登録申請書 （転入）",
    "R316511": "表示変更登録申請書 （転居）",
    "R316512": "表示変更登録申請書 （市制施行）",
    "R316513": "表示変更登録申請書 （区制施行）",
    "R316514": "表示変更登録申請書 （町名地番変更）",
    "R316531": "表示変更登録申請書 （住所）",
    "R316532": "表示変更登録申請書 （住所）",
    "R316533": "表示変更登録申請書 （氏名）",
    "R316534": "表示変更登録申請書 （国籍）",
    "R316599": "表示変更登録申請書",
    "R316611": "表示更正登録申請書 （住所）",
    "R316612": "表示更正登録申請書 （氏名）",
    "R316613": "表示更正登録申請書 （国籍）",
    "R316614": "表示更正登録申請書 （商号）",
    "R316631": "表示更正登録申請書 （住所）",
    "R316632": "表示更正登録申請書 （住所）",
    "R316633": "表示更正登録申請書 （氏名）",
    "R316634": "表示更正登録申請書 （国籍）",
    "R316699": "表示更正登録申請書",
    "R316803": "質権抹消登録申請書 （解除・弁済）",
    "R316804": "質権抹消登録申請書 （債務弁済）",
    "R316805": "質権抹消登録申請書 （放棄）",
    "R316899": "抹消登録申請書",
    "R316Ｄ99": "回復登録申請書",
    "R316Ｆ01": "嘱託書 （差押命令）",
    "R316Ｆ02": "嘱託書 （仮差押決定）",
    "R316Ｆ99": "嘱託書",
    "R316Ｇ01": "仮登録申請書 （代物弁済予約）",
    "R316Ｇ99": "仮登録申請書",
    "R316Ｈ99": "嘱託書 （予告登録）",
    "R316Ｉ99": "通知書 （工場抵当）",
    "R316Ｊ01": "嘱託書 （会社更正計画許可）",
    "R316Ｊ99": "嘱託書 （会社更正）",
    "R316Ｋ99": "嘱託書 （破産）",
    "R316Ｌ99": "嘱託書 （和議）",
    "R316Ｚ02": "信託登録申請書",
    "R316Ｚ03": "信託抹消登録申請書",
    "R317401": "管理人選任登録申請書 （受任）",
    "R317402": "管理人選任登録申請書 （委任）",
    "R317411": "管理人変更登録申請書 （改任）",
    "R317421": "管理人抹消登録申請書 （辞任）",
    "R317422": "管理人抹消登録申請書 （解任）",
    "R317499": "管理人登録申請書",
    "R317501": "表示変更登録申請書 （移転）",
    "R317502": "表示変更登録申請書 （組織変更）",
    "R317503": "表示変更登録申請書 （改姓）",
    "R317504": "表示変更登録申請書 （改称）",
    "R317505": "表示変更登録申請書 （国籍変更）",
    "R317506": "表示変更登録申請書 （行政区画の変更）",
    "R317507": "表示変更登録申請書 （住居表示の実施）",
    "R317508": "表示変更登録申請書 （地番変更）",
    "R317509": "表示変更登録申請書 （土地名称変更）",
    "R317510": "表示変更登録申請書 （転入）",
    "R317511": "表示変更登録申請書 （転居）",
    "R317512": "表示変更登録申請書 （市制施行）",
    "R317513": "表示変更登録申請書 （区制施行）",
    "R317514": "表示変更登録申請書 （町名地番変更）",
    "R317531": "表示変更登録申請書 （住所）",
    "R317532": "表示変更登録申請書 （住所）",
    "R317533": "表示変更登録申請書 （氏名）",
    "R317534": "表示変更登録申請書 （国籍）",
    "R317599": "表示変更登録申請書",
    "R317611": "表示更正登録申請書 （住所）",
    "R317612": "表示更正登録申請書 （氏名）",
    "R317613": "表示更正登録申請書 （国籍）",
    "R317614": "表示更正登録申請書 （商号）",
    "R317631": "表示更正登録申請書 （住所）",
    "R317632": "表示更正登録申請書 （住所）",
    "R317633": "表示更正登録申請書 （氏名）",
    "R317634": "表示更正登録申請書 （国籍）",
    "R317699": "表示更正登録申請書",
    "R31ＸＤ99": "回復登録申請書",
    "R321801": "回復登録申請書",
    "R321802": "回復登録申請書",
    "R321899": "抹消登録申請書",
    "R321Ｄ99": "回復登録申請書",
    "R321Ｇ99": "仮登録申請書",
    "R321Ｈ99": "仮登録申請書",
    "R321Ｌ99": "仮登録申請書",
    "R322899": "抹消登録申請書",
    "R323111": "本権移転登録申請書",
    "R323112": "本権移転登録申請書",
    "R323113": "本権移転登録申請書",
    "R323114": "本権移転登録申請書",
    "R323115": "本権移転登録申請書",
    "R323116": "本権移転登録申請書",
    "R323117": "本権移転登録申請書",
    "R323118": "本権移転登録申請書",
    "R323119": "本権移転登録申請書",
    "R323121": "本権移転登録申請書",
    "R323122": "本権移転登録申請書",
    "R323131": "本権移転登録申請書",
    "R323132": "本権移転登録申請書",
    "R323133": "本権移転登録申請書",
    "R323134": "本権移転登録申請書",
    "R323135": "本権移転登録申請書",
    "R323136": "本権移転登録申請書",
    "R323137": "本権移転登録申請書",
    "R323138": "本権移転登録申請書",
    "R323141": "本権共有の特約等の事項の変更登録申請書",
    "R323199": "本権移転登録申請書",
    "R323501": "本権移転登録申請書",
    "R323502": "本権移転登録申請書",
    "R323503": "本権移転登録申請書",
    "R323504": "本権移転登録申請書",
    "R323505": "本権移転登録申請書",
    "R323506": "本権移転登録申請書",
    "R323507": "本権移転登録申請書",
    "R323508": "本権移転登録申請書",
    "R323509": "本権移転登録申請書",
    "R323510": "本権移転登録申請書",
    "R323511": "本権移転登録申請書",
    "R323512": "本権移転登録申請書",
    "R323513": "本権移転登録申請書",
    "R323514": "本権移転登録申請書",
    "R323531": "本権移転登録申請書",
    "R323532": "本権移転登録申請書",
    "R323533": "本権移転登録申請書",
    "R323534": "本権移転登録申請書",
    "R323599": "表示変更登録申請書",
    "R323611": "表示変更登録申請書",
    "R323612": "表示変更登録申請書",
    "R323613": "表示変更登録申請書",
    "R323614": "表示変更登録申請書",
    "R323631": "表示変更登録申請書",
    "R323632": "表示変更登録申請書",
    "R323633": "表示変更登録申請書",
    "R323634": "表示変更登録申請書",
    "R323699": "表示更正登録申請書",
    "R323803": "表示更正登録申請書",
    "R323805": "表示更正登録申請書",
    "R323899": "抹消登録申請書",
    "R323Ｄ99": "回復登録申請書",
    "R323Ｆ01": "回復登録申請書",
    "R323Ｆ02": "回復登録申請書",
    "R323Ｆ99": "嘱託書",
    "R323Ｇ01": "嘱託書",
    "R323Ｇ99": "仮登録申請書",
    "R323Ｈ99": "仮登録申請書",
    "R323Ｉ99": "仮登録申請書",
    "R323Ｊ01": "仮登録申請書",
    "R323Ｊ99": "仮登録申請書",
    "R323Ｋ99": "仮登録申請書",
    "R323Ｌ99": "仮登録申請書",
    "R323Ｚ02": "信託登録申請書",
    "R323Ｚ03": "信託抹消登録申請書",
    "R324201": "信託抹消登録申請書",
    "R324202": "信託抹消登録申請書",
    "R324211": "信託抹消登録申請書",
    "R324212": "信託抹消登録申請書",
    "R324213": "信託抹消登録申請書",
    "R324214": "信託抹消登録申請書",
    "R324215": "信託抹消登録申請書",
    "R324216": "信託抹消登録申請書",
    "R324217": "信託抹消登録申請書",
    "R324218": "信託抹消登録申請書",
    "R324219": "信託抹消登録申請書",
    "R324221": "信託抹消登録申請書",
    "R324222": "信託抹消登録申請書",
    "R324223": "信託抹消登録申請書",
    "R324225": "信託抹消登録申請書",
    "R324226": "信託抹消登録申請書",
    "R324230": "信託抹消登録申請書",
    "R324231": "信託抹消登録申請書",
    "R324232": "信託抹消登録申請書",
    "R324233": "信託抹消登録申請書",
    "R324234": "信託抹消登録申請書",
    "R324235": "信託抹消登録申請書",
    "R324236": "信託抹消登録申請書",
    "R324237": "信託抹消登録申請書",
    "R324238": "信託抹消登録申請書",
    "R324239": "信託抹消登録申請書",
    "R324240": "信託抹消登録申請書",
    "R324299": "専用実施権登録申請書",
    "R324303": "専用実施権登録申請書",
    "R324304": "専用実施権登録申請書",
    "R324311": "専用実施権登録申請書",
    "R324312": "専用実施権登録申請書",
    "R324313": "専用実施権登録申請書",
    "R324314": "専用実施権登録申請書",
    "R324315": "専用実施権登録申請書",
    "R324316": "専用実施権登録申請書",
    "R324317": "専用実施権登録申請書",
    "R324318": "専用実施権登録申請書",
    "R324319": "専用実施権登録申請書",
    "R324321": "専用実施権登録申請書",
    "R324325": "専用実施権登録申請書",
    "R324326": "専用実施権登録申請書",
    "R324327": "専用実施権登録申請書",
    "R324328": "専用実施権登録申請書",
    "R324330": "専用実施権登録申請書",
    "R324331": "専用実施権登録申請書",
    "R324332": "専用実施権登録申請書",
    "R324333": "専用実施権登録申請書",
    "R324334": "専用実施権登録申請書",
    "R324335": "専用実施権登録申請書",
    "R324336": "専用実施権登録申請書",
    "R324337": "専用実施権登録申請書",
    "R324338": "専用実施権登録申請書",
    "R324339": "専用実施権登録申請書",
    "R324340": "専用実施権登録申請書",
    "R324341": "専用実施権登録申請書",
    "R324343": "専用実施権登録申請書",
    "R324344": "専用実施権登録申請書",
    "R324345": "専用実施権登録申請書",
    "R324347": "専用実施権登録申請書",
    "R324348": "専用実施権登録申請書",
    "R324350": "専用実施権登録申請書",
    "R324351": "専用実施権登録申請書",
    "R324352": "専用実施権登録申請書",
    "R324353": "専用実施権登録申請書",
    "R324354": "専用実施権登録申請書",
    "R324355": "専用実施権登録申請書",
    "R324356": "専用実施権登録申請書",
    "R324357": "専用実施権登録申請書",
    "R324358": "専用実施権登録申請書",
    "R324359": "専用実施権登録申請書",
    "R324360": "専用実施権登録申請書",
    "R324361": "専用実施権登録申請書",
    "R324399": "質権登録申請書",
    "R324501": "質権登録申請書",
    "R324502": "質権登録申請書",
    "R324503": "質権登録申請書",
    "R324504": "質権登録申請書",
    "R324505": "質権登録申請書",
    "R324506": "質権登録申請書",
    "R324507": "質権登録申請書",
    "R324508": "質権登録申請書",
    "R324509": "質権登録申請書",
    "R324510": "質権登録申請書",
    "R324511": "質権登録申請書",
    "R324512": "質権登録申請書",
    "R324513": "質権登録申請書",
    "R324514": "質権登録申請書",
    "R324531": "質権登録申請書",
    "R324532": "質権登録申請書",
    "R324533": "質権登録申請書",
    "R324534": "表示変更登録申請書 （国籍）",
    "R324599": "表示変更登録申請書",
    "R324611": "表示変更登録申請書",
    "R324612": "表示変更登録申請書",
    "R324613": "表示変更登録申請書",
    "R324614": "表示変更登録申請書",
    "R324631": "表示変更登録申請書",
    "R324632": "表示変更登録申請書",
    "R324633": "表示変更登録申請書",
    "R324634": "表示変更登録申請書",
    "R324699": "表示更正登録申請書",
    "R324803": "表示更正登録申請書",
    "R324804": "表示更正登録申請書",
    "R324805": "表示更正登録申請書",
    "R324899": "抹消登録申請書",
    "R324Ｄ99": "回復登録申請書",
    "R324Ｆ01": "回復登録申請書",
    "R324Ｆ02": "回復登録申請書",
    "R324Ｆ99": "嘱託書",
    "R324Ｇ01": "嘱託書",
    "R324Ｇ99": "仮登録申請書",
    "R324Ｈ99": "仮登録申請書",
    "R324Ｉ99": "仮登録申請書",
    "R324Ｊ01": "仮登録申請書",
    "R324Ｊ99": "仮登録申請書",
    "R324Ｋ99": "仮登録申請書",
    "R324Ｌ99": "仮登録申請書",
    "R324Ｚ02": "信託登録申請書",
    "R324Ｚ03": "信託抹消登録申請書",
    "R325201": "信託抹消登録申請書",
    "R325202": "信託抹消登録申請書",
    "R325211": "信託抹消登録申請書",
    "R325212": "信託抹消登録申請書",
    "R325213": "信託抹消登録申請書",
    "R325214": "信託抹消登録申請書",
    "R325215": "信託抹消登録申請書",
    "R325216": "信託抹消登録申請書",
    "R325217": "信託抹消登録申請書",
    "R325218": "信託抹消登録申請書",
    "R325219": "信託抹消登録申請書",
    "R325221": "信託抹消登録申請書",
    "R325222": "信託抹消登録申請書",
    "R325223": "信託抹消登録申請書",
    "R325225": "信託抹消登録申請書",
    "R325226": "信託抹消登録申請書",
    "R325230": "信託抹消登録申請書",
    "R325231": "信託抹消登録申請書",
    "R325232": "信託抹消登録申請書",
    "R325233": "信託抹消登録申請書",
    "R325234": "信託抹消登録申請書",
    "R325235": "信託抹消登録申請書",
    "R325236": "信託抹消登録申請書",
    "R325237": "信託抹消登録申請書",
    "R325238": "信託抹消登録申請書",
    "R325239": "信託抹消登録申請書",
    "R325240": "信託抹消登録申請書",
    "R325299": "通常実施権登録申請書",
    "R325303": "通常実施権登録申請書",
    "R325304": "通常実施権登録申請書",
    "R325311": "通常実施権登録申請書",
    "R325312": "通常実施権登録申請書",
    "R325313": "通常実施権登録申請書",
    "R325314": "通常実施権登録申請書",
    "R325315": "通常実施権登録申請書",
    "R325316": "通常実施権登録申請書",
    "R325317": "通常実施権登録申請書",
    "R325318": "通常実施権登録申請書",
    "R325319": "通常実施権登録申請書",
    "R325321": "通常実施権登録申請書",
    "R325325": "通常実施権登録申請書",
    "R325326": "通常実施権登録申請書",
    "R325327": "通常実施権登録申請書",
    "R325328": "通常実施権登録申請書",
    "R325330": "通常実施権登録申請書",
    "R325331": "通常実施権登録申請書",
    "R325332": "通常実施権登録申請書",
    "R325333": "通常実施権登録申請書",
    "R325334": "通常実施権登録申請書",
    "R325335": "通常実施権登録申請書",
    "R325336": "通常実施権登録申請書",
    "R325337": "通常実施権登録申請書",
    "R325338": "通常実施権登録申請書",
    "R325339": "通常実施権登録申請書",
    "R325340": "通常実施権登録申請書",
    "R325341": "通常実施権登録申請書",
    "R325343": "通常実施権登録申請書",
    "R325344": "通常実施権登録申請書",
    "R325345": "通常実施権登録申請書",
    "R325347": "通常実施権登録申請書",
    "R325348": "通常実施権登録申請書",
    "R325350": "通常実施権登録申請書",
    "R325351": "通常実施権登録申請書",
    "R325352": "通常実施権登録申請書",
    "R325353": "通常実施権登録申請書",
    "R325354": "通常実施権登録申請書",
    "R325355": "通常実施権登録申請書",
    "R325356": "通常実施権登録申請書",
    "R325357": "通常実施権登録申請書",
    "R325358": "通常実施権登録申請書",
    "R325359": "通常実施権登録申請書",
    "R325360": "通常実施権登録申請書",
    "R325361": "通常実施権登録申請書",
    "R325399": "質権登録申請書",
    "R325501": "質権登録申請書",
    "R325502": "質権登録申請書",
    "R325503": "質権登録申請書",
    "R325504": "質権登録申請書",
    "R325505": "質権登録申請書",
    "R325506": "質権登録申請書",
    "R325507": "質権登録申請書",
    "R325508": "質権登録申請書",
    "R325509": "質権登録申請書",
    "R325510": "質権登録申請書",
    "R325511": "質権登録申請書",
    "R325512": "質権登録申請書",
    "R325513": "質権登録申請書",
    "R325514": "質権登録申請書",
    "R325531": "質権登録申請書",
    "R325532": "質権登録申請書",
    "R325533": "質権登録申請書",
    "R325534": "質権登録申請書",
    "R325599": "表示変更登録申請書",
    "R325611": "表示変更登録申請書",
    "R325612": "表示変更登録申請書",
    "R325613": "表示変更登録申請書",
    "R325614": "表示変更登録申請書",
    "R325631": "表示変更登録申請書",
    "R325632": "表示変更登録申請書",
    "R325633": "表示変更登録申請書",
    "R325634": "表示変更登録申請書",
    "R325699": "表示更正登録申請書",
    "R325803": "表示更正登録申請書",
    "R325804": "表示更正登録申請書",
    "R325805": "表示更正登録申請書",
    "R325899": "抹消登録申請書",
    "R325Ｄ99": "回復登録申請書",
    "R325Ｆ01": "回復登録申請書",
    "R325Ｆ02": "回復登録申請書",
    "R325Ｆ99": "嘱託書",
    "R325Ｇ01": "嘱託書",
    "R325Ｇ99": "仮登録申請書",
    "R325Ｈ99": "仮登録申請書",
    "R325Ｉ99": "仮登録申請書",
    "R325Ｊ01": "仮登録申請書",
    "R325Ｊ99": "仮登録申請書",
    "R325Ｋ99": "仮登録申請書",
    "R325Ｌ99": "仮登録申請書",
    "R325Ｚ02": "信託登録申請書",
    "R325Ｚ03": "信託抹消登録申請書",
    "R326303": "信託抹消登録申請書",
    "R326304": "信託抹消登録申請書",
    "R326311": "信託抹消登録申請書",
    "R326312": "信託抹消登録申請書",
    "R326313": "信託抹消登録申請書",
    "R326314": "信託抹消登録申請書",
    "R326315": "信託抹消登録申請書",
    "R326316": "信託抹消登録申請書",
    "R326317": "信託抹消登録申請書",
    "R326318": "信託抹消登録申請書",
    "R326319": "信託抹消登録申請書",
    "R326321": "信託抹消登録申請書",
    "R326325": "信託抹消登録申請書",
    "R326326": "信託抹消登録申請書",
    "R326327": "信託抹消登録申請書",
    "R326328": "信託抹消登録申請書",
    "R326330": "信託抹消登録申請書",
    "R326331": "信託抹消登録申請書",
    "R326332": "信託抹消登録申請書",
    "R326333": "信託抹消登録申請書",
    "R326334": "信託抹消登録申請書",
    "R326335": "信託抹消登録申請書",
    "R326336": "信託抹消登録申請書",
    "R326337": "信託抹消登録申請書",
    "R326338": "信託抹消登録申請書",
    "R326339": "信託抹消登録申請書",
    "R326340": "信託抹消登録申請書",
    "R326341": "信託抹消登録申請書",
    "R326343": "信託抹消登録申請書",
    "R326344": "信託抹消登録申請書",
    "R326345": "信託抹消登録申請書",
    "R326347": "信託抹消登録申請書",
    "R326348": "信託抹消登録申請書",
    "R326350": "信託抹消登録申請書",
    "R326351": "信託抹消登録申請書",
    "R326352": "信託抹消登録申請書",
    "R326353": "信託抹消登録申請書",
    "R326354": "信託抹消登録申請書",
    "R326355": "信託抹消登録申請書",
    "R326356": "信託抹消登録申請書",
    "R326357": "信託抹消登録申請書",
    "R326358": "信託抹消登録申請書",
    "R326359": "信託抹消登録申請書",
    "R326360": "信託抹消登録申請書",
    "R326361": "信託抹消登録申請書",
    "R326399": "質権登録申請書",
    "R326501": "質権登録申請書",
    "R326502": "質権登録申請書",
    "R326503": "質権登録申請書",
    "R326504": "質権登録申請書",
    "R326505": "質権登録申請書",
    "R326506": "質権登録申請書",
    "R326507": "質権登録申請書",
    "R326508": "質権登録申請書",
    "R326509": "質権登録申請書",
    "R326510": "質権登録申請書",
    "R326511": "質権登録申請書",
    "R326512": "質権登録申請書",
    "R326513": "質権登録申請書",
    "R326514": "質権登録申請書",
    "R326531": "質権登録申請書",
    "R326532": "質権登録申請書",
    "R326533": "質権登録申請書",
    "R326534": "質権登録申請書",
    "R326599": "表示変更登録申請書",
    "R326611": "表示変更登録申請書",
    "R326612": "表示変更登録申請書",
    "R326613": "表示変更登録申請書",
    "R326614": "表示変更登録申請書",
    "R326631": "表示変更登録申請書",
    "R326632": "表示変更登録申請書",
    "R326633": "表示変更登録申請書",
    "R326634": "表示変更登録申請書",
    "R326699": "表示更正登録申請書",
    "R326803": "表示更正登録申請書",
    "R326804": "表示更正登録申請書",
    "R326805": "表示更正登録申請書",
    "R326899": "抹消登録申請書",
    "R326Ｄ99": "回復登録申請書",
    "R326Ｆ01": "回復登録申請書",
    "R326Ｆ02": "回復登録申請書",
    "R326Ｆ99": "嘱託書",
    "R326Ｇ01": "嘱託書",
    "R326Ｇ99": "仮登録申請書",
    "R326Ｈ99": "仮登録申請書",
    "R326Ｉ99": "仮登録申請書",
    "R326Ｊ01": "仮登録申請書",
    "R326Ｊ99": "仮登録申請書",
    "R326Ｋ99": "仮登録申請書",
    "R326Ｌ99": "仮登録申請書",
    "R326Ｚ02": "信託登録申請書",
    "R326Ｚ03": "信託抹消登録申請書",
    "R327401": "信託抹消登録申請書",
    "R327402": "信託抹消登録申請書",
    "R327411": "信託抹消登録申請書",
    "R327421": "信託抹消登録申請書",
    "R327422": "信託抹消登録申請書",
    "R327499": "管理人登録申請書",
    "R327501": "管理人登録申請書",
    "R327502": "管理人登録申請書",
    "R327503": "管理人登録申請書",
    "R327504": "管理人登録申請書",
    "R327505": "管理人登録申請書",
    "R327506": "管理人登録申請書",
    "R327507": "管理人登録申請書",
    "R327508": "管理人登録申請書",
    "R327509": "管理人登録申請書",
    "R327510": "管理人登録申請書",
    "R327511": "管理人登録申請書",
    "R327512": "管理人登録申請書",
    "R327513": "管理人登録申請書",
    "R327514": "管理人登録申請書",
    "R327531": "管理人登録申請書",
    "R327532": "管理人登録申請書",
    "R327533": "管理人登録申請書",
    "R327534": "管理人登録申請書",
    "R327599": "表示変更登録申請書",
    "R327611": "表示変更登録申請書",
    "R327612": "表示変更登録申請書",
    "R327613": "表示変更登録申請書",
    "R327614": "表示変更登録申請書",
    "R327631": "表示変更登録申請書",
    "R327632": "表示変更登録申請書",
    "R327633": "表示変更登録申請書",
    "R327634": "表示変更登録申請書",
    "R327699": "表示更正登録申請書",
    "R32ＸＤ99": "回復登録申請書",
    "R331801": "回復登録申請書",
    "R331899": "抹消登録申請書",
    "R331Ｄ99": "回復登録申請書",
    "R331Ｇ99": "仮登録申請書",
    "R331Ｈ99": "仮登録申請書",
    "R331Ｌ99": "仮登録申請書",
    "R332802": "本権一部抹消登録申請書 （一部放棄）",
    "R332899": "抹消登録申請書",
    "R332Ｄ99": "回復登録申請書",
    "R332Ｆ99": "嘱託書",
    "R332Ｇ99": "仮登録申請書",
    "R332Ｈ99": "嘱託書 （予告登録）",
    "R332Ｉ99": "通知書 （工場抵当）",
    "R332Ｊ99": "嘱託書 （会社更正）",
    "R332Ｋ99": "嘱託書 （破産）",
    "R332Ｌ99": "嘱託書 （和議）",
    "R333111": "本権移転登録申請書",
    "R333112": "本権移転登録申請書",
    "R333113": "本権移転登録申請書",
    "R333114": "本権移転登録申請書",
    "R333115": "本権移転登録申請書",
    "R333116": "本権移転登録申請書",
    "R333117": "本権移転登録申請書",
    "R333118": "本権移転登録申請書",
    "R333119": "本権移転登録申請書",
    "R333121": "本権移転登録申請書",
    "R333122": "本権移転登録申請書",
    "R333131": "本権移転登録申請書",
    "R333132": "本権移転登録申請書",
    "R333133": "本権移転登録申請書",
    "R333134": "本権移転登録申請書",
    "R333135": "本権移転登録申請書",
    "R333136": "本権移転登録申請書",
    "R333137": "本権移転登録申請書",
    "R333138": "本権移転登録申請書",
    "R333141": "本権共有の特約等の事項の変更登録申請書",
    "R333199": "本権移転登録申請書",
    "R333501": "本権移転登録申請書",
    "R333502": "本権移転登録申請書",
    "R333503": "本権移転登録申請書",
    "R333504": "本権移転登録申請書",
    "R333505": "本権移転登録申請書",
    "R333506": "本権移転登録申請書",
    "R333507": "本権移転登録申請書",
    "R333508": "本権移転登録申請書",
    "R333509": "本権移転登録申請書",
    "R333510": "本権移転登録申請書",
    "R333511": "本権移転登録申請書",
    "R333512": "本権移転登録申請書",
    "R333513": "本権移転登録申請書",
    "R333514": "本権移転登録申請書",
    "R333531": "本権移転登録申請書",
    "R333532": "本権移転登録申請書",
    "R333533": "本権移転登録申請書",
    "R333534": "本権移転登録申請書",
    "R333599": "表示変更登録申請書",
    "R333611": "表示変更登録申請書",
    "R333612": "表示変更登録申請書",
    "R333613": "表示変更登録申請書",
    "R333614": "表示変更登録申請書",
    "R333631": "表示変更登録申請書",
    "R333632": "表示変更登録申請書",
    "R333633": "表示変更登録申請書",
    "R333634": "表示変更登録申請書",
    "R333699": "表示更正登録申請書",
    "R333803": "表示更正登録申請書",
    "R333805": "表示更正登録申請書",
    "R333899": "抹消登録申請書",
    "R333Ｄ99": "回復登録申請書",
    "R333Ｆ01": "回復登録申請書",
    "R333Ｆ02": "回復登録申請書",
    "R333Ｆ99": "嘱託書",
    "R333Ｇ01": "嘱託書",
    "R333Ｇ99": "仮登録申請書",
    "R333Ｈ99": "仮登録申請書",
    "R333Ｉ99": "仮登録申請書",
    "R333Ｊ01": "仮登録申請書",
    "R333Ｊ99": "仮登録申請書",
    "R333Ｋ99": "仮登録申請書",
    "R333Ｌ99": "仮登録申請書",
    "R333Ｚ02": "信託登録申請書",
    "R333Ｚ03": "信託抹消登録申請書",
    "R334201": "信託抹消登録申請書",
    "R334202": "信託抹消登録申請書",
    "R334211": "信託抹消登録申請書",
    "R334212": "信託抹消登録申請書",
    "R334213": "信託抹消登録申請書",
    "R334214": "信託抹消登録申請書",
    "R334215": "信託抹消登録申請書",
    "R334216": "信託抹消登録申請書",
    "R334217": "信託抹消登録申請書",
    "R334218": "信託抹消登録申請書",
    "R334219": "信託抹消登録申請書",
    "R334221": "信託抹消登録申請書",
    "R334222": "信託抹消登録申請書",
    "R334223": "信託抹消登録申請書",
    "R334225": "信託抹消登録申請書",
    "R334226": "信託抹消登録申請書",
    "R334230": "信託抹消登録申請書",
    "R334231": "信託抹消登録申請書",
    "R334232": "信託抹消登録申請書",
    "R334233": "信託抹消登録申請書",
    "R334234": "信託抹消登録申請書",
    "R334235": "信託抹消登録申請書",
    "R334236": "信託抹消登録申請書",
    "R334237": "信託抹消登録申請書",
    "R334238": "信託抹消登録申請書",
    "R334239": "信託抹消登録申請書",
    "R334240": "信託抹消登録申請書",
    "R334299": "専用実施権登録申請書",
    "R334303": "専用実施権登録申請書",
    "R334304": "専用実施権登録申請書",
    "R334311": "専用実施権登録申請書",
    "R334312": "専用実施権登録申請書",
    "R334313": "専用実施権登録申請書",
    "R334314": "専用実施権登録申請書",
    "R334315": "専用実施権登録申請書",
    "R334316": "専用実施権登録申請書",
    "R334317": "専用実施権登録申請書",
    "R334318": "専用実施権登録申請書",
    "R334319": "専用実施権登録申請書",
    "R334321": "専用実施権登録申請書",
    "R334325": "専用実施権登録申請書",
    "R334326": "専用実施権登録申請書",
    "R334327": "専用実施権登録申請書",
    "R334328": "専用実施権登録申請書",
    "R334330": "専用実施権登録申請書",
    "R334331": "専用実施権登録申請書",
    "R334332": "専用実施権登録申請書",
    "R334333": "専用実施権登録申請書",
    "R334334": "専用実施権登録申請書",
    "R334335": "専用実施権登録申請書",
    "R334336": "専用実施権登録申請書",
    "R334337": "専用実施権登録申請書",
    "R334338": "専用実施権登録申請書",
    "R334339": "専用実施権登録申請書",
    "R334340": "専用実施権登録申請書",
    "R334341": "専用実施権登録申請書",
    "R334343": "専用実施権登録申請書",
    "R334344": "専用実施権登録申請書",
    "R334345": "専用実施権登録申請書",
    "R334347": "専用実施権登録申請書",
    "R334348": "専用実施権登録申請書",
    "R334350": "専用実施権登録申請書",
    "R334351": "専用実施権登録申請書",
    "R334352": "専用実施権登録申請書",
    "R334353": "専用実施権登録申請書",
    "R334354": "専用実施権登録申請書",
    "R334355": "専用実施権登録申請書",
    "R334356": "専用実施権登録申請書",
    "R334357": "専用実施権登録申請書",
    "R334358": "専用実施権登録申請書",
    "R334359": "専用実施権登録申請書",
    "R334360": "専用実施権登録申請書",
    "R334361": "専用実施権登録申請書",
    "R334399": "質権登録申請書",
    "R334501": "質権登録申請書",
    "R334502": "質権登録申請書",
    "R334503": "質権登録申請書",
    "R334504": "質権登録申請書",
    "R334505": "質権登録申請書",
    "R334506": "質権登録申請書",
    "R334507": "質権登録申請書",
    "R334508": "質権登録申請書",
    "R334509": "質権登録申請書",
    "R334510": "質権登録申請書",
    "R334511": "質権登録申請書",
    "R334512": "質権登録申請書",
    "R334513": "質権登録申請書",
    "R334514": "質権登録申請書",
    "R334531": "質権登録申請書",
    "R334532": "質権登録申請書",
    "R334533": "質権登録申請書",
    "R334534": "質権登録申請書",
    "R334599": "表示変更登録申請書",
    "R334611": "表示変更登録申請書",
    "R334612": "表示変更登録申請書",
    "R334613": "表示変更登録申請書",
    "R334614": "表示変更登録申請書",
    "R334631": "表示変更登録申請書",
    "R334632": "表示変更登録申請書",
    "R334633": "表示変更登録申請書",
    "R334634": "表示変更登録申請書",
    "R334699": "表示更正登録申請書",
    "R334803": "表示更正登録申請書",
    "R334804": "表示更正登録申請書",
    "R334805": "表示更正登録申請書",
    "R334899": "抹消登録申請書",
    "R334Ｄ99": "回復登録申請書",
    "R334Ｆ01": "回復登録申請書",
    "R334Ｆ02": "回復登録申請書",
    "R334Ｆ99": "嘱託書",
    "R334Ｇ01": "嘱託書",
    "R334Ｇ99": "仮登録申請書",
    "R334Ｈ99": "仮登録申請書",
    "R334Ｉ99": "仮登録申請書",
    "R334Ｊ01": "仮登録申請書",
    "R334Ｊ99": "仮登録申請書",
    "R334Ｋ99": "仮登録申請書",
    "R334Ｌ99": "仮登録申請書",
    "R334Ｚ02": "信託登録申請書",
    "R334Ｚ03": "信託抹消登録申請書",
    "R335201": "信託抹消登録申請書",
    "R335202": "信託抹消登録申請書",
    "R335211": "信託抹消登録申請書",
    "R335212": "信託抹消登録申請書",
    "R335213": "信託抹消登録申請書",
    "R335214": "信託抹消登録申請書",
    "R335215": "信託抹消登録申請書",
    "R335216": "信託抹消登録申請書",
    "R335217": "信託抹消登録申請書",
    "R335218": "信託抹消登録申請書",
    "R335219": "信託抹消登録申請書",
    "R335221": "信託抹消登録申請書",
    "R335222": "信託抹消登録申請書",
    "R335223": "信託抹消登録申請書",
    "R335225": "信託抹消登録申請書",
    "R335226": "信託抹消登録申請書",
    "R335230": "信託抹消登録申請書",
    "R335231": "信託抹消登録申請書",
    "R335232": "信託抹消登録申請書",
    "R335233": "信託抹消登録申請書",
    "R335234": "信託抹消登録申請書",
    "R335235": "信託抹消登録申請書",
    "R335236": "信託抹消登録申請書",
    "R335237": "信託抹消登録申請書",
    "R335238": "信託抹消登録申請書",
    "R335239": "信託抹消登録申請書",
    "R335240": "信託抹消登録申請書",
    "R335299": "通常実施権登録申請書",
    "R335303": "通常実施権登録申請書",
    "R335304": "通常実施権登録申請書",
    "R335311": "通常実施権登録申請書",
    "R335312": "通常実施権登録申請書",
    "R335313": "通常実施権登録申請書",
    "R335314": "通常実施権登録申請書",
    "R335315": "通常実施権登録申請書",
    "R335316": "通常実施権登録申請書",
    "R335317": "通常実施権登録申請書",
    "R335318": "通常実施権登録申請書",
    "R335319": "通常実施権登録申請書",
    "R335321": "通常実施権登録申請書",
    "R335325": "通常実施権登録申請書",
    "R335326": "通常実施権登録申請書",
    "R335327": "通常実施権登録申請書",
    "R335328": "通常実施権登録申請書",
    "R335330": "通常実施権登録申請書",
    "R335331": "通常実施権登録申請書",
    "R335332": "通常実施権登録申請書",
    "R335333": "通常実施権登録申請書",
    "R335334": "通常実施権登録申請書",
    "R335335": "通常実施権登録申請書",
    "R335336": "通常実施権登録申請書",
    "R335337": "通常実施権登録申請書",
    "R335338": "通常実施権登録申請書",
    "R335339": "通常実施権登録申請書",
    "R335340": "通常実施権登録申請書",
    "R335341": "通常実施権登録申請書",
    "R335343": "通常実施権登録申請書",
    "R335344": "通常実施権登録申請書",
    "R335345": "通常実施権登録申請書",
    "R335347": "通常実施権登録申請書",
    "R335348": "通常実施権登録申請書",
    "R335350": "通常実施権登録申請書",
    "R335351": "通常実施権登録申請書",
    "R335352": "通常実施権登録申請書",
    "R335353": "通常実施権登録申請書",
    "R335354": "通常実施権登録申請書",
    "R335355": "通常実施権登録申請書",
    "R335356": "通常実施権登録申請書",
    "R335357": "通常実施権登録申請書",
    "R335358": "通常実施権登録申請書",
    "R335359": "通常実施権登録申請書",
    "R335360": "通常実施権登録申請書",
    "R335361": "通常実施権登録申請書",
    "R335399": "質権登録申請書",
    "R335501": "質権登録申請書",
    "R335502": "質権登録申請書",
    "R335503": "質権登録申請書",
    "R335504": "質権登録申請書",
    "R335505": "質権登録申請書",
    "R335506": "質権登録申請書",
    "R335507": "質権登録申請書",
    "R335508": "質権登録申請書",
    "R335509": "質権登録申請書",
    "R335510": "質権登録申請書",
    "R335511": "質権登録申請書",
    "R335512": "質権登録申請書",
    "R335513": "質権登録申請書",
    "R335514": "質権登録申請書",
    "R335531": "質権登録申請書",
    "R335532": "質権登録申請書",
    "R335533": "質権登録申請書",
    "R335534": "質権登録申請書",
    "R335599": "表示変更登録申請書",
    "R335611": "表示変更登録申請書",
    "R335612": "表示変更登録申請書",
    "R335613": "表示変更登録申請書",
    "R335614": "表示変更登録申請書",
    "R335631": "表示変更登録申請書",
    "R335632": "表示変更登録申請書",
    "R335633": "表示変更登録申請書",
    "R335634": "表示変更登録申請書",
    "R335699": "表示更正登録申請書",
    "R335803": "表示更正登録申請書",
    "R335804": "表示更正登録申請書",
    "R335805": "表示更正登録申請書",
    "R335899": "抹消登録申請書",
    "R335Ｄ99": "回復登録申請書",
    "R335Ｆ01": "回復登録申請書",
    "R335Ｆ02": "回復登録申請書",
    "R335Ｆ99": "嘱託書",
    "R335Ｇ01": "嘱託書",
    "R335Ｇ99": "仮登録申請書",
    "R335Ｈ99": "仮登録申請書",
    "R335Ｉ99": "仮登録申請書",
    "R335Ｊ01": "仮登録申請書",
    "R335Ｊ99": "仮登録申請書",
    "R335Ｋ99": "仮登録申請書",
    "R335Ｌ99": "仮登録申請書",
    "R335Ｚ02": "信託登録申請書",
    "R335Ｚ03": "信託抹消登録申請書",
    "R336303": "信託抹消登録申請書",
    "R336304": "信託抹消登録申請書",
    "R336311": "信託抹消登録申請書",
    "R336312": "信託抹消登録申請書",
    "R336313": "信託抹消登録申請書",
    "R336314": "信託抹消登録申請書",
    "R336315": "信託抹消登録申請書",
    "R336316": "信託抹消登録申請書",
    "R336317": "信託抹消登録申請書",
    "R336318": "信託抹消登録申請書",
    "R336319": "信託抹消登録申請書",
    "R336321": "信託抹消登録申請書",
    "R336325": "信託抹消登録申請書",
    "R336326": "信託抹消登録申請書",
    "R336327": "信託抹消登録申請書",
    "R336328": "信託抹消登録申請書",
    "R336330": "信託抹消登録申請書",
    "R336331": "信託抹消登録申請書",
    "R336332": "信託抹消登録申請書",
    "R336333": "信託抹消登録申請書",
    "R336334": "信託抹消登録申請書",
    "R336335": "信託抹消登録申請書",
    "R336336": "信託抹消登録申請書",
    "R336337": "信託抹消登録申請書",
    "R336338": "信託抹消登録申請書",
    "R336339": "信託抹消登録申請書",
    "R336340": "信託抹消登録申請書",
    "R336341": "信託抹消登録申請書",
    "R336343": "信託抹消登録申請書",
    "R336344": "信託抹消登録申請書",
    "R336345": "信託抹消登録申請書",
    "R336347": "信託抹消登録申請書",
    "R336348": "信託抹消登録申請書",
    "R336350": "信託抹消登録申請書",
    "R336351": "信託抹消登録申請書",
    "R336352": "信託抹消登録申請書",
    "R336353": "信託抹消登録申請書",
    "R336354": "信託抹消登録申請書",
    "R336355": "信託抹消登録申請書",
    "R336356": "信託抹消登録申請書",
    "R336357": "信託抹消登録申請書",
    "R336358": "信託抹消登録申請書",
    "R336359": "信託抹消登録申請書",
    "R336360": "信託抹消登録申請書",
    "R336361": "信託抹消登録申請書",
    "R336399": "質権登録申請書",
    "R336501": "質権登録申請書",
    "R336502": "質権登録申請書",
    "R336503": "質権登録申請書",
    "R336504": "質権登録申請書",
    "R336505": "質権登録申請書",
    "R336506": "質権登録申請書",
    "R336507": "質権登録申請書",
    "R336508": "質権登録申請書",
    "R336509": "質権登録申請書",
    "R336510": "質権登録申請書",
    "R336511": "質権登録申請書",
    "R336512": "質権登録申請書",
    "R336513": "質権登録申請書",
    "R336514": "質権登録申請書",
    "R336531": "質権登録申請書",
    "R336532": "質権登録申請書",
    "R336533": "質権登録申請書",
    "R336534": "質権登録申請書",
    "R336599": "表示変更登録申請書",
    "R336611": "表示変更登録申請書",
    "R336612": "表示変更登録申請書",
    "R336613": "表示変更登録申請書",
    "R336614": "表示変更登録申請書",
    "R336631": "表示変更登録申請書",
    "R336632": "表示変更登録申請書",
    "R336633": "表示変更登録申請書",
    "R336634": "表示変更登録申請書",
    "R336699": "表示更正登録申請書",
    "R336803": "表示更正登録申請書",
    "R336804": "表示更正登録申請書",
    "R336805": "表示更正登録申請書",
    "R336899": "抹消登録申請書",
    "R336Ｄ99": "回復登録申請書",
    "R336Ｆ01": "回復登録申請書",
    "R336Ｆ02": "回復登録申請書",
    "R336Ｆ99": "嘱託書",
    "R336Ｇ01": "嘱託書",
    "R336Ｇ99": "仮登録申請書",
    "R336Ｈ99": "仮登録申請書",
    "R336Ｉ99": "仮登録申請書",
    "R336Ｊ01": "仮登録申請書",
    "R336Ｊ99": "仮登録申請書",
    "R336Ｋ99": "仮登録申請書",
    "R336Ｌ99": "仮登録申請書",
    "R336Ｚ02": "信託登録申請書",
    "R336Ｚ03": "信託抹消登録申請書",
    "R337401": "信託抹消登録申請書",
    "R337402": "信託抹消登録申請書",
    "R337411": "信託抹消登録申請書",
    "R337421": "信託抹消登録申請書",
    "R337422": "信託抹消登録申請書",
    "R337499": "管理人登録申請書",
    "R337501": "管理人登録申請書",
    "R337502": "管理人登録申請書",
    "R337503": "管理人登録申請書",
    "R337504": "管理人登録申請書",
    "R337505": "管理人登録申請書",
    "R337506": "管理人登録申請書",
    "R337507": "管理人登録申請書",
    "R337508": "管理人登録申請書",
    "R337509": "管理人登録申請書",
    "R337510": "管理人登録申請書",
    "R337511": "管理人登録申請書",
    "R337512": "管理人登録申請書",
    "R337513": "管理人登録申請書",
    "R337514": "管理人登録申請書",
    "R337531": "管理人登録申請書",
    "R337532": "管理人登録申請書",
    "R337533": "管理人登録申請書",
    "R337534": "管理人登録申請書",
    "R337599": "表示変更登録申請書",
    "R337611": "表示変更登録申請書",
    "R337612": "表示変更登録申請書",
    "R337613": "表示変更登録申請書",
    "R337614": "表示変更登録申請書",
    "R337631": "表示変更登録申請書",
    "R337632": "表示変更登録申請書",
    "R337633": "表示変更登録申請書",
    "R337634": "表示変更登録申請書",
    "R337699": "表示更正登録申請書",
    "R33A172": "所有権の移転の通報",
    "R33A173": "所有権の一部移転の通報",
    "R33A174": "移転が効力を有しない旨の宣言の通報",
    "R33A175": "移転が効力を有しない旨の宣言の取下の通報",
    "R33A571": "名義人の氏名・名称・住所の表示変更の通報",
    "R33A785": "国際登録簿の更正の通報",
    "R33A787": "国際登録簿の更正の通報",
    "R33A789": "国際登録簿の更正の通報",
    "R33A911": "抹消の通報",
    "R33A912": "限定の通報",
    "R33A913": "抹消の通報",
    "R33A999": "その他通報",
    "R33AＯ14": "更新の記録の通報",
    "R33AＴ01": "国際登録の分割の通報",
    "R33AＴ21": "国際登録の併合の通報",
    "R33ＸＤ99": "回復登録申請書",
    "R341801": "回復登録申請書",
    "R341802": "回復登録申請書",
    "R341899": "抹消登録申請書",
    "R341Ｄ99": "回復登録申請書",
    "R341Ｇ99": "仮登録申請書",
    "R341Ｈ99": "仮登録申請書",
    "R341Ｌ88": "商標権変更登録申請書",
    "R341Ｌ99": "商標権変更登録申請書",
    "R341Ｔ01": "商標権分割移転登録申請書",
    "R341Ｔ02": "商標権分割登録申請書",
    "R341Ｔ99": "商標権分割登録申請書",
    "R342802": "防護標章権一部抹消登録申請書（一部放棄）",
    "R342805": "防護標章権抹消登録申請書 （放棄）",
    "R342899": "抹消登録申請書",
    "R342Ｄ99": "回復登録申請書",
    "R342Ｆ99": "嘱託書",
    "R342Ｇ99": "仮登録申請書",
    "R342Ｈ99": "仮登録申請書",
    "R342Ｉ99": "仮登録申請書",
    "R342Ｊ99": "仮登録申請書",
    "R342Ｋ99": "仮登録申請書",
    "R342Ｌ99": "仮登録申請書",
    "R343111": "本権移転登録申請書",
    "R343112": "本権移転登録申請書",
    "R343113": "本権移転登録申請書",
    "R343114": "本権移転登録申請書",
    "R343115": "本権移転登録申請書",
    "R343116": "本権移転登録申請書",
    "R343117": "本権移転登録申請書",
    "R343118": "本権移転登録申請書",
    "R343119": "本権移転登録申請書",
    "R343121": "本権移転登録申請書",
    "R343122": "本権移転登録申請書",
    "R343131": "本権移転登録申請書",
    "R343132": "本権移転登録申請書",
    "R343133": "本権移転登録申請書",
    "R343134": "本権移転登録申請書",
    "R343135": "本権移転登録申請書",
    "R343136": "本権移転登録申請書",
    "R343137": "本権移転登録申請書",
    "R343138": "本権移転登録申請書",
    "R343141": "本権共有の特約等の事項の変更登録申請書",
    "R343199": "本権移転登録申請書",
    "R343501": "本権移転登録申請書",
    "R343502": "本権移転登録申請書",
    "R343503": "本権移転登録申請書",
    "R343504": "本権移転登録申請書",
    "R343505": "本権移転登録申請書",
    "R343506": "本権移転登録申請書",
    "R343507": "本権移転登録申請書",
    "R343508": "本権移転登録申請書",
    "R343509": "本権移転登録申請書",
    "R343510": "本権移転登録申請書",
    "R343511": "本権移転登録申請書",
    "R343512": "本権移転登録申請書",
    "R343513": "本権移転登録申請書",
    "R343514": "本権移転登録申請書",
    "R343531": "本権移転登録申請書",
    "R343532": "本権移転登録申請書",
    "R343533": "本権移転登録申請書",
    "R343534": "本権移転登録申請書",
    "R343599": "表示変更登録申請書",
    "R343611": "表示変更登録申請書",
    "R343612": "表示変更登録申請書",
    "R343613": "表示変更登録申請書",
    "R343614": "表示変更登録申請書",
    "R343631": "表示変更登録申請書",
    "R343632": "表示更正登録申請書 （住所）",
    "R343633": "表示更正登録申請書 （住所）",
    "R343634": "表示更正登録申請書 （住所）",
    "R343699": "表示更正登録申請書",
    "R343803": "表示更正登録申請書",
    "R343805": "表示更正登録申請書",
    "R343899": "抹消登録申請書",
    "R343Ｄ99": "回復登録申請書",
    "R343Ｆ01": "回復登録申請書",
    "R343Ｆ02": "回復登録申請書",
    "R343Ｆ99": "嘱託書",
    "R343Ｇ01": "嘱託書",
    "R343Ｇ99": "仮登録申請書",
    "R343Ｈ99": "仮登録申請書",
    "R343Ｉ99": "仮登録申請書",
    "R343Ｊ01": "仮登録申請書",
    "R343Ｊ99": "仮登録申請書",
    "R343Ｋ99": "仮登録申請書",
    "R343Ｌ99": "仮登録申請書",
    "R343Ｚ02": "信託登録申請書",
    "R343Ｚ03": "信託抹消登録申請書",
    "R344201": "専用使用権設定登録申請書 （契約・許諾）",
    "R344202": "専用使用権設定登録申請書 （許諾）",
    "R344211": "専用使用権移転登録申請書 （相続・合併）",
    "R344212": "専用使用権移転登録申請書 （合併）",
    "R344213": "専用使用権移転登録申請書 （譲渡）",
    "R344214": "専用使用権移転登録申請書 （共有）",
    "R344215": "専用使用権移転登録申請書 （持分相続合併）",
    "R344216": "専用使用権移転登録申請書 （持分合併）",
    "R344217": "専用使用権移転登録申請書 （持分譲渡放棄）",
    "R344218": "専用使用権移転登録申請書 （持分共有）",
    "R344219": "専用使用権移転登録申請書 （持分放棄）",
    "R344221": "専用使用権変更登録申請書 （変更契約）",
    "R344222": "専用使用権変更登録申請書 （契約）",
    "R344223": "専用使用権変更登録申請書 （許諾）",
    "R344225": "専用使用権移転登録申請書 （共有分割）",
    "R344226": "専用使用権移転登録申請書（持分共有分割）",
    "R344230": "専用使用権設定信託登録申請書 （信託契約）",
    "R344231": "専用使用権移転信託登録申請書 （信託契約）",
    "R344232": "専用使用権信託抹消登録申請書 （信託抹消）",
    "R344233": "専用使用権設定信託登録申請書（信託契約）",
    "R344234": "専用使用権移転信託登録申請書（信託契約）",
    "R344235": "専用使用権移転信託登録申請書（持分信託）",
    "R344236": "専用使用権変更信託登録申請書（信託契約）",
    "R344237": "専用使用権変更信託登録申請書（共有信託）",
    "R344238": "専用使用権変更信託登録申請書（持分信託）",
    "R344239": "専用使用権変更信託登録申請書（信託変更）",
    "R344240": "専用使用権抹消信託登録申請書（契約解除）",
    "R344299": "専用使用権登録申請書",
    "R344303": "専用使用権登録申請書",
    "R344304": "専用使用権登録申請書",
    "R344311": "専用使用権登録申請書",
    "R344312": "専用使用権登録申請書",
    "R344313": "専用使用権登録申請書",
    "R344314": "専用使用権登録申請書",
    "R344315": "専用使用権登録申請書",
    "R344316": "専用使用権登録申請書",
    "R344317": "専用使用権登録申請書",
    "R344318": "専用使用権登録申請書",
    "R344319": "専用使用権登録申請書",
    "R344321": "専用使用権登録申請書",
    "R344325": "専用使用権登録申請書",
    "R344326": "専用使用権登録申請書",
    "R344327": "専用使用権登録申請書",
    "R344328": "専用使用権登録申請書",
    "R344330": "専用使用権登録申請書",
    "R344331": "専用使用権登録申請書",
    "R344332": "専用使用権登録申請書",
    "R344333": "専用使用権登録申請書",
    "R344334": "専用使用権登録申請書",
    "R344335": "専用使用権登録申請書",
    "R344336": "専用使用権登録申請書",
    "R344337": "専用使用権登録申請書",
    "R344338": "専用使用権登録申請書",
    "R344339": "専用使用権登録申請書",
    "R344340": "専用使用権登録申請書",
    "R344341": "専用使用権登録申請書",
    "R344343": "専用使用権登録申請書",
    "R344344": "専用使用権登録申請書",
    "R344345": "専用使用権登録申請書",
    "R344347": "専用使用権登録申請書",
    "R344348": "専用使用権登録申請書",
    "R344350": "専用使用権登録申請書",
    "R344351": "専用使用権登録申請書",
    "R344352": "専用使用権登録申請書",
    "R344353": "専用使用権登録申請書",
    "R344354": "専用使用権登録申請書",
    "R344355": "専用使用権登録申請書",
    "R344356": "専用使用権登録申請書",
    "R344357": "専用使用権登録申請書",
    "R344358": "専用使用権登録申請書",
    "R344359": "専用使用権登録申請書",
    "R344360": "専用使用権登録申請書",
    "R344361": "専用使用権登録申請書",
    "R344399": "質権登録申請書",
    "R344501": "質権登録申請書",
    "R344502": "質権登録申請書",
    "R344503": "質権登録申請書",
    "R344504": "質権登録申請書",
    "R344505": "質権登録申請書",
    "R344506": "質権登録申請書",
    "R344507": "質権登録申請書",
    "R344508": "質権登録申請書",
    "R344509": "質権登録申請書",
    "R344510": "質権登録申請書",
    "R344511": "質権登録申請書",
    "R344512": "質権登録申請書",
    "R344513": "質権登録申請書",
    "R344514": "質権登録申請書",
    "R344531": "表示変更登録申請書 （住所）",
    "R344532": "表示変更登録申請書 （住所）",
    "R344533": "表示変更登録申請書 （住所）",
    "R344534": "表示変更登録申請書 （住所）",
    "R344599": "表示変更登録申請書",
    "R344611": "表示変更登録申請書",
    "R344612": "表示変更登録申請書",
    "R344613": "表示変更登録申請書",
    "R344614": "表示変更登録申請書",
    "R344631": "表示変更登録申請書",
    "R344632": "表示変更登録申請書",
    "R344633": "表示変更登録申請書",
    "R344634": "表示変更登録申請書",
    "R344699": "表示更正登録申請書",
    "R344803": "専用使用権抹消登録申請書 （解除・弁済）",
    "R344804": "専用使用権抹消登録申請書 （債務弁済）",
    "R344805": "専用使用権抹消登録申請書 （放棄）",
    "R344899": "抹消登録申請書",
    "R344Ｄ99": "回復登録申請書",
    "R344Ｆ01": "回復登録申請書",
    "R344Ｆ02": "回復登録申請書",
    "R344Ｆ99": "嘱託書",
    "R344Ｇ01": "嘱託書",
    "R344Ｇ99": "仮登録申請書",
    "R344Ｈ99": "仮登録申請書",
    "R344Ｉ99": "仮登録申請書",
    "R344Ｊ01": "仮登録申請書",
    "R344Ｊ99": "仮登録申請書",
    "R344Ｋ99": "仮登録申請書",
    "R344Ｌ99": "仮登録申請書",
    "R344Ｚ02": "信託登録申請書",
    "R344Ｚ03": "信託抹消登録申請書",
    "R345201": "通常使用権設定登録申請書 （契約・許諾）",
    "R345202": "通常使用権設定登録申請書 （許諾）",
    "R345211": "通常使用権移転登録申請書 （相続・合併）",
    "R345212": "通常使用権移転登録申請書 （合併）",
    "R345213": "通常使用権移転登録申請書 （譲渡）",
    "R345214": "通常使用権移転登録申請書 （共有）",
    "R345215": "通常使用権移転登録申請書 （持分相続合併）",
    "R345216": "通常使用権移転登録申請書 （持分合併）",
    "R345217": "通常使用権移転登録申請書 （持分譲渡放棄）",
    "R345218": "通常使用権移転登録申請書 （持分共有）",
    "R345219": "通常使用権移転登録申請書 （持分放棄）",
    "R345221": "通常使用権変更登録申請書 （変更契約）",
    "R345222": "通常使用権変更登録申請書 （契約）",
    "R345223": "通常使用権変更登録申請書 （許諾）",
    "R345225": "通常使用権移転登録申請書 （共有分割）",
    "R345226": "通常使用権移転登録申請書（持分共有分割）",
    "R345230": "通常使用権設定信託登録申請書 （信託契約）",
    "R345231": "通常使用権移転信託登録申請書 （信託契約）",
    "R345232": "通常使用権信託抹消登録申請書 （信託抹消）",
    "R345233": "通常使用権設定信託登録申請書（信託契約）",
    "R345234": "通常使用権移転信託登録申請書（信託契約）",
    "R345235": "通常使用権移転信託登録申請書（持分信託）",
    "R345236": "通常使用権変更信託登録申請書（信託契約）",
    "R345237": "通常使用権変更信託登録申請書（共有信託）",
    "R345238": "通常使用権変更信託登録申請書（持分信託）",
    "R345239": "通常使用権変更信託登録申請書（信託変更）",
    "R345240": "通常使用権抹消信託登録申請書（契約解除）",
    "R345299": "通常使用権登録申請書",
    "R345303": "通常使用権登録申請書",
    "R345304": "通常使用権登録申請書",
    "R345311": "通常使用権登録申請書",
    "R345312": "通常使用権登録申請書",
    "R345313": "通常使用権登録申請書",
    "R345314": "通常使用権登録申請書",
    "R345315": "通常使用権登録申請書",
    "R345316": "通常使用権登録申請書",
    "R345317": "通常使用権登録申請書",
    "R345318": "通常使用権登録申請書",
    "R345319": "通常使用権登録申請書",
    "R345321": "通常使用権登録申請書",
    "R345325": "通常使用権登録申請書",
    "R345326": "通常使用権登録申請書",
    "R345327": "通常使用権登録申請書",
    "R345328": "通常使用権登録申請書",
    "R345330": "通常使用権登録申請書",
    "R345331": "通常使用権登録申請書",
    "R345332": "通常使用権登録申請書",
    "R345333": "通常使用権登録申請書",
    "R345334": "通常使用権登録申請書",
    "R345335": "通常使用権登録申請書",
    "R345336": "通常使用権登録申請書",
    "R345337": "通常使用権登録申請書",
    "R345338": "通常使用権登録申請書",
    "R345339": "通常使用権登録申請書",
    "R345340": "通常使用権登録申請書",
    "R345341": "通常使用権登録申請書",
    "R345343": "通常使用権登録申請書",
    "R345344": "通常使用権登録申請書",
    "R345345": "通常使用権登録申請書",
    "R345347": "通常使用権登録申請書",
    "R345348": "通常使用権登録申請書",
    "R345350": "通常使用権登録申請書",
    "R345351": "通常使用権登録申請書",
    "R345352": "通常使用権登録申請書",
    "R345353": "通常使用権登録申請書",
    "R345354": "通常使用権登録申請書",
    "R345355": "通常使用権登録申請書",
    "R345356": "通常使用権登録申請書",
    "R345357": "通常使用権登録申請書",
    "R345358": "通常使用権登録申請書",
    "R345359": "通常使用権登録申請書",
    "R345360": "通常使用権登録申請書",
    "R345361": "通常使用権登録申請書",
    "R345399": "質権登録申請書",
    "R345501": "質権登録申請書",
    "R345502": "質権登録申請書",
    "R345503": "質権登録申請書",
    "R345504": "質権登録申請書",
    "R345505": "質権登録申請書",
    "R345506": "質権登録申請書",
    "R345507": "質権登録申請書",
    "R345508": "質権登録申請書",
    "R345509": "質権登録申請書",
    "R345510": "質権登録申請書",
    "R345511": "質権登録申請書",
    "R345512": "質権登録申請書",
    "R345513": "質権登録申請書",
    "R345514": "質権登録申請書",
    "R345531": "質権登録申請書",
    "R345532": "質権登録申請書",
    "R345533": "質権登録申請書",
    "R345534": "質権登録申請書",
    "R345599": "表示変更登録申請書",
    "R345611": "表示変更登録申請書",
    "R345612": "表示変更登録申請書",
    "R345613": "表示変更登録申請書",
    "R345614": "表示変更登録申請書",
    "R345631": "表示変更登録申請書",
    "R345632": "表示変更登録申請書",
    "R345633": "表示変更登録申請書",
    "R345634": "表示変更登録申請書",
    "R345699": "表示更正登録申請書",
    "R345803": "通常使用権抹消登録申請書 （解除・弁済）",
    "R345804": "通常使用権抹消登録申請書 （債務弁済）",
    "R345805": "通常使用権抹消登録申請書 （放棄）",
    "R345899": "抹消登録申請書",
    "R345Ｄ99": "回復登録申請書",
    "R345Ｆ01": "回復登録申請書",
    "R345Ｆ02": "回復登録申請書",
    "R345Ｆ99": "嘱託書",
    "R345Ｇ01": "嘱託書",
    "R345Ｇ99": "仮登録申請書",
    "R345Ｈ99": "仮登録申請書",
    "R345Ｉ99": "仮登録申請書",
    "R345Ｊ01": "仮登録申請書",
    "R345Ｊ99": "仮登録申請書",
    "R345Ｋ99": "仮登録申請書",
    "R345Ｌ99": "仮登録申請書",
    "R345Ｚ02": "信託登録申請書",
    "R345Ｚ03": "信託抹消登録申請書",
    "R346303": "信託抹消登録申請書",
    "R346304": "信託抹消登録申請書",
    "R346311": "信託抹消登録申請書",
    "R346312": "信託抹消登録申請書",
    "R346313": "信託抹消登録申請書",
    "R346314": "信託抹消登録申請書",
    "R346315": "信託抹消登録申請書",
    "R346316": "信託抹消登録申請書",
    "R346317": "信託抹消登録申請書",
    "R346318": "信託抹消登録申請書",
    "R346319": "信託抹消登録申請書",
    "R346321": "信託抹消登録申請書",
    "R346325": "信託抹消登録申請書",
    "R346326": "信託抹消登録申請書",
    "R346327": "信託抹消登録申請書",
    "R346328": "信託抹消登録申請書",
    "R346330": "信託抹消登録申請書",
    "R346331": "信託抹消登録申請書",
    "R346332": "信託抹消登録申請書",
    "R346333": "信託抹消登録申請書",
    "R346334": "信託抹消登録申請書",
    "R346335": "信託抹消登録申請書",
    "R346336": "信託抹消登録申請書",
    "R346337": "信託抹消登録申請書",
    "R346338": "信託抹消登録申請書",
    "R346339": "信託抹消登録申請書",
    "R346340": "信託抹消登録申請書",
    "R346341": "信託抹消登録申請書",
    "R346343": "信託抹消登録申請書",
    "R346344": "信託抹消登録申請書",
    "R346345": "信託抹消登録申請書",
    "R346347": "信託抹消登録申請書",
    "R346348": "信託抹消登録申請書",
    "R346350": "信託抹消登録申請書",
    "R346351": "信託抹消登録申請書",
    "R346352": "信託抹消登録申請書",
    "R346353": "信託抹消登録申請書",
    "R346354": "信託抹消登録申請書",
    "R346355": "信託抹消登録申請書",
    "R346356": "信託抹消登録申請書",
    "R346357": "信託抹消登録申請書",
    "R346358": "信託抹消登録申請書",
    "R346359": "信託抹消登録申請書",
    "R346360": "信託抹消登録申請書",
    "R346361": "信託抹消登録申請書",
    "R346399": "質権登録申請書",
    "R346501": "質権登録申請書",
    "R346502": "質権登録申請書",
    "R346503": "質権登録申請書",
    "R346504": "質権登録申請書",
    "R346505": "質権登録申請書",
    "R346506": "質権登録申請書",
    "R346507": "質権登録申請書",
    "R346508": "質権登録申請書",
    "R346509": "質権登録申請書",
    "R346510": "質権登録申請書",
    "R346511": "質権登録申請書",
    "R346512": "質権登録申請書",
    "R346513": "質権登録申請書",
    "R346514": "質権登録申請書",
    "R346531": "質権登録申請書",
    "R346532": "質権登録申請書",
    "R346533": "質権登録申請書",
    "R346534": "質権登録申請書",
    "R346599": "表示変更登録申請書",
    "R346611": "表示変更登録申請書",
    "R346612": "表示変更登録申請書",
    "R346613": "表示変更登録申請書",
    "R346614": "表示変更登録申請書",
    "R346631": "表示変更登録申請書",
    "R346632": "表示変更登録申請書",
    "R346633": "表示変更登録申請書",
    "R346634": "表示変更登録申請書",
    "R346699": "表示更正登録申請書",
    "R346803": "表示更正登録申請書",
    "R346804": "表示更正登録申請書",
    "R346805": "表示更正登録申請書",
    "R346899": "抹消登録申請書",
    "R346Ｄ99": "回復登録申請書",
    "R346Ｆ01": "回復登録申請書",
    "R346Ｆ02": "回復登録申請書",
    "R346Ｆ99": "嘱託書",
    "R346Ｇ01": "嘱託書",
    "R346Ｇ99": "仮登録申請書",
    "R346Ｈ99": "仮登録申請書",
    "R346Ｉ99": "仮登録申請書",
    "R346Ｊ01": "仮登録申請書",
    "R346Ｊ99": "仮登録申請書",
    "R346Ｋ99": "仮登録申請書",
    "R346Ｌ99": "仮登録申請書",
    "R346Ｚ02": "信託登録申請書",
    "R346Ｚ03": "信託抹消登録申請書",
    "R347401": "信託抹消登録申請書",
    "R347402": "信託抹消登録申請書",
    "R347411": "信託抹消登録申請書",
    "R347421": "信託抹消登録申請書",
    "R347422": "信託抹消登録申請書",
    "R347499": "管理人登録申請書",
    "R347501": "管理人登録申請書",
    "R347502": "管理人登録申請書",
    "R347503": "管理人登録申請書",
    "R347504": "管理人登録申請書",
    "R347505": "管理人登録申請書",
    "R347506": "管理人登録申請書",
    "R347507": "管理人登録申請書",
    "R347508": "管理人登録申請書",
    "R347509": "管理人登録申請書",
    "R347510": "管理人登録申請書",
    "R347511": "管理人登録申請書",
    "R347512": "管理人登録申請書",
    "R347513": "管理人登録申請書",
    "R347514": "管理人登録申請書",
    "R347531": "管理人登録申請書",
    "R347532": "管理人登録申請書",
    "R347533": "管理人登録申請書",
    "R347534": "管理人登録申請書",
    "R347599": "表示変更登録申請書",
    "R347611": "表示変更登録申請書",
    "R347612": "表示変更登録申請書",
    "R347613": "表示変更登録申請書",
    "R347614": "表示変更登録申請書",
    "R347631": "表示変更登録申請書",
    "R347632": "表示変更登録申請書",
    "R347633": "表示変更登録申請書",
    "R347634": "表示変更登録申請書",
    "R347699": "表示更正登録申請書",
    "R34ＸＤ99": "回復登録申請書",
    "R350": "移転登録済通知書",
    "R360": "却下理由通知書 （移転）",
    "R362": "物件提出命令書 （移転）",
    "R370": "手続却下処分書 （移転）",
    "R371": "取下 （移転）",
    "R372": "手続却下処分書 （移転補正・弁明・物件）",
    "R380": "補正指令書 （移転）",
    "R382": "補完指令書 （移転）",
    "R390": "補正書 （移転）",
    "R391": "弁明書 （移転）",
    "R392": "物件提出書 （移転）",
    "R393": "上申書 （移転）",
    "R394": "補完書 （移転）",
    "R395": "雑書類 （移転）",
    "R396": "期間延長願 （移転）",
    "R3Ｄ01": "代理人変更届",
    "R3Ｄ02": "代理人受任届",
    "R3Ｄ03": "代理人選任届",
    "R3Ｄ04": "代理人辞任届",
    "R3Ｄ05": "代理人解任届",
    "R3Ｄ06": "代理権変更届",
    "R3Ｄ07": "代理権消滅届",
    "R3Ｄ08": "包括委任状援用制限届",
    "R3Ｄ09": "代理人氏名（名称）変更届",
    "R3Ｄ10": "代理人住所（居所）変更届",
    "R3Ｄ11": "復代理人変更届",
    "R3Ｄ12": "復代理人受任届",
    "R3Ｄ13": "復代理人選任届",
    "R3Ｄ14": "復代理人辞任届",
    "R3Ｄ15": "復代理人解任届",
    "R3Ｄ16": "復代理権変更届",
    "R3Ｄ17": "復代理権消滅届",
    "R3Ｅ0": "印紙還付（移転）",
    "R90": "誤送通知",
    "R901": "誤送通知（返送）",
    "R902": "誤送通知（再送）",
    "R903": "誤送通知（官報）",
    "R91": "職権取消通知",
    "R911": "職権取消通知（返送）",
    "R912": "職権取消通知（再送）",
    "R913": "職権取消通知（官報）",
    "R92": "無効通知",
    "R921": "無効通知（返送）",
    "R922": "無効通知（再送）",
    "R923": "無効通知（官報）",
    "R93": "職権更正通知",
    "R931": "職権更正通知（返送）",
    "R932": "職権更正通知（再送）",
    "R933": "職権更正通知（官報）",
    "R94": "返戻通知（移転）",
    "Ａ０１": "登録査定書",
    "Ａ０４５": "出願却下処分書",
    "Ａ２６": "誤送通知書",
    "Ａ２８": "再送",
    "Ａ２９": "官報",
    "Ａ９７１０９１": "職権取消通知",
    "Ａ９７１０９２": "無効通知",
    "Ａ９７１０９３": "職権更正通知",
    "Ｒ１００": "設定納付書",
    "Ｒ１００１": "設定納付書（包括納付）",
    "Ｒ１００４": "設定納付書（官庁）",
    "Ｒ１００５": "設定納付書（延長）",
    "Ｒ１０１": "追加の特許の特許料納付書",
    "Ｒ１０１１": "追加の特許の特許料納付書（包括納付）",
    "Ｒ１０１４": "追加の特許の特許料納付書（官庁）",
    "Ｒ１０２": "類似意匠登録料納付書",
    "Ｒ１０２１": "類似意匠登録料納付書（包括納付）",
    "Ｒ１０２２": "類似意匠登録料納付書（免除）",
    "Ｒ１０２３": "類似意匠登録料納付書（猶予）",
    "Ｒ１０２４": "類似意匠登録料納付書（官庁）",
    "Ｒ１０３": "防護標章登録料納付書",
    "Ｒ１０３１": "防護標章登録料納付書（包括納付）",
    "Ｒ１０３２": "防護標章登録料納付書（免除）",
    "Ｒ１０３３": "防護標章登録料納付書（猶予）",
    "Ｒ１０３４": "防護標章登録料納付書（官庁）",
    "Ｒ１０４": "商標更新登録料納付書",
    "Ｒ１０４１": "商標更新登録料納付書（包括納付）",
    "Ｒ１０４２": "商標更新登録料納付書（免除）",
    "Ｒ１０４３": "商標更新登録料納付書（猶予）",
    "Ｒ１０４４": "商標更新登録料納付書（官庁）",
    "Ｒ１０５": "防護標章更新登録料納付書",
    "Ｒ１０５１": "防護標章更新登録料納付書（包括納付）",
    "Ｒ１０５２": "防護標章更新登録料納付書（免除）",
    "Ｒ１０５３": "防護標章更新登録料納付書（猶予）",
    "Ｒ１０５４": "防護標章更新登録料納付書（官庁）",
    "Ｒ１１０": "納付書（設定補充）",
    "Ｒ１１１": "追加の特許の特許料納付書（設定補充）",
    "Ｒ１１２": "類似意匠登録料納付書（設定補充）",
    "Ｒ１１３": "防護標章登録料納付書（設定補充）",
    "Ｒ１１４": "商標更新登録料納付書（設定補充）",
    "Ｒ１１５": "防護標章更新登録料納付書（設定補充）",
    "Ｒ１５０": "登録証",
    "Ｒ１５１": "登録通知書",
    "Ｒ１５２": "商標登録通知書",
    "Ｒ１５３": "特許存続期間延長登録通知書",
    "Ｒ１５４": "登録証（再発行）",
    "Ｒ１５５": "出願却下処分前通知",
    "Ｒ１５６１": "書換時期通知",
    "Ｒ１５６２": "書換期限通知",
    "Ｒ１５６３": "書換登録済通知",
    "Ｒ１５７": "特許証（訂正）",
    "Ｒ１５８１": "意匠登録証（ハーグ）（再発行）",
    "Ｒ１５８２": "意匠登録証（ハーグ）（訂正）",
    "Ｒ１６０": "却下理由通知書（設定）",
    "Ｒ１６０１": "却下理由通知（設定）（返送）",
    "Ｒ１６０２": "却下理由通知（設定）（再送）",
    "Ｒ１６０３": "却下理由通知（設定）（官報）",
    "Ｒ１７０": "手続却下の処分（設定）",
    "Ｒ１７０１": "手続却下処分書（設定）（返送）",
    "Ｒ１７０２": "手続却下処分書（設定）（再送）",
    "Ｒ１７０３": "手続却下処分書（設定）（官報）",
    "Ｒ１８０": "納付書補充命令書（設定）",
    "Ｒ１８０１": "納付書補充指令書（設定）（返送）",
    "Ｒ１８０２": "納付書補充指令書（設定）（再送）",
    "Ｒ１８０３": "納付書補充指令書（設定）（官報）",
    "Ｒ１９１": "弁明書（設定）",
    "Ｒ１９３": "上申書（設定）",
    "Ｒ１９５": "雑書類（設定）",
    "Ｒ１９７": "手続補足書（設定）",
    "Ｒ２０": "年金納付書",
    "Ｒ２００": "商標登録料納付書",
    "Ｒ２００１": "特許料納付書（自動納付）",
    "Ｒ２０１": "商標権存続期間更新登録申請書",
    "Ｒ２１": "年金納付書（補充）",
    "Ｒ２１０": "商標登録料納付書（分納補充）",
    "Ｒ２１１": "商標権存続期間更新登録申請書（補充）",
    "Ｒ２１２": "納付書（補充）（差出書）",
    "Ｒ２２０": "商標権存続期間更新登録申請書（補足）",
    "Ｒ２３０": "訂正書（請求項削除）",
    "Ｒ２３１": "訂正書（明細書等）",
    "Ｒ２５０": "年金領収書、年金領収書（分納）",
    "Ｒ２５０１": "年金領収書（一括）",
    "Ｒ２５１": "更新申請登録通知書",
    "Ｒ２５２１": "自動納付登録通知書",
    "Ｒ２５２２": "自動納付事前通知書",
    "Ｒ２５２３": "自動納付終了通知書",
    "Ｒ２５２４": "自動納付中止の通知",
    "Ｒ２５２５": "適用除外通知",
    "Ｒ２６０": "却下理由通知書（年金）",
    "Ｒ２６０１": "却下理由通知書（訂正）",
    "Ｒ２６０２": "却下理由通知（年金）（返送）",
    "Ｒ２６０３": "却下理由通知（年金）（再送）",
    "Ｒ２６０４": "却下理由通知（年金）（官報）",
    "Ｒ２６１": "一部却下理由通知書（年金）",
    "Ｒ２６１１": "一部却下理由通知（返送）",
    "Ｒ２６１２": "一部却下理由通知（再送）",
    "Ｒ２６１３": "一部却下理由通知（官報）",
    "Ｒ２７０": "手続却下の処分（年金）",
    "Ｒ２７０１": "手続却下処分書（訂正）",
    "Ｒ２７０２": "手続却下処分書（年金）（返送）",
    "Ｒ２７０３": "手続却下処分書（年金）（再送）",
    "Ｒ２７０４": "手続却下処分書（年金）（官報）",
    "Ｒ２７１": "一部手続却下の処分（年金）",
    "Ｒ２７１１": "一部手続却下処分書（年金）（返送）",
    "Ｒ２７１２": "一部手続却下処分書（年金）（再送）",
    "Ｒ２７１３": "一部手続却下処分書（年金）（官報）",
    "Ｒ２８０": "納付書補充指令書",
    "Ｒ２８０１": "納付書補充指令書（差出書）",
    "Ｒ２８０２": "手続補正指令書（訂正）",
    "Ｒ２８０３": "納付書補充指令書（分納）（返送）",
    "Ｒ２８０４": "納付書補充指令書（分納）（再送）",
    "Ｒ２８０５": "納付書補充指令書（分納）（官報）",
    "Ｒ２８０６": "納付書補充指令書（年金）（差出書）（返送）",
    "Ｒ２８０７": "納付書補充指令書（年金）（差出書）（再送）",
    "Ｒ２８０８": "納付書補充指令書（年金）（差出書）（官報）",
    "Ｒ２８１": "商標更新登録申請書補充指令書",
    "Ｒ２８１１": "商標更新登録申請書補充指令書（返送）",
    "Ｒ２８１２": "商標更新登録申請書補充指令書（再送）",
    "Ｒ２８１３": "商標更新登録申請書補充指令書（官報）",
    "Ｒ２９１": "弁明書（年金）",
    "Ｒ２９２": "弁明書（訂正）",
    "Ｒ２９３": "上申書（年金）",
    "Ｒ２９４": "上申書（回復）",
    "Ｒ２９５": "雑書類（年金）",
    "Ｒ２９６": "通知書（その他通知）",
    "Ｒ２９７": "手続補足書（年金）",
    "Ｒ２９７１": "手続補正書（訂正）",
    "Ｒ３１１８０１": "本権抹消登録申請書 （権利放棄）",
    "Ｒ３１１８０２": "本権一部抹消登録申請書 （一部放棄）",
    "Ｒ３１１８９９": "抹消登録申請書",
    "Ｒ３１１Ｄ９９": "回復登録申請書",
    "Ｒ３１１Ｇ９９": "仮登録申請書",
    "Ｒ３１１Ｈ９９": "嘱託書 （予告登録）",
    "Ｒ３１１Ｌ９９": "嘱託書 （和議）",
    "Ｒ３１２８９９": "抹消登録申請書",
    "Ｒ３１３１１１": "本権移転登録申請書",
    "Ｒ３１３１１２": "本権移転登録申請書",
    "Ｒ３１３１１３": "本権移転登録申請書",
    "Ｒ３１３１１４": "本権移転登録申請書",
    "Ｒ３１３１１５": "本権移転登録申請書",
    "Ｒ３１３１１６": "本権移転登録申請書",
    "Ｒ３１３１１７": "本権移転登録申請書",
    "Ｒ３１３１１８": "本権移転登録申請書",
    "Ｒ３１３１１９": "本権移転登録申請書",
    "Ｒ３１３１２１": "本権移転登録申請書",
    "Ｒ３１３１２２": "本権移転登録申請書",
    "Ｒ３１３１３１": "本権移転信託登録申請書 （信託契約）",
    "Ｒ３１３１３２": "本権移転信託抹消登録申請書（信託抹消）",
    "Ｒ３１３１３３": "本権移転信託登録申請書（信託契約）",
    "Ｒ３１３１３４": "本権移転信託登録申請書（持分信託契約）",
    "Ｒ３１３１３５": "本権変更信託登録申請書（信託契約）",
    "Ｒ３１３１３６": "本権変更信託登録申請書（共有信託契約）",
    "Ｒ３１３１３７": "本権変更信託登録申請書（持分信託契約）",
    "Ｒ３１３１３８": "本権変更信託登録申請書（信託変更契約）",
    "Ｒ３１３１４１": "本権共有の特約等の事項の変更登録申請書",
    "Ｒ３１３１９９": "本権移転登録申請書",
    "Ｒ３１３５０１": "表示変更登録申請書 （移転）",
    "Ｒ３１３５０２": "表示変更登録申請書 （組織変更）",
    "Ｒ３１３５０３": "表示変更登録申請書 （改姓）",
    "Ｒ３１３５０４": "表示変更登録申請書 （改称）",
    "Ｒ３１３５０５": "表示変更登録申請書 （国籍変更）",
    "Ｒ３１３５０６": "表示変更登録申請書 （行政区画の変更）",
    "Ｒ３１３５０７": "表示変更登録申請書 （住居表示の実施）",
    "Ｒ３１３５０８": "表示変更登録申請書 （地番変更）",
    "Ｒ３１３５０９": "表示変更登録申請書 （土地名称変更）",
    "Ｒ３１３５１０": "表示変更登録申請書 （転入）",
    "Ｒ３１３５１１": "表示変更登録申請書 （転居）",
    "Ｒ３１３５１２": "表示変更登録申請書 （市制施行）",
    "Ｒ３１３５１３": "表示変更登録申請書 （区制施行）",
    "Ｒ３１３５１４": "表示変更登録申請書 （町名地番変更）",
    "Ｒ３１３５３１": "表示変更登録申請書 （住所）",
    "Ｒ３１３５３２": "表示変更登録申請書 （住所）",
    "Ｒ３１３５３３": "表示変更登録申請書 （氏名）",
    "Ｒ３１３５３４": "表示変更登録申請書 （国籍）",
    "Ｒ３１３５９９": "表示変更登録申請書",
    "Ｒ３１３６１１": "表示更正登録申請書 （住所）",
    "Ｒ３１３６１２": "表示更正登録申請書 （氏名）",
    "Ｒ３１３６１３": "表示更正登録申請書 （国籍）",
    "Ｒ３１３６１４": "表示更正登録申請書 （商号）",
    "Ｒ３１３６３１": "表示更正登録申請書 （住所）",
    "Ｒ３１３６３２": "表示更正登録申請書 （住所）",
    "Ｒ３１３６３３": "表示更正登録申請書 （氏名）",
    "Ｒ３１３６３４": "表示更正登録申請書 （国籍）",
    "Ｒ３１３６９９": "表示更正登録申請書",
    "Ｒ３１３８０３": "仮登録抹消登録申請書 （解除・弁済）",
    "Ｒ３１３８０５": "仮登録抹消登録申請書 （放棄）",
    "Ｒ３１３８９９": "抹消登録申請書",
    "Ｒ３１３Ｄ９９": "回復登録申請書",
    "Ｒ３１３Ｆ０１": "嘱託書 （差押命令）",
    "Ｒ３１３Ｆ０２": "嘱託書 （仮差押決定）",
    "Ｒ３１３Ｆ９９": "嘱託書",
    "Ｒ３１３Ｇ０１": "仮登録申請書 （代物弁済予約）",
    "Ｒ３１３Ｇ９９": "仮登録申請書",
    "Ｒ３１３Ｈ９９": "嘱託書 （予告登録）",
    "Ｒ３１３Ｉ９９": "通知書 （工場抵当）",
    "Ｒ３１３Ｊ０１": "嘱託書 （会社更正計画許可）",
    "Ｒ３１３Ｊ９９": "嘱託書 （会社更正）",
    "Ｒ３１３Ｋ９９": "嘱託書 （破産）",
    "Ｒ３１３Ｌ９９": "嘱託書 （和議）",
    "Ｒ３１３Ｚ０２": "信託登録申請書",
    "Ｒ３１３Ｚ０３": "信託抹消登録申請書",
    "Ｒ３１４２０１": "専用実施権設定登録申請書 （契約・許諾）",
    "Ｒ３１４２０２": "専用実施権設定登録申請書 （許諾）",
    "Ｒ３１４２１１": "専用実施権移転登録申請書 （相続・合併）",
    "Ｒ３１４２１２": "専用実施権移転登録申請書 （合併）",
    "Ｒ３１４２１３": "専用実施権移転登録申請書 （譲渡）",
    "Ｒ３１４２１４": "専用実施権移転登録申請書 （共有）",
    "Ｒ３１４２１５": "専用実施権移転登録申請書 （持分相続合併）",
    "Ｒ３１４２１６": "専用実施権移転登録申請書 （持分合併）",
    "Ｒ３１４２１７": "専用実施権移転登録申請書 （持分譲渡放棄）",
    "Ｒ３１４２１８": "専用実施権移転登録申請書 （持分共有）",
    "Ｒ３１４２１９": "専用実施権移転登録申請書 （持分放棄）",
    "Ｒ３１４２２１": "専用実施権変更登録申請書 （変更契約）",
    "Ｒ３１４２２２": "専用実施権変更登録申請書 （契約）",
    "Ｒ３１４２２３": "専用実施権変更登録申請書 （許諾）",
    "Ｒ３１４２２５": "専用実施権移転登録申請書 （共有分割）",
    "Ｒ３１４２２６": "専用実施権移転登録申請書（持分共有分割）",
    "Ｒ３１４２３０": "専用実施権設定信託登録申請書 （信託契約）",
    "Ｒ３１４２３１": "専用実施権移転信託登録申請書 （信託契約）",
    "Ｒ３１４２３２": "専用実施権信託抹消登録申請書 （信託抹消）",
    "Ｒ３１４２３３": "専用実施権設定信託登録申請書（信託契約）",
    "Ｒ３１４２３４": "専用実施権移転信託登録申請書（信託契約）",
    "Ｒ３１４２３５": "専用実施権移転信託登録申請書（持分信託）",
    "Ｒ３１４２３６": "専用実施権変更信託登録申請書（信託契約）",
    "Ｒ３１４２３７": "専用実施権変更信託登録申請書（共有信託）",
    "Ｒ３１４２３８": "専用実施権変更信託登録申請書（持分信託）",
    "Ｒ３１４２３９": "専用実施権変更信託登録申請書（信託変更）",
    "Ｒ３１４２４０": "専用実施権抹消信託登録申請書（契約解除）",
    "Ｒ３１４２９９": "専用実施権登録申請書",
    "Ｒ３１４３０３": "質権設定登録申請書 （設定契約）",
    "Ｒ３１４３０４": "根質権設定登録申請書 （設定契約）",
    "Ｒ３１４３１１": "質権移転登録申請書 （相続・合併）",
    "Ｒ３１４３１２": "質権移転登録申請書 （合併）",
    "Ｒ３１４３１３": "質権移転登録申請書 （譲渡）",
    "Ｒ３１４３１４": "質権移転登録申請書 （一部譲渡）",
    "Ｒ３１４３１５": "質権移転登録申請書 （持分相続・合併）",
    "Ｒ３１４３１６": "質権移転登録申請書 （持分合併）",
    "Ｒ３１４３１７": "質権移転登録申請書 （持分譲渡・放棄）",
    "Ｒ３１４３１８": "質権移転登録申請書 （持分の一部譲渡）",
    "Ｒ３１４３１９": "質権移転登録申請書 （持分放棄）",
    "Ｒ３１４３２１": "質権変更登録申請書 （変更契約）",
    "Ｒ３１４３２５": "質権移転登録申請書 （一部分割）",
    "Ｒ３１４３２６": "質権移転登録申請書 （持分の一部分割）",
    "Ｒ３１４３２７": "根質権移転登録申請書 （一部分割）",
    "Ｒ３１４３２８": "根質権移転登録申請書（持分の一部分割）",
    "Ｒ３１４３３０": "質権設定信託登録申請書 （信託契約）",
    "Ｒ３１４３３１": "質権移転信託登録申請書 （信託契約）",
    "Ｒ３１４３３２": "質権移転信託抹消登録申請書 （信託抹消）",
    "Ｒ３１４３３３": "根質権設定信託登録申請書 （信託契約）",
    "Ｒ３１４３３４": "根質権移転信託登録申請書 （信託契約）",
    "Ｒ３１４３３５": "根質権移転信託抹消登録申請書（信託抹消）",
    "Ｒ３１４３３６": "質権設定信託登録申請書（信託契約）",
    "Ｒ３１４３３７": "質権移転信託登録申請書（信託契約）",
    "Ｒ３１４３３８": "質権移転信託登録申請書（持分信託契約）",
    "Ｒ３１４３３９": "質権変更信託登録申請書（信託契約）",
    "Ｒ３１４３４０": "質権変更信託登録申請書（共有信託契約）",
    "Ｒ３１４３４１": "根質権設定信託登録申請書 （相続・合併）",
    "Ｒ３１４３４３": "根質権移転登録申請書 （譲渡）",
    "Ｒ３１４３４４": "根質権移転登録申請書 （一部譲渡）",
    "Ｒ３１４３４５": "根質権移転登録申請書 （持分相続・合併）",
    "Ｒ３１４３４７": "根質権移転登録申請書 （持分譲渡・放棄）",
    "Ｒ３１４３４８": "根質権移転登録申請書 （持分の一部譲渡）",
    "Ｒ３１４３５０": "根質権変更登録申請書 （変更契約）",
    "Ｒ３１４３５１": "質権変更信託登録申請書（持分信託契約）",
    "Ｒ３１４３５２": "質権変更信託登録申請書（信託変更契約）",
    "Ｒ３１４３５３": "質権抹消信託登録申請書（契約解除）",
    "Ｒ３１４３５４": "根質権設定信託登録申請書（信託契約）",
    "Ｒ３１４３５５": "根質権移転信託登録申請書（信託契約）",
    "Ｒ３１４３５６": "根質権移転信託登録申請書（持分信託契約）",
    "Ｒ３１４３５７": "根質権変更信託登録申請書（信託契約）",
    "Ｒ３１４３５８": "根質権変更信託登録申請書（共有信託契約）",
    "Ｒ３１４３５９": "根質権変更信託登録申請書（持分信託契約）",
    "Ｒ３１４３６０": "根質権変更信託登録申請書（信託変更契約）",
    "Ｒ３１４３６１": "根質権抹消信託登録申請書（契約解除）",
    "Ｒ３１４３９９": "質権登録申請書",
    "Ｒ３１４５０１": "表示変更登録申請書 （移転）",
    "Ｒ３１４５０２": "表示変更登録申請書 （組織変更）",
    "Ｒ３１４５０３": "表示変更登録申請書 （改姓）",
    "Ｒ３１４５０４": "表示変更登録申請書 （改称）",
    "Ｒ３１４５０５": "表示変更登録申請書 （国籍変更）",
    "Ｒ３１４５０６": "表示変更登録申請書 （行政区画の変更）",
    "Ｒ３１４５０７": "表示変更登録申請書 （住居表示の実施）",
    "Ｒ３１４５０８": "表示変更登録申請書 （地番変更）",
    "Ｒ３１４５０９": "表示変更登録申請書 （土地名称変更）",
    "Ｒ３１４５１０": "表示変更登録申請書 （転入）",
    "Ｒ３１４５１１": "表示変更登録申請書 （転居）",
    "Ｒ３１４５１２": "表示変更登録申請書 （市制施行）",
    "Ｒ３１４５１３": "表示変更登録申請書 （区制施行）",
    "Ｒ３１４５１４": "表示変更登録申請書 （町名地番変更）",
    "Ｒ３１４５３１": "表示変更登録申請書 （住所）",
    "Ｒ３１４５３２": "表示変更登録申請書 （住所）",
    "Ｒ３１４５３３": "表示変更登録申請書 （氏名）",
    "Ｒ３１４５３４": "表示変更登録申請書 （国籍）",
    "Ｒ３１４５９９": "表示変更登録申請書",
    "Ｒ３１４６１１": "表示更正登録申請書 （住所）",
    "Ｒ３１４６１２": "表示更正登録申請書 （氏名）",
    "Ｒ３１４６１３": "表示更正登録申請書 （国籍）",
    "Ｒ３１４６１４": "表示更正登録申請書 （商号）",
    "Ｒ３１４６３１": "表示更正登録申請書 （住所）",
    "Ｒ３１４６３２": "表示更正登録申請書 （住所）",
    "Ｒ３１４６３３": "表示更正登録申請書 （氏名）",
    "Ｒ３１４６３４": "表示更正登録申請書 （国籍）",
    "Ｒ３１４６９９": "表示更正登録申請書",
    "Ｒ３１４８０３": "専用実施権抹消登録申請書 （解除・弁済）",
    "Ｒ３１４８０４": "専用実施権抹消登録申請書 （債務弁済）",
    "Ｒ３１４８０５": "専用実施権抹消登録申請書 （放棄）",
    "Ｒ３１４８９９": "抹消登録申請書",
    "Ｒ３１４Ｄ９９": "回復登録申請書",
    "Ｒ３１４Ｆ０１": "嘱託書 （差押命令）",
    "Ｒ３１４Ｆ０２": "嘱託書 （仮差押決定）",
    "Ｒ３１４Ｆ９９": "嘱託書",
    "Ｒ３１４Ｇ０１": "仮登録申請書 （代物弁済予約）",
    "Ｒ３１４Ｇ９９": "仮登録申請書",
    "Ｒ３１４Ｈ９９": "嘱託書 （予告登録）",
    "Ｒ３１４Ｉ９９": "通知書 （工場抵当）",
    "Ｒ３１４Ｊ０１": "嘱託書 （会社更正計画許可）",
    "Ｒ３１４Ｊ９９": "嘱託書 （会社更正）",
    "Ｒ３１４Ｋ９９": "嘱託書 （破産）",
    "Ｒ３１４Ｌ９９": "嘱託書 （和議）",
    "Ｒ３１４Ｚ０２": "信託登録申請書",
    "Ｒ３１４Ｚ０３": "信託抹消登録申請書",
    "Ｒ３１５２０１": "通常実施権設定登録申請書 （契約・許諾）",
    "Ｒ３１５２０２": "通常実施権設定登録申請書 （許諾）",
    "Ｒ３１５２１１": "通常実施権移転登録申請書 （相続・合併）",
    "Ｒ３１５２１２": "通常実施権移転登録申請書 （合併）",
    "Ｒ３１５２１３": "通常実施権移転登録申請書 （譲渡）",
    "Ｒ３１５２１４": "通常実施権移転登録申請書 （共有）",
    "Ｒ３１５２１５": "通常実施権移転登録申請書 （持分相続合併）",
    "Ｒ３１５２１６": "通常実施権移転登録申請書 （持分合併）",
    "Ｒ３１５２１７": "通常実施権移転登録申請書 （持分譲渡放棄）",
    "Ｒ３１５２１８": "通常実施権移転登録申請書 （持分共有）",
    "Ｒ３１５２１９": "通常実施権移転登録申請書 （持分放棄）",
    "Ｒ３１５２２１": "通常実施権変更登録申請書 （変更契約）",
    "Ｒ３１５２２２": "通常実施権変更登録申請書 （契約）",
    "Ｒ３１５２２３": "通常実施権変更登録申請書 （許諾）",
    "Ｒ３１５２２５": "通常実施権移転登録申請書 （共有分割）",
    "Ｒ３１５２２６": "通常実施権移転登録申請書（持分共有分割）",
    "Ｒ３１５２３０": "通常実施権設定信託登録申請書 （信託契約）",
    "Ｒ３１５２３１": "通常実施権移転信託登録申請書 （信託契約）",
    "Ｒ３１５２３２": "通常実施権信託抹消登録申請書 （信託抹消）",
    "Ｒ３１５２３３": "通常実施権設定信託登録申請書（信託契約）",
    "Ｒ３１５２３４": "通常実施権移転信託登録申請書（信託契約）",
    "Ｒ３１５２３５": "通常実施権移転信託登録申請書（持分信託）",
    "Ｒ３１５２３６": "通常実施権変更信託登録申請書（信託契約）",
    "Ｒ３１５２３７": "通常実施権変更信託登録申請書（共有信託）",
    "Ｒ３１５２３８": "通常実施権変更信託登録申請書（持分信託）",
    "Ｒ３１５２３９": "通常実施権変更信託登録申請書（信託変更）",
    "Ｒ３１５２４０": "通常実施権抹消信託登録申請書（契約解除）",
    "Ｒ３１５２９９": "通常実施権登録申請書",
    "Ｒ３１５３０３": "質権設定登録申請書 （設定契約）",
    "Ｒ３１５３０４": "根質権設定登録申請書 （設定契約）",
    "Ｒ３１５３１１": "質権移転登録申請書 （相続・合併）",
    "Ｒ３１５３１２": "質権移転登録申請書 （合併）",
    "Ｒ３１５３１３": "質権移転登録申請書 （譲渡）",
    "Ｒ３１５３１４": "質権移転登録申請書 （一部譲渡）",
    "Ｒ３１５３１５": "質権移転登録申請書 （持分相続・合併）",
    "Ｒ３１５３１６": "質権移転登録申請書 （持分合併）",
    "Ｒ３１５３１７": "質権移転登録申請書 （持分譲渡・放棄）",
    "Ｒ３１５３１８": "質権移転登録申請書 （持分の一部譲渡）",
    "Ｒ３１５３１９": "質権移転登録申請書 （持分放棄）",
    "Ｒ３１５３２１": "質権変更登録申請書 （変更契約）",
    "Ｒ３１５３２５": "質権移転登録申請書 （一部分割）",
    "Ｒ３１５３２６": "質権移転登録申請書 （持分の一部分割）",
    "Ｒ３１５３２７": "根質権移転登録申請書 （一部分割）",
    "Ｒ３１５３２８": "根質権移転登録申請書（持分の一部分割）",
    "Ｒ３１５３３０": "質権設定信託登録申請書 （信託契約）",
    "Ｒ３１５３３１": "質権移転信託登録申請書 （信託契約）",
    "Ｒ３１５３３２": "質権移転信託抹消登録申請書 （信託抹消）",
    "Ｒ３１５３３３": "根質権設定信託登録申請書 （信託契約）",
    "Ｒ３１５３３４": "根質権移転信託登録申請書 （信託契約）",
    "Ｒ３１５３３５": "根質権移転信託抹消登録申請書（信託抹消）",
    "Ｒ３１５３３６": "質権設定信託登録申請書（信託契約）",
    "Ｒ３１５３３７": "質権移転信託登録申請書（信託契約）",
    "Ｒ３１５３３８": "質権移転信託登録申請書（持分信託契約）",
    "Ｒ３１５３３９": "質権変更信託登録申請書（信託契約）",
    "Ｒ３１５３４０": "質権変更信託登録申請書（共有信託契約）",
    "Ｒ３１５３４１": "根質権移転登録申請書 （相続・合併）",
    "Ｒ３１５３４３": "根質権移転登録申請書 （譲渡）",
    "Ｒ３１５３４４": "根質権移転登録申請書 （一部譲渡）",
    "Ｒ３１５３４５": "根質権移転登録申請書 （持分相続・合併）",
    "Ｒ３１５３４７": "根質権移転登録申請書 （持分譲渡・放棄）",
    "Ｒ３１５３４８": "根質権移転登録申請書 （持分の一部譲渡）",
    "Ｒ３１５３５０": "根質権変更登録申請書 （変更契約）",
    "Ｒ３１５３５１": "質権変更信託登録申請書（持分信託契約）",
    "Ｒ３１５３５２": "質権変更信託登録申請書（信託変更契約）",
    "Ｒ３１５３５３": "質権抹消信託登録申請書（契約解除）",
    "Ｒ３１５３５４": "根質権設定信託登録申請書（信託契約）",
    "Ｒ３１５３５５": "根質権移転信託登録申請書（信託契約）",
    "Ｒ３１５３５６": "根質権移転信託登録申請書（持分信託契約）",
    "Ｒ３１５３５７": "根質権変更信託登録申請書（信託契約）",
    "Ｒ３１５３５８": "根質権変更信託登録申請書（共有信託契約）",
    "Ｒ３１５３５９": "根質権変更信託登録申請書（持分信託契約）",
    "Ｒ３１５３６０": "根質権変更信託登録申請書（信託変更契約）",
    "Ｒ３１５３６１": "根質権抹消信託登録申請書（契約解除）",
    "Ｒ３１５３９９": "質権登録申請書",
    "Ｒ３１５５０１": "表示変更登録申請書 （移転）",
    "Ｒ３１５５０２": "表示変更登録申請書 （組織変更）",
    "Ｒ３１５５０３": "表示変更登録申請書 （改姓）",
    "Ｒ３１５５０４": "表示変更登録申請書 （改称）",
    "Ｒ３１５５０５": "表示変更登録申請書 （国籍変更）",
    "Ｒ３１５５０６": "表示変更登録申請書 （行政区画の変更）",
    "Ｒ３１５５０７": "表示変更登録申請書 （住居表示の実施）",
    "Ｒ３１５５０８": "表示変更登録申請書 （地番変更）",
    "Ｒ３１５５０９": "表示変更登録申請書 （土地名称変更）",
    "Ｒ３１５５１０": "表示変更登録申請書 （転入）",
    "Ｒ３１５５１１": "表示変更登録申請書 （転居）",
    "Ｒ３１５５１２": "表示変更登録申請書 （市制施行）",
    "Ｒ３１５５１３": "表示変更登録申請書 （区制施行）",
    "Ｒ３１５５１４": "表示変更登録申請書 （町名地番変更）",
    "Ｒ３１５５３１": "表示変更登録申請書 （町名地番変更）",
    "Ｒ３１５５３２": "表示変更登録申請書 （住所）",
    "Ｒ３１５５３３": "表示変更登録申請書 （氏名）",
    "Ｒ３１５５３４": "表示変更登録申請書 （国籍）",
    "Ｒ３１５５９９": "表示変更登録申請書",
    "Ｒ３１５６１１": "表示更正登録申請書 （住所）",
    "Ｒ３１５６１２": "表示更正登録申請書 （氏名）",
    "Ｒ３１５６１３": "表示更正登録申請書 （国籍）",
    "Ｒ３１５６１４": "表示更正登録申請書 （商号）",
    "Ｒ３１５６３１": "表示更正登録申請書 （住所）",
    "Ｒ３１５６３２": "表示更正登録申請書 （住所）",
    "Ｒ３１５６３３": "表示更正登録申請書 （氏名）",
    "Ｒ３１５６３４": "表示更正登録申請書 （国籍）",
    "Ｒ３１５６９９": "表示更正登録申請書",
    "Ｒ３１５８０３": "通常実施権抹消登録申請書 （解除・弁済）",
    "Ｒ３１５８０４": "通常実施権抹消登録申請書 （債務弁済）",
    "Ｒ３１５８０５": "通常実施権抹消登録申請書 （放棄）",
    "Ｒ３１５８９９": "抹消登録申請書",
    "Ｒ３１５Ｄ９９": "回復登録申請書",
    "Ｒ３１５Ｆ０１": "嘱託書 （差押命令）",
    "Ｒ３１５Ｆ０２": "嘱託書 （仮差押決定）",
    "Ｒ３１５Ｆ９９": "嘱託書",
    "Ｒ３１５Ｇ０１": "仮登録申請書 （代物弁済予約）",
    "Ｒ３１５Ｇ９９": "仮登録申請書",
    "Ｒ３１５Ｈ９９": "嘱託書 （予告登録）",
    "Ｒ３１５Ｉ９９": "通知書 （工場抵当）",
    "Ｒ３１５Ｊ０１": "嘱託書 （会社更正計画許可）",
    "Ｒ３１５Ｊ９９": "嘱託書 （会社更正）",
    "Ｒ３１５Ｋ９９": "嘱託書 （破産）",
    "Ｒ３１５Ｌ９９": "嘱託書 （和議）",
    "Ｒ３１５Ｚ０２": "信託登録申請書",
    "Ｒ３１５Ｚ０３": "信託抹消登録申請書",
    "Ｒ３１６３０３": "質権設定登録申請書 （設定契約）",
    "Ｒ３１６３０４": "根質権設定登録申請書 （設定契約）",
    "Ｒ３１６３１１": "質権移転登録申請書 （相続・合併）",
    "Ｒ３１６３１２": "質権移転登録申請書 （合併）",
    "Ｒ３１６３１３": "質権移転登録申請書 （譲渡）",
    "Ｒ３１６３１４": "質権移転登録申請書 （一部譲渡）",
    "Ｒ３１６３１５": "質権移転登録申請書 （持分相続・合併）",
    "Ｒ３１６３１６": "質権移転登録申請書 （持分合併）",
    "Ｒ３１６３１７": "質権移転登録申請書 （持分譲渡・放棄）",
    "Ｒ３１６３１８": "質権移転登録申請書 （持分の一部譲渡）",
    "Ｒ３１６３１９": "質権移転登録申請書 （持分放棄）",
    "Ｒ３１６３２１": "質権変更登録申請書 （変更契約）",
    "Ｒ３１６３２５": "質権移転登録申請書 （一部分割）",
    "Ｒ３１６３２６": "質権移転登録申請書 （持分の一部分割）",
    "Ｒ３１６３２７": "根質権移転登録申請書 （一部分割）",
    "Ｒ３１６３２８": "根質権移転登録申請書（持分の一部分割）",
    "Ｒ３１６３３０": "質権設定信託登録申請書 （信託契約）",
    "Ｒ３１６３３１": "質権移転信託登録申請書 （信託契約）",
    "Ｒ３１６３３２": "質権移転信託抹消登録申請書 （信託抹消）",
    "Ｒ３１６３３３": "根質権設定信託登録申請書 （信託契約）",
    "Ｒ３１６３３４": "根質権移転信託登録申請書 （信託契約）",
    "Ｒ３１６３３５": "根質権移転信託抹消登録申請書（信託抹消）",
    "Ｒ３１６３３６": "質権設定信託登録申請書（信託契約）",
    "Ｒ３１６３３７": "質権移転信託登録申請書（信託契約）",
    "Ｒ３１６３３８": "質権移転信託登録申請書（持分信託契約）",
    "Ｒ３１６３３９": "質権変更信託登録申請書（信託契約）",
    "Ｒ３１６３４０": "質権変更信託登録申請書（共有信託契約）",
    "Ｒ３１６３４１": "根質権移転登録申請書 （相続・合併）",
    "Ｒ３１６３４３": "根質権移転登録申請書 （譲渡）",
    "Ｒ３１６３４４": "根質権移転登録申請書 （一部譲渡）",
    "Ｒ３１６３４５": "根質権移転登録申請書 （持分相続・合併）",
    "Ｒ３１６３４７": "根質権移転登録申請書 （持分譲渡・放棄）",
    "Ｒ３１６３４８": "根質権移転登録申請書 （持分の一部譲渡）",
    "Ｒ３１６３５０": "根質権変更登録申請書 （変更契約）",
    "Ｒ３１６３５１": "質権変更信託登録申請書（持分信託契約）",
    "Ｒ３１６３５２": "質権変更信託登録申請書（信託変更契約）",
    "Ｒ３１６３５３": "質権抹消信託登録申請書（契約解除）",
    "Ｒ３１６３５４": "根質権設定信託登録申請書（信託契約）",
    "Ｒ３１６３５５": "根質権移転信託登録申請書（信託契約）",
    "Ｒ３１６３５６": "根質権移転信託登録申請書（持分信託契約）",
    "Ｒ３１６３５７": "根質権変更信託登録申請書（信託契約）",
    "Ｒ３１６３５８": "根質権変更信託登録申請書（共有信託契約）",
    "Ｒ３１６３５９": "根質権変更信託登録申請書（持分信託契約）",
    "Ｒ３１６３６０": "根質権変更信託登録申請書（信託変更契約）",
    "Ｒ３１６３６１": "根質権抹消信託登録申請書（契約解除）",
    "Ｒ３１６３９９": "質権登録申請書",
    "Ｒ３１６５０１": "表示変更登録申請書 （移転）",
    "Ｒ３１６５０２": "表示変更登録申請書 （組織変更）",
    "Ｒ３１６５０３": "表示変更登録申請書 （改姓）",
    "Ｒ３１６５０４": "表示変更登録申請書 （改称）",
    "Ｒ３１６５０５": "表示変更登録申請書 （国籍変更）",
    "Ｒ３１６５０６": "表示変更登録申請書 （行政区画の変更）",
    "Ｒ３１６５０７": "表示変更登録申請書 （住居表示の実施）",
    "Ｒ３１６５０８": "表示変更登録申請書 （地番変更）",
    "Ｒ３１６５０９": "表示変更登録申請書 （土地名称変更）",
    "Ｒ３１６５１０": "表示変更登録申請書 （転入）",
    "Ｒ３１６５１１": "表示変更登録申請書 （転居）",
    "Ｒ３１６５１２": "表示変更登録申請書 （市制施行）",
    "Ｒ３１６５１３": "表示変更登録申請書 （区制施行）",
    "Ｒ３１６５１４": "表示変更登録申請書 （町名地番変更）",
    "Ｒ３１６５３１": "表示変更登録申請書 （住所）",
    "Ｒ３１６５３２": "表示変更登録申請書 （住所）",
    "Ｒ３１６５３３": "表示変更登録申請書 （氏名）",
    "Ｒ３１６５３４": "表示変更登録申請書 （国籍）",
    "Ｒ３１６５９９": "表示変更登録申請書",
    "Ｒ３１６６１１": "表示更正登録申請書 （住所）",
    "Ｒ３１６６１２": "表示更正登録申請書 （氏名）",
    "Ｒ３１６６１３": "表示更正登録申請書 （国籍）",
    "Ｒ３１６６１４": "表示更正登録申請書 （商号）",
    "Ｒ３１６６３１": "表示更正登録申請書 （住所）",
    "Ｒ３１６６３２": "表示更正登録申請書 （住所）",
    "Ｒ３１６６３３": "表示更正登録申請書 （氏名）",
    "Ｒ３１６６３４": "表示更正登録申請書 （国籍）",
    "Ｒ３１６６９９": "表示更正登録申請書",
    "Ｒ３１６８０３": "質権抹消登録申請書 （解除・弁済）",
    "Ｒ３１６８０４": "質権抹消登録申請書 （債務弁済）",
    "Ｒ３１６８０５": "質権抹消登録申請書 （放棄）",
    "Ｒ３１６８９９": "抹消登録申請書",
    "Ｒ３１６Ｄ９９": "回復登録申請書",
    "Ｒ３１６Ｆ０１": "嘱託書 （差押命令）",
    "Ｒ３１６Ｆ０２": "嘱託書 （仮差押決定）",
    "Ｒ３１６Ｆ９９": "嘱託書",
    "Ｒ３１６Ｇ０１": "仮登録申請書 （代物弁済予約）",
    "Ｒ３１６Ｇ９９": "仮登録申請書",
    "Ｒ３１６Ｈ９９": "嘱託書 （予告登録）",
    "Ｒ３１６Ｉ９９": "通知書 （工場抵当）",
    "Ｒ３１６Ｊ０１": "嘱託書 （会社更正計画許可）",
    "Ｒ３１６Ｊ９９": "嘱託書 （会社更正）",
    "Ｒ３１６Ｋ９９": "嘱託書 （破産）",
    "Ｒ３１６Ｌ９９": "嘱託書 （和議）",
    "Ｒ３１６Ｚ０２": "信託登録申請書",
    "Ｒ３１６Ｚ０３": "信託抹消登録申請書",
    "Ｒ３１７４０１": "管理人選任登録申請書 （受任）",
    "Ｒ３１７４０２": "管理人選任登録申請書 （委任）",
    "Ｒ３１７４１１": "管理人変更登録申請書 （改任）",
    "Ｒ３１７４２１": "管理人抹消登録申請書 （辞任）",
    "Ｒ３１７４２２": "管理人抹消登録申請書 （解任）",
    "Ｒ３１７４９９": "管理人登録申請書",
    "Ｒ３１７５０１": "表示変更登録申請書 （移転）",
    "Ｒ３１７５０２": "表示変更登録申請書 （組織変更）",
    "Ｒ３１７５０３": "表示変更登録申請書 （改姓）",
    "Ｒ３１７５０４": "表示変更登録申請書 （改称）",
    "Ｒ３１７５０５": "表示変更登録申請書 （国籍変更）",
    "Ｒ３１７５０６": "表示変更登録申請書 （行政区画の変更）",
    "Ｒ３１７５０７": "表示変更登録申請書 （住居表示の実施）",
    "Ｒ３１７５０８": "表示変更登録申請書 （地番変更）",
    "Ｒ３１７５０９": "表示変更登録申請書 （土地名称変更）",
    "Ｒ３１７５１０": "表示変更登録申請書 （転入）",
    "Ｒ３１７５１１": "表示変更登録申請書 （転居）",
    "Ｒ３１７５１２": "表示変更登録申請書 （市制施行）",
    "Ｒ３１７５１３": "表示変更登録申請書 （区制施行）",
    "Ｒ３１７５１４": "表示変更登録申請書 （町名地番変更）",
    "Ｒ３１７５３１": "表示変更登録申請書 （住所）",
    "Ｒ３１７５３２": "表示変更登録申請書 （住所）",
    "Ｒ３１７５３３": "表示変更登録申請書 （氏名）",
    "Ｒ３１７５３４": "表示変更登録申請書 （国籍）",
    "Ｒ３１７５９９": "表示変更登録申請書",
    "Ｒ３１７６１１": "表示更正登録申請書 （住所）",
    "Ｒ３１７６１２": "表示更正登録申請書 （氏名）",
    "Ｒ３１７６１３": "表示更正登録申請書 （国籍）",
    "Ｒ３１７６１４": "表示更正登録申請書 （商号）",
    "Ｒ３１７６３１": "表示更正登録申請書 （住所）",
    "Ｒ３１７６３２": "表示更正登録申請書 （住所）",
    "Ｒ３１７６３３": "表示更正登録申請書 （氏名）",
    "Ｒ３１７６３４": "表示更正登録申請書 （国籍）",
    "Ｒ３１７６９９": "表示更正登録申請書",
    "Ｒ３１ＸＤ９９": "回復登録申請書",
    "Ｒ３２１８０１": "回復登録申請書",
    "Ｒ３２１８０２": "回復登録申請書",
    "Ｒ３２１８９９": "抹消登録申請書",
    "Ｒ３２１Ｄ９９": "回復登録申請書",
    "Ｒ３２１Ｇ９９": "仮登録申請書",
    "Ｒ３２１Ｈ９９": "仮登録申請書",
    "Ｒ３２１Ｌ９９": "仮登録申請書",
    "Ｒ３２２８９９": "抹消登録申請書",
    "Ｒ３２３１１１": "本権移転登録申請書",
    "Ｒ３２３１１２": "本権移転登録申請書",
    "Ｒ３２３１１３": "本権移転登録申請書",
    "Ｒ３２３１１４": "本権移転登録申請書",
    "Ｒ３２３１１５": "本権移転登録申請書",
    "Ｒ３２３１１６": "本権移転登録申請書",
    "Ｒ３２３１１７": "本権移転登録申請書",
    "Ｒ３２３１１８": "本権移転登録申請書",
    "Ｒ３２３１１９": "本権移転登録申請書",
    "Ｒ３２３１２１": "本権移転登録申請書",
    "Ｒ３２３１２２": "本権移転登録申請書",
    "Ｒ３２３１３１": "本権移転登録申請書",
    "Ｒ３２３１３２": "本権移転登録申請書",
    "Ｒ３２３１３３": "本権移転登録申請書",
    "Ｒ３２３１３４": "本権移転登録申請書",
    "Ｒ３２３１３５": "本権移転登録申請書",
    "Ｒ３２３１３６": "本権移転登録申請書",
    "Ｒ３２３１３７": "本権移転登録申請書",
    "Ｒ３２３１３８": "本権移転登録申請書",
    "Ｒ３２３１４１": "本権共有の特約等の事項の変更登録申請書",
    "Ｒ３２３１９９": "本権移転登録申請書",
    "Ｒ３２３５０１": "本権移転登録申請書",
    "Ｒ３２３５０２": "本権移転登録申請書",
    "Ｒ３２３５０３": "本権移転登録申請書",
    "Ｒ３２３５０４": "本権移転登録申請書",
    "Ｒ３２３５０５": "本権移転登録申請書",
    "Ｒ３２３５０６": "本権移転登録申請書",
    "Ｒ３２３５０７": "本権移転登録申請書",
    "Ｒ３２３５０８": "本権移転登録申請書",
    "Ｒ３２３５０９": "本権移転登録申請書",
    "Ｒ３２３５１０": "本権移転登録申請書",
    "Ｒ３２３５１１": "本権移転登録申請書",
    "Ｒ３２３５１２": "本権移転登録申請書",
    "Ｒ３２３５１３": "本権移転登録申請書",
    "Ｒ３２３５１４": "本権移転登録申請書",
    "Ｒ３２３５３１": "本権移転登録申請書",
    "Ｒ３２３５３２": "本権移転登録申請書",
    "Ｒ３２３５３３": "本権移転登録申請書",
    "Ｒ３２３５３４": "本権移転登録申請書",
    "Ｒ３２３５９９": "表示変更登録申請書",
    "Ｒ３２３６１１": "表示変更登録申請書",
    "Ｒ３２３６１２": "表示変更登録申請書",
    "Ｒ３２３６１３": "表示変更登録申請書",
    "Ｒ３２３６１４": "表示変更登録申請書",
    "Ｒ３２３６３１": "表示変更登録申請書",
    "Ｒ３２３６３２": "表示変更登録申請書",
    "Ｒ３２３６３３": "表示変更登録申請書",
    "Ｒ３２３６３４": "表示変更登録申請書",
    "Ｒ３２３６９９": "表示更正登録申請書",
    "Ｒ３２３８０３": "表示更正登録申請書",
    "Ｒ３２３８０５": "表示更正登録申請書",
    "Ｒ３２３８９９": "抹消登録申請書",
    "Ｒ３２３Ｄ９９": "回復登録申請書",
    "Ｒ３２３Ｆ０１": "回復登録申請書",
    "Ｒ３２３Ｆ０２": "回復登録申請書",
    "Ｒ３２３Ｆ９９": "嘱託書",
    "Ｒ３２３Ｇ０１": "嘱託書",
    "Ｒ３２３Ｇ９９": "仮登録申請書",
    "Ｒ３２３Ｈ９９": "仮登録申請書",
    "Ｒ３２３Ｉ９９": "仮登録申請書",
    "Ｒ３２３Ｊ０１": "仮登録申請書",
    "Ｒ３２３Ｊ９９": "仮登録申請書",
    "Ｒ３２３Ｋ９９": "仮登録申請書",
    "Ｒ３２３Ｌ９９": "仮登録申請書",
    "Ｒ３２３Ｚ０２": "信託登録申請書",
    "Ｒ３２３Ｚ０３": "信託抹消登録申請書",
    "Ｒ３２４２０１": "信託抹消登録申請書",
    "Ｒ３２４２０２": "信託抹消登録申請書",
    "Ｒ３２４２１１": "信託抹消登録申請書",
    "Ｒ３２４２１２": "信託抹消登録申請書",
    "Ｒ３２４２１３": "信託抹消登録申請書",
    "Ｒ３２４２１４": "信託抹消登録申請書",
    "Ｒ３２４２１５": "信託抹消登録申請書",
    "Ｒ３２４２１６": "信託抹消登録申請書",
    "Ｒ３２４２１７": "信託抹消登録申請書",
    "Ｒ３２４２１８": "信託抹消登録申請書",
    "Ｒ３２４２１９": "信託抹消登録申請書",
    "Ｒ３２４２２１": "信託抹消登録申請書",
    "Ｒ３２４２２２": "信託抹消登録申請書",
    "Ｒ３２４２２３": "信託抹消登録申請書",
    "Ｒ３２４２２５": "信託抹消登録申請書",
    "Ｒ３２４２２６": "信託抹消登録申請書",
    "Ｒ３２４２３０": "信託抹消登録申請書",
    "Ｒ３２４２３１": "信託抹消登録申請書",
    "Ｒ３２４２３２": "信託抹消登録申請書",
    "Ｒ３２４２３３": "信託抹消登録申請書",
    "Ｒ３２４２３４": "信託抹消登録申請書",
    "Ｒ３２４２３５": "信託抹消登録申請書",
    "Ｒ３２４２３６": "信託抹消登録申請書",
    "Ｒ３２４２３７": "信託抹消登録申請書",
    "Ｒ３２４２３８": "信託抹消登録申請書",
    "Ｒ３２４２３９": "信託抹消登録申請書",
    "Ｒ３２４２４０": "信託抹消登録申請書",
    "Ｒ３２４２９９": "専用実施権登録申請書",
    "Ｒ３２４３０３": "専用実施権登録申請書",
    "Ｒ３２４３０４": "専用実施権登録申請書",
    "Ｒ３２４３１１": "専用実施権登録申請書",
    "Ｒ３２４３１２": "専用実施権登録申請書",
    "Ｒ３２４３１３": "専用実施権登録申請書",
    "Ｒ３２４３１４": "専用実施権登録申請書",
    "Ｒ３２４３１５": "専用実施権登録申請書",
    "Ｒ３２４３１６": "専用実施権登録申請書",
    "Ｒ３２４３１７": "専用実施権登録申請書",
    "Ｒ３２４３１８": "専用実施権登録申請書",
    "Ｒ３２４３１９": "専用実施権登録申請書",
    "Ｒ３２４３２１": "専用実施権登録申請書",
    "Ｒ３２４３２５": "専用実施権登録申請書",
    "Ｒ３２４３２６": "専用実施権登録申請書",
    "Ｒ３２４３２７": "専用実施権登録申請書",
    "Ｒ３２４３２８": "専用実施権登録申請書",
    "Ｒ３２４３３０": "専用実施権登録申請書",
    "Ｒ３２４３３１": "専用実施権登録申請書",
    "Ｒ３２４３３２": "専用実施権登録申請書",
    "Ｒ３２４３３３": "専用実施権登録申請書",
    "Ｒ３２４３３４": "専用実施権登録申請書",
    "Ｒ３２４３３５": "専用実施権登録申請書",
    "Ｒ３２４３３６": "専用実施権登録申請書",
    "Ｒ３２４３３７": "専用実施権登録申請書",
    "Ｒ３２４３３８": "専用実施権登録申請書",
    "Ｒ３２４３３９": "専用実施権登録申請書",
    "Ｒ３２４３４０": "専用実施権登録申請書",
    "Ｒ３２４３４１": "専用実施権登録申請書",
    "Ｒ３２４３４３": "専用実施権登録申請書",
    "Ｒ３２４３４４": "専用実施権登録申請書",
    "Ｒ３２４３４５": "専用実施権登録申請書",
    "Ｒ３２４３４７": "専用実施権登録申請書",
    "Ｒ３２４３４８": "専用実施権登録申請書",
    "Ｒ３２４３５０": "専用実施権登録申請書",
    "Ｒ３２４３５１": "専用実施権登録申請書",
    "Ｒ３２４３５２": "専用実施権登録申請書",
    "Ｒ３２４３５３": "専用実施権登録申請書",
    "Ｒ３２４３５４": "専用実施権登録申請書",
    "Ｒ３２４３５５": "専用実施権登録申請書",
    "Ｒ３２４３５６": "専用実施権登録申請書",
    "Ｒ３２４３５７": "専用実施権登録申請書",
    "Ｒ３２４３５８": "専用実施権登録申請書",
    "Ｒ３２４３５９": "専用実施権登録申請書",
    "Ｒ３２４３６０": "専用実施権登録申請書",
    "Ｒ３２４３６１": "専用実施権登録申請書",
    "Ｒ３２４３９９": "質権登録申請書",
    "Ｒ３２４５０１": "質権登録申請書",
    "Ｒ３２４５０２": "質権登録申請書",
    "Ｒ３２４５０３": "質権登録申請書",
    "Ｒ３２４５０４": "質権登録申請書",
    "Ｒ３２４５０５": "質権登録申請書",
    "Ｒ３２４５０６": "質権登録申請書",
    "Ｒ３２４５０７": "質権登録申請書",
    "Ｒ３２４５０８": "質権登録申請書",
    "Ｒ３２４５０９": "質権登録申請書",
    "Ｒ３２４５１０": "質権登録申請書",
    "Ｒ３２４５１１": "質権登録申請書",
    "Ｒ３２４５１２": "質権登録申請書",
    "Ｒ３２４５１３": "質権登録申請書",
    "Ｒ３２４５１４": "質権登録申請書",
    "Ｒ３２４５３１": "質権登録申請書",
    "Ｒ３２４５３２": "質権登録申請書",
    "Ｒ３２４５３３": "質権登録申請書",
    "Ｒ３２４５３４": "表示変更登録申請書 （国籍）",
    "Ｒ３２４５９９": "表示変更登録申請書",
    "Ｒ３２４６１１": "表示変更登録申請書",
    "Ｒ３２４６１２": "表示変更登録申請書",
    "Ｒ３２４６１３": "表示変更登録申請書",
    "Ｒ３２４６１４": "表示変更登録申請書",
    "Ｒ３２４６３１": "表示変更登録申請書",
    "Ｒ３２４６３２": "表示変更登録申請書",
    "Ｒ３２４６３３": "表示変更登録申請書",
    "Ｒ３２４６３４": "表示変更登録申請書",
    "Ｒ３２４６９９": "表示更正登録申請書",
    "Ｒ３２４８０３": "表示更正登録申請書",
    "Ｒ３２４８０４": "表示更正登録申請書",
    "Ｒ３２４８０５": "表示更正登録申請書",
    "Ｒ３２４８９９": "抹消登録申請書",
    "Ｒ３２４Ｄ９９": "回復登録申請書",
    "Ｒ３２４Ｆ０１": "回復登録申請書",
    "Ｒ３２４Ｆ０２": "回復登録申請書",
    "Ｒ３２４Ｆ９９": "嘱託書",
    "Ｒ３２４Ｇ０１": "嘱託書",
    "Ｒ３２４Ｇ９９": "仮登録申請書",
    "Ｒ３２４Ｈ９９": "仮登録申請書",
    "Ｒ３２４Ｉ９９": "仮登録申請書",
    "Ｒ３２４Ｊ０１": "仮登録申請書",
    "Ｒ３２４Ｊ９９": "仮登録申請書",
    "Ｒ３２４Ｋ９９": "仮登録申請書",
    "Ｒ３２４Ｌ９９": "仮登録申請書",
    "Ｒ３２４Ｚ０２": "信託登録申請書",
    "Ｒ３２４Ｚ０３": "信託抹消登録申請書",
    "Ｒ３２５２０１": "信託抹消登録申請書",
    "Ｒ３２５２０２": "信託抹消登録申請書",
    "Ｒ３２５２１１": "信託抹消登録申請書",
    "Ｒ３２５２１２": "信託抹消登録申請書",
    "Ｒ３２５２１３": "信託抹消登録申請書",
    "Ｒ３２５２１４": "信託抹消登録申請書",
    "Ｒ３２５２１５": "信託抹消登録申請書",
    "Ｒ３２５２１６": "信託抹消登録申請書",
    "Ｒ３２５２１７": "信託抹消登録申請書",
    "Ｒ３２５２１８": "信託抹消登録申請書",
    "Ｒ３２５２１９": "信託抹消登録申請書",
    "Ｒ３２５２２１": "信託抹消登録申請書",
    "Ｒ３２５２２２": "信託抹消登録申請書",
    "Ｒ３２５２２３": "信託抹消登録申請書",
    "Ｒ３２５２２５": "信託抹消登録申請書",
    "Ｒ３２５２２６": "信託抹消登録申請書",
    "Ｒ３２５２３０": "信託抹消登録申請書",
    "Ｒ３２５２３１": "信託抹消登録申請書",
    "Ｒ３２５２３２": "信託抹消登録申請書",
    "Ｒ３２５２３３": "信託抹消登録申請書",
    "Ｒ３２５２３４": "信託抹消登録申請書",
    "Ｒ３２５２３５": "信託抹消登録申請書",
    "Ｒ３２５２３６": "信託抹消登録申請書",
    "Ｒ３２５２３７": "信託抹消登録申請書",
    "Ｒ３２５２３８": "信託抹消登録申請書",
    "Ｒ３２５２３９": "信託抹消登録申請書",
    "Ｒ３２５２４０": "信託抹消登録申請書",
    "Ｒ３２５２９９": "通常実施権登録申請書",
    "Ｒ３２５３０３": "通常実施権登録申請書",
    "Ｒ３２５３０４": "通常実施権登録申請書",
    "Ｒ３２５３１１": "通常実施権登録申請書",
    "Ｒ３２５３１２": "通常実施権登録申請書",
    "Ｒ３２５３１３": "通常実施権登録申請書",
    "Ｒ３２５３１４": "通常実施権登録申請書",
    "Ｒ３２５３１５": "通常実施権登録申請書",
    "Ｒ３２５３１６": "通常実施権登録申請書",
    "Ｒ３２５３１７": "通常実施権登録申請書",
    "Ｒ３２５３１８": "通常実施権登録申請書",
    "Ｒ３２５３１９": "通常実施権登録申請書",
    "Ｒ３２５３２１": "通常実施権登録申請書",
    "Ｒ３２５３２５": "通常実施権登録申請書",
    "Ｒ３２５３２６": "通常実施権登録申請書",
    "Ｒ３２５３２７": "通常実施権登録申請書",
    "Ｒ３２５３２８": "通常実施権登録申請書",
    "Ｒ３２５３３０": "通常実施権登録申請書",
    "Ｒ３２５３３１": "通常実施権登録申請書",
    "Ｒ３２５３３２": "通常実施権登録申請書",
    "Ｒ３２５３３３": "通常実施権登録申請書",
    "Ｒ３２５３３４": "通常実施権登録申請書",
    "Ｒ３２５３３５": "通常実施権登録申請書",
    "Ｒ３２５３３６": "通常実施権登録申請書",
    "Ｒ３２５３３７": "通常実施権登録申請書",
    "Ｒ３２５３３８": "通常実施権登録申請書",
    "Ｒ３２５３３９": "通常実施権登録申請書",
    "Ｒ３２５３４０": "通常実施権登録申請書",
    "Ｒ３２５３４１": "通常実施権登録申請書",
    "Ｒ３２５３４３": "通常実施権登録申請書",
    "Ｒ３２５３４４": "通常実施権登録申請書",
    "Ｒ３２５３４５": "通常実施権登録申請書",
    "Ｒ３２５３４７": "通常実施権登録申請書",
    "Ｒ３２５３４８": "通常実施権登録申請書",
    "Ｒ３２５３５０": "通常実施権登録申請書",
    "Ｒ３２５３５１": "通常実施権登録申請書",
    "Ｒ３２５３５２": "通常実施権登録申請書",
    "Ｒ３２５３５３": "通常実施権登録申請書",
    "Ｒ３２５３５４": "通常実施権登録申請書",
    "Ｒ３２５３５５": "通常実施権登録申請書",
    "Ｒ３２５３５６": "通常実施権登録申請書",
    "Ｒ３２５３５７": "通常実施権登録申請書",
    "Ｒ３２５３５８": "通常実施権登録申請書",
    "Ｒ３２５３５９": "通常実施権登録申請書",
    "Ｒ３２５３６０": "通常実施権登録申請書",
    "Ｒ３２５３６１": "通常実施権登録申請書",
    "Ｒ３２５３９９": "質権登録申請書",
    "Ｒ３２５５０１": "質権登録申請書",
    "Ｒ３２５５０２": "質権登録申請書",
    "Ｒ３２５５０３": "質権登録申請書",
    "Ｒ３２５５０４": "質権登録申請書",
    "Ｒ３２５５０５": "質権登録申請書",
    "Ｒ３２５５０６": "質権登録申請書",
    "Ｒ３２５５０７": "質権登録申請書",
    "Ｒ３２５５０８": "質権登録申請書",
    "Ｒ３２５５０９": "質権登録申請書",
    "Ｒ３２５５１０": "質権登録申請書",
    "Ｒ３２５５１１": "質権登録申請書",
    "Ｒ３２５５１２": "質権登録申請書",
    "Ｒ３２５５１３": "質権登録申請書",
    "Ｒ３２５５１４": "質権登録申請書",
    "Ｒ３２５５３１": "質権登録申請書",
    "Ｒ３２５５３２": "質権登録申請書",
    "Ｒ３２５５３３": "質権登録申請書",
    "Ｒ３２５５３４": "質権登録申請書",
    "Ｒ３２５５９９": "表示変更登録申請書",
    "Ｒ３２５６１１": "表示変更登録申請書",
    "Ｒ３２５６１２": "表示変更登録申請書",
    "Ｒ３２５６１３": "表示変更登録申請書",
    "Ｒ３２５６１４": "表示変更登録申請書",
    "Ｒ３２５６３１": "表示変更登録申請書",
    "Ｒ３２５６３２": "表示変更登録申請書",
    "Ｒ３２５６３３": "表示変更登録申請書",
    "Ｒ３２５６３４": "表示変更登録申請書",
    "Ｒ３２５６９９": "表示更正登録申請書",
    "Ｒ３２５８０３": "表示更正登録申請書",
    "Ｒ３２５８０４": "表示更正登録申請書",
    "Ｒ３２５８０５": "表示更正登録申請書",
    "Ｒ３２５８９９": "抹消登録申請書",
    "Ｒ３２５Ｄ９９": "回復登録申請書",
    "Ｒ３２５Ｆ０１": "回復登録申請書",
    "Ｒ３２５Ｆ０２": "回復登録申請書",
    "Ｒ３２５Ｆ９９": "嘱託書",
    "Ｒ３２５Ｇ０１": "嘱託書",
    "Ｒ３２５Ｇ９９": "仮登録申請書",
    "Ｒ３２５Ｈ９９": "仮登録申請書",
    "Ｒ３２５Ｉ９９": "仮登録申請書",
    "Ｒ３２５Ｊ０１": "仮登録申請書",
    "Ｒ３２５Ｊ９９": "仮登録申請書",
    "Ｒ３２５Ｋ９９": "仮登録申請書",
    "Ｒ３２５Ｌ９９": "仮登録申請書",
    "Ｒ３２５Ｚ０２": "信託登録申請書",
    "Ｒ３２５Ｚ０３": "信託抹消登録申請書",
    "Ｒ３２６３０３": "信託抹消登録申請書",
    "Ｒ３２６３０４": "信託抹消登録申請書",
    "Ｒ３２６３１１": "信託抹消登録申請書",
    "Ｒ３２６３１２": "信託抹消登録申請書",
    "Ｒ３２６３１３": "信託抹消登録申請書",
    "Ｒ３２６３１４": "信託抹消登録申請書",
    "Ｒ３２６３１５": "信託抹消登録申請書",
    "Ｒ３２６３１６": "信託抹消登録申請書",
    "Ｒ３２６３１７": "信託抹消登録申請書",
    "Ｒ３２６３１８": "信託抹消登録申請書",
    "Ｒ３２６３１９": "信託抹消登録申請書",
    "Ｒ３２６３２１": "信託抹消登録申請書",
    "Ｒ３２６３２５": "信託抹消登録申請書",
    "Ｒ３２６３２６": "信託抹消登録申請書",
    "Ｒ３２６３２７": "信託抹消登録申請書",
    "Ｒ３２６３２８": "信託抹消登録申請書",
    "Ｒ３２６３３０": "信託抹消登録申請書",
    "Ｒ３２６３３１": "信託抹消登録申請書",
    "Ｒ３２６３３２": "信託抹消登録申請書",
    "Ｒ３２６３３３": "信託抹消登録申請書",
    "Ｒ３２６３３４": "信託抹消登録申請書",
    "Ｒ３２６３３５": "信託抹消登録申請書",
    "Ｒ３２６３３６": "信託抹消登録申請書",
    "Ｒ３２６３３７": "信託抹消登録申請書",
    "Ｒ３２６３３８": "信託抹消登録申請書",
    "Ｒ３２６３３９": "信託抹消登録申請書",
    "Ｒ３２６３４０": "信託抹消登録申請書",
    "Ｒ３２６３４１": "信託抹消登録申請書",
    "Ｒ３２６３４３": "信託抹消登録申請書",
    "Ｒ３２６３４４": "信託抹消登録申請書",
    "Ｒ３２６３４５": "信託抹消登録申請書",
    "Ｒ３２６３４７": "信託抹消登録申請書",
    "Ｒ３２６３４８": "信託抹消登録申請書",
    "Ｒ３２６３５０": "信託抹消登録申請書",
    "Ｒ３２６３５１": "信託抹消登録申請書",
    "Ｒ３２６３５２": "信託抹消登録申請書",
    "Ｒ３２６３５３": "信託抹消登録申請書",
    "Ｒ３２６３５４": "信託抹消登録申請書",
    "Ｒ３２６３５５": "信託抹消登録申請書",
    "Ｒ３２６３５６": "信託抹消登録申請書",
    "Ｒ３２６３５７": "信託抹消登録申請書",
    "Ｒ３２６３５８": "信託抹消登録申請書",
    "Ｒ３２６３５９": "信託抹消登録申請書",
    "Ｒ３２６３６０": "信託抹消登録申請書",
    "Ｒ３２６３６１": "信託抹消登録申請書",
    "Ｒ３２６３９９": "質権登録申請書",
    "Ｒ３２６５０１": "質権登録申請書",
    "Ｒ３２６５０２": "質権登録申請書",
    "Ｒ３２６５０３": "質権登録申請書",
    "Ｒ３２６５０４": "質権登録申請書",
    "Ｒ３２６５０５": "質権登録申請書",
    "Ｒ３２６５０６": "質権登録申請書",
    "Ｒ３２６５０７": "質権登録申請書",
    "Ｒ３２６５０８": "質権登録申請書",
    "Ｒ３２６５０９": "質権登録申請書",
    "Ｒ３２６５１０": "質権登録申請書",
    "Ｒ３２６５１１": "質権登録申請書",
    "Ｒ３２６５１２": "質権登録申請書",
    "Ｒ３２６５１３": "質権登録申請書",
    "Ｒ３２６５１４": "質権登録申請書",
    "Ｒ３２６５３１": "質権登録申請書",
    "Ｒ３２６５３２": "質権登録申請書",
    "Ｒ３２６５３３": "質権登録申請書",
    "Ｒ３２６５３４": "質権登録申請書",
    "Ｒ３２６５９９": "表示変更登録申請書",
    "Ｒ３２６６１１": "表示変更登録申請書",
    "Ｒ３２６６１２": "表示変更登録申請書",
    "Ｒ３２６６１３": "表示変更登録申請書",
    "Ｒ３２６６１４": "表示変更登録申請書",
    "Ｒ３２６６３１": "表示変更登録申請書",
    "Ｒ３２６６３２": "表示変更登録申請書",
    "Ｒ３２６６３３": "表示変更登録申請書",
    "Ｒ３２６６３４": "表示変更登録申請書",
    "Ｒ３２６６９９": "表示更正登録申請書",
    "Ｒ３２６８０３": "表示更正登録申請書",
    "Ｒ３２６８０４": "表示更正登録申請書",
    "Ｒ３２６８０５": "表示更正登録申請書",
    "Ｒ３２６８９９": "抹消登録申請書",
    "Ｒ３２６Ｄ９９": "回復登録申請書",
    "Ｒ３２６Ｆ０１": "回復登録申請書",
    "Ｒ３２６Ｆ０２": "回復登録申請書",
    "Ｒ３２６Ｆ９９": "嘱託書",
    "Ｒ３２６Ｇ０１": "嘱託書",
    "Ｒ３２６Ｇ９９": "仮登録申請書",
    "Ｒ３２６Ｈ９９": "仮登録申請書",
    "Ｒ３２６Ｉ９９": "仮登録申請書",
    "Ｒ３２６Ｊ０１": "仮登録申請書",
    "Ｒ３２６Ｊ９９": "仮登録申請書",
    "Ｒ３２６Ｋ９９": "仮登録申請書",
    "Ｒ３２６Ｌ９９": "仮登録申請書",
    "Ｒ３２６Ｚ０２": "信託登録申請書",
    "Ｒ３２６Ｚ０３": "信託抹消登録申請書",
    "Ｒ３２７４０１": "信託抹消登録申請書",
    "Ｒ３２７４０２": "信託抹消登録申請書",
    "Ｒ３２７４１１": "信託抹消登録申請書",
    "Ｒ３２７４２１": "信託抹消登録申請書",
    "Ｒ３２７４２２": "信託抹消登録申請書",
    "Ｒ３２７４９９": "管理人登録申請書",
    "Ｒ３２７５０１": "管理人登録申請書",
    "Ｒ３２７５０２": "管理人登録申請書",
    "Ｒ３２７５０３": "管理人登録申請書",
    "Ｒ３２７５０４": "管理人登録申請書",
    "Ｒ３２７５０５": "管理人登録申請書",
    "Ｒ３２７５０６": "管理人登録申請書",
    "Ｒ３２７５０７": "管理人登録申請書",
    "Ｒ３２７５０８": "管理人登録申請書",
    "Ｒ３２７５０９": "管理人登録申請書",
    "Ｒ３２７５１０": "管理人登録申請書",
    "Ｒ３２７５１１": "管理人登録申請書",
    "Ｒ３２７５１２": "管理人登録申請書",
    "Ｒ３２７５１３": "管理人登録申請書",
    "Ｒ３２７５１４": "管理人登録申請書",
    "Ｒ３２７５３１": "管理人登録申請書",
    "Ｒ３２７５３２": "管理人登録申請書",
    "Ｒ３２７５３３": "管理人登録申請書",
    "Ｒ３２７５３４": "管理人登録申請書",
    "Ｒ３２７５９９": "表示変更登録申請書",
    "Ｒ３２７６１１": "表示変更登録申請書",
    "Ｒ３２７６１２": "表示変更登録申請書",
    "Ｒ３２７６１３": "表示変更登録申請書",
    "Ｒ３２７６１４": "表示変更登録申請書",
    "Ｒ３２７６３１": "表示変更登録申請書",
    "Ｒ３２７６３２": "表示変更登録申請書",
    "Ｒ３２７６３３": "表示変更登録申請書",
    "Ｒ３２７６３４": "表示変更登録申請書",
    "Ｒ３２７６９９": "表示更正登録申請書",
    "Ｒ３２ＸＤ９９": "回復登録申請書",
    "Ｒ３３１８０１": "回復登録申請書",
    "Ｒ３３１８９９": "抹消登録申請書",
    "Ｒ３３１Ｄ９９": "回復登録申請書",
    "Ｒ３３１Ｇ９９": "仮登録申請書",
    "Ｒ３３１Ｈ９９": "仮登録申請書",
    "Ｒ３３１Ｌ９９": "仮登録申請書",
    "Ｒ３３２８０２": "本権一部抹消登録申請書 （一部放棄）",
    "Ｒ３３２８９９": "抹消登録申請書",
    "Ｒ３３２Ｄ９９": "回復登録申請書",
    "Ｒ３３２Ｆ９９": "嘱託書",
    "Ｒ３３２Ｇ９９": "仮登録申請書",
    "Ｒ３３２Ｈ９９": "嘱託書 （予告登録）",
    "Ｒ３３２Ｉ９９": "通知書 （工場抵当）",
    "Ｒ３３２Ｊ９９": "嘱託書 （会社更正）",
    "Ｒ３３２Ｋ９９": "嘱託書 （破産）",
    "Ｒ３３２Ｌ９９": "嘱託書 （和議）",
    "Ｒ３３３１１１": "本権移転登録申請書",
    "Ｒ３３３１１２": "本権移転登録申請書",
    "Ｒ３３３１１３": "本権移転登録申請書",
    "Ｒ３３３１１４": "本権移転登録申請書",
    "Ｒ３３３１１５": "本権移転登録申請書",
    "Ｒ３３３１１６": "本権移転登録申請書",
    "Ｒ３３３１１７": "本権移転登録申請書",
    "Ｒ３３３１１８": "本権移転登録申請書",
    "Ｒ３３３１１９": "本権移転登録申請書",
    "Ｒ３３３１２１": "本権移転登録申請書",
    "Ｒ３３３１２２": "本権移転登録申請書",
    "Ｒ３３３１３１": "本権移転登録申請書",
    "Ｒ３３３１３２": "本権移転登録申請書",
    "Ｒ３３３１３３": "本権移転登録申請書",
    "Ｒ３３３１３４": "本権移転登録申請書",
    "Ｒ３３３１３５": "本権移転登録申請書",
    "Ｒ３３３１３６": "本権移転登録申請書",
    "Ｒ３３３１３７": "本権移転登録申請書",
    "Ｒ３３３１３８": "本権移転登録申請書",
    "Ｒ３３３１４１": "本権共有の特約等の事項の変更登録申請書",
    "Ｒ３３３１９９": "本権移転登録申請書",
    "Ｒ３３３５０１": "本権移転登録申請書",
    "Ｒ３３３５０２": "本権移転登録申請書",
    "Ｒ３３３５０３": "本権移転登録申請書",
    "Ｒ３３３５０４": "本権移転登録申請書",
    "Ｒ３３３５０５": "本権移転登録申請書",
    "Ｒ３３３５０６": "本権移転登録申請書",
    "Ｒ３３３５０７": "本権移転登録申請書",
    "Ｒ３３３５０８": "本権移転登録申請書",
    "Ｒ３３３５０９": "本権移転登録申請書",
    "Ｒ３３３５１０": "本権移転登録申請書",
    "Ｒ３３３５１１": "本権移転登録申請書",
    "Ｒ３３３５１２": "本権移転登録申請書",
    "Ｒ３３３５１３": "本権移転登録申請書",
    "Ｒ３３３５１４": "本権移転登録申請書",
    "Ｒ３３３５３１": "本権移転登録申請書",
    "Ｒ３３３５３２": "本権移転登録申請書",
    "Ｒ３３３５３３": "本権移転登録申請書",
    "Ｒ３３３５３４": "本権移転登録申請書",
    "Ｒ３３３５９９": "表示変更登録申請書",
    "Ｒ３３３６１１": "表示変更登録申請書",
    "Ｒ３３３６１２": "表示変更登録申請書",
    "Ｒ３３３６１３": "表示変更登録申請書",
    "Ｒ３３３６１４": "表示変更登録申請書",
    "Ｒ３３３６３１": "表示変更登録申請書",
    "Ｒ３３３６３２": "表示変更登録申請書",
    "Ｒ３３３６３３": "表示変更登録申請書",
    "Ｒ３３３６３４": "表示変更登録申請書",
    "Ｒ３３３６９９": "表示更正登録申請書",
    "Ｒ３３３８０３": "表示更正登録申請書",
    "Ｒ３３３８０５": "表示更正登録申請書",
    "Ｒ３３３８９９": "抹消登録申請書",
    "Ｒ３３３Ｄ９９": "回復登録申請書",
    "Ｒ３３３Ｆ０１": "回復登録申請書",
    "Ｒ３３３Ｆ０２": "回復登録申請書",
    "Ｒ３３３Ｆ９９": "嘱託書",
    "Ｒ３３３Ｇ０１": "嘱託書",
    "Ｒ３３３Ｇ９９": "仮登録申請書",
    "Ｒ３３３Ｈ９９": "仮登録申請書",
    "Ｒ３３３Ｉ９９": "仮登録申請書",
    "Ｒ３３３Ｊ０１": "仮登録申請書",
    "Ｒ３３３Ｊ９９": "仮登録申請書",
    "Ｒ３３３Ｋ９９": "仮登録申請書",
    "Ｒ３３３Ｌ９９": "仮登録申請書",
    "Ｒ３３３Ｚ０２": "信託登録申請書",
    "Ｒ３３３Ｚ０３": "信託抹消登録申請書",
    "Ｒ３３４２０１": "信託抹消登録申請書",
    "Ｒ３３４２０２": "信託抹消登録申請書",
    "Ｒ３３４２１１": "信託抹消登録申請書",
    "Ｒ３３４２１２": "信託抹消登録申請書",
    "Ｒ３３４２１３": "信託抹消登録申請書",
    "Ｒ３３４２１４": "信託抹消登録申請書",
    "Ｒ３３４２１５": "信託抹消登録申請書",
    "Ｒ３３４２１６": "信託抹消登録申請書",
    "Ｒ３３４２１７": "信託抹消登録申請書",
    "Ｒ３３４２１８": "信託抹消登録申請書",
    "Ｒ３３４２１９": "信託抹消登録申請書",
    "Ｒ３３４２２１": "信託抹消登録申請書",
    "Ｒ３３４２２２": "信託抹消登録申請書",
    "Ｒ３３４２２３": "信託抹消登録申請書",
    "Ｒ３３４２２５": "信託抹消登録申請書",
    "Ｒ３３４２２６": "信託抹消登録申請書",
    "Ｒ３３４２３０": "信託抹消登録申請書",
    "Ｒ３３４２３１": "信託抹消登録申請書",
    "Ｒ３３４２３２": "信託抹消登録申請書",
    "Ｒ３３４２３３": "信託抹消登録申請書",
    "Ｒ３３４２３４": "信託抹消登録申請書",
    "Ｒ３３４２３５": "信託抹消登録申請書",
    "Ｒ３３４２３６": "信託抹消登録申請書",
    "Ｒ３３４２３７": "信託抹消登録申請書",
    "Ｒ３３４２３８": "信託抹消登録申請書",
    "Ｒ３３４２３９": "信託抹消登録申請書",
    "Ｒ３３４２４０": "信託抹消登録申請書",
    "Ｒ３３４２９９": "専用実施権登録申請書",
    "Ｒ３３４３０３": "専用実施権登録申請書",
    "Ｒ３３４３０４": "専用実施権登録申請書",
    "Ｒ３３４３１１": "専用実施権登録申請書",
    "Ｒ３３４３１２": "専用実施権登録申請書",
    "Ｒ３３４３１３": "専用実施権登録申請書",
    "Ｒ３３４３１４": "専用実施権登録申請書",
    "Ｒ３３４３１５": "専用実施権登録申請書",
    "Ｒ３３４３１６": "専用実施権登録申請書",
    "Ｒ３３４３１７": "専用実施権登録申請書",
    "Ｒ３３４３１８": "専用実施権登録申請書",
    "Ｒ３３４３１９": "専用実施権登録申請書",
    "Ｒ３３４３２１": "専用実施権登録申請書",
    "Ｒ３３４３２５": "専用実施権登録申請書",
    "Ｒ３３４３２６": "専用実施権登録申請書",
    "Ｒ３３４３２７": "専用実施権登録申請書",
    "Ｒ３３４３２８": "専用実施権登録申請書",
    "Ｒ３３４３３０": "専用実施権登録申請書",
    "Ｒ３３４３３１": "専用実施権登録申請書",
    "Ｒ３３４３３２": "専用実施権登録申請書",
    "Ｒ３３４３３３": "専用実施権登録申請書",
    "Ｒ３３４３３４": "専用実施権登録申請書",
    "Ｒ３３４３３５": "専用実施権登録申請書",
    "Ｒ３３４３３６": "専用実施権登録申請書",
    "Ｒ３３４３３７": "専用実施権登録申請書",
    "Ｒ３３４３３８": "専用実施権登録申請書",
    "Ｒ３３４３３９": "専用実施権登録申請書",
    "Ｒ３３４３４０": "専用実施権登録申請書",
    "Ｒ３３４３４１": "専用実施権登録申請書",
    "Ｒ３３４３４３": "専用実施権登録申請書",
    "Ｒ３３４３４４": "専用実施権登録申請書",
    "Ｒ３３４３４５": "専用実施権登録申請書",
    "Ｒ３３４３４７": "専用実施権登録申請書",
    "Ｒ３３４３４８": "専用実施権登録申請書",
    "Ｒ３３４３５０": "専用実施権登録申請書",
    "Ｒ３３４３５１": "専用実施権登録申請書",
    "Ｒ３３４３５２": "専用実施権登録申請書",
    "Ｒ３３４３５３": "専用実施権登録申請書",
    "Ｒ３３４３５４": "専用実施権登録申請書",
    "Ｒ３３４３５５": "専用実施権登録申請書",
    "Ｒ３３４３５６": "専用実施権登録申請書",
    "Ｒ３３４３５７": "専用実施権登録申請書",
    "Ｒ３３４３５８": "専用実施権登録申請書",
    "Ｒ３３４３５９": "専用実施権登録申請書",
    "Ｒ３３４３６０": "専用実施権登録申請書",
    "Ｒ３３４３６１": "専用実施権登録申請書",
    "Ｒ３３４３９９": "質権登録申請書",
    "Ｒ３３４５０１": "質権登録申請書",
    "Ｒ３３４５０２": "質権登録申請書",
    "Ｒ３３４５０３": "質権登録申請書",
    "Ｒ３３４５０４": "質権登録申請書",
    "Ｒ３３４５０５": "質権登録申請書",
    "Ｒ３３４５０６": "質権登録申請書",
    "Ｒ３３４５０７": "質権登録申請書",
    "Ｒ３３４５０８": "質権登録申請書",
    "Ｒ３３４５０９": "質権登録申請書",
    "Ｒ３３４５１０": "質権登録申請書",
    "Ｒ３３４５１１": "質権登録申請書",
    "Ｒ３３４５１２": "質権登録申請書",
    "Ｒ３３４５１３": "質権登録申請書",
    "Ｒ３３４５１４": "質権登録申請書",
    "Ｒ３３４５３１": "質権登録申請書",
    "Ｒ３３４５３２": "質権登録申請書",
    "Ｒ３３４５３３": "質権登録申請書",
    "Ｒ３３４５３４": "質権登録申請書",
    "Ｒ３３４５９９": "表示変更登録申請書",
    "Ｒ３３４６１１": "表示変更登録申請書",
    "Ｒ３３４６１２": "表示変更登録申請書",
    "Ｒ３３４６１３": "表示変更登録申請書",
    "Ｒ３３４６１４": "表示変更登録申請書",
    "Ｒ３３４６３１": "表示変更登録申請書",
    "Ｒ３３４６３２": "表示変更登録申請書",
    "Ｒ３３４６３３": "表示変更登録申請書",
    "Ｒ３３４６３４": "表示変更登録申請書",
    "Ｒ３３４６９９": "表示更正登録申請書",
    "Ｒ３３４８０３": "表示更正登録申請書",
    "Ｒ３３４８０４": "表示更正登録申請書",
    "Ｒ３３４８０５": "表示更正登録申請書",
    "Ｒ３３４８９９": "抹消登録申請書",
    "Ｒ３３４Ｄ９９": "回復登録申請書",
    "Ｒ３３４Ｆ０１": "回復登録申請書",
    "Ｒ３３４Ｆ０２": "回復登録申請書",
    "Ｒ３３４Ｆ９９": "嘱託書",
    "Ｒ３３４Ｇ０１": "嘱託書",
    "Ｒ３３４Ｇ９９": "仮登録申請書",
    "Ｒ３３４Ｈ９９": "仮登録申請書",
    "Ｒ３３４Ｉ９９": "仮登録申請書",
    "Ｒ３３４Ｊ０１": "仮登録申請書",
    "Ｒ３３４Ｊ９９": "仮登録申請書",
    "Ｒ３３４Ｋ９９": "仮登録申請書",
    "Ｒ３３４Ｌ９９": "仮登録申請書",
    "Ｒ３３４Ｚ０２": "信託登録申請書",
    "Ｒ３３４Ｚ０３": "信託抹消登録申請書",
    "Ｒ３３５２０１": "信託抹消登録申請書",
    "Ｒ３３５２０２": "信託抹消登録申請書",
    "Ｒ３３５２１１": "信託抹消登録申請書",
    "Ｒ３３５２１２": "信託抹消登録申請書",
    "Ｒ３３５２１３": "信託抹消登録申請書",
    "Ｒ３３５２１４": "信託抹消登録申請書",
    "Ｒ３３５２１５": "信託抹消登録申請書",
    "Ｒ３３５２１６": "信託抹消登録申請書",
    "Ｒ３３５２１７": "信託抹消登録申請書",
    "Ｒ３３５２１８": "信託抹消登録申請書",
    "Ｒ３３５２１９": "信託抹消登録申請書",
    "Ｒ３３５２２１": "信託抹消登録申請書",
    "Ｒ３３５２２２": "信託抹消登録申請書",
    "Ｒ３３５２２３": "信託抹消登録申請書",
    "Ｒ３３５２２５": "信託抹消登録申請書",
    "Ｒ３３５２２６": "信託抹消登録申請書",
    "Ｒ３３５２３０": "信託抹消登録申請書",
    "Ｒ３３５２３１": "信託抹消登録申請書",
    "Ｒ３３５２３２": "信託抹消登録申請書",
    "Ｒ３３５２３３": "信託抹消登録申請書",
    "Ｒ３３５２３４": "信託抹消登録申請書",
    "Ｒ３３５２３５": "信託抹消登録申請書",
    "Ｒ３３５２３６": "信託抹消登録申請書",
    "Ｒ３３５２３７": "信託抹消登録申請書",
    "Ｒ３３５２３８": "信託抹消登録申請書",
    "Ｒ３３５２３９": "信託抹消登録申請書",
    "Ｒ３３５２４０": "信託抹消登録申請書",
    "Ｒ３３５２９９": "通常実施権登録申請書",
    "Ｒ３３５３０３": "通常実施権登録申請書",
    "Ｒ３３５３０４": "通常実施権登録申請書",
    "Ｒ３３５３１１": "通常実施権登録申請書",
    "Ｒ３３５３１２": "通常実施権登録申請書",
    "Ｒ３３５３１３": "通常実施権登録申請書",
    "Ｒ３３５３１４": "通常実施権登録申請書",
    "Ｒ３３５３１５": "通常実施権登録申請書",
    "Ｒ３３５３１６": "通常実施権登録申請書",
    "Ｒ３３５３１７": "通常実施権登録申請書",
    "Ｒ３３５３１８": "通常実施権登録申請書",
    "Ｒ３３５３１９": "通常実施権登録申請書",
    "Ｒ３３５３２１": "通常実施権登録申請書",
    "Ｒ３３５３２５": "通常実施権登録申請書",
    "Ｒ３３５３２６": "通常実施権登録申請書",
    "Ｒ３３５３２７": "通常実施権登録申請書",
    "Ｒ３３５３２８": "通常実施権登録申請書",
    "Ｒ３３５３３０": "通常実施権登録申請書",
    "Ｒ３３５３３１": "通常実施権登録申請書",
    "Ｒ３３５３３２": "通常実施権登録申請書",
    "Ｒ３３５３３３": "通常実施権登録申請書",
    "Ｒ３３５３３４": "通常実施権登録申請書",
    "Ｒ３３５３３５": "通常実施権登録申請書",
    "Ｒ３３５３３６": "通常実施権登録申請書",
    "Ｒ３３５３３７": "通常実施権登録申請書",
    "Ｒ３３５３３８": "通常実施権登録申請書",
    "Ｒ３３５３３９": "通常実施権登録申請書",
    "Ｒ３３５３４０": "通常実施権登録申請書",
    "Ｒ３３５３４１": "通常実施権登録申請書",
    "Ｒ３３５３４３": "通常実施権登録申請書",
    "Ｒ３３５３４４": "通常実施権登録申請書",
    "Ｒ３３５３４５": "通常実施権登録申請書",
    "Ｒ３３５３４７": "通常実施権登録申請書",
    "Ｒ３３５３４８": "通常実施権登録申請書",
    "Ｒ３３５３５０": "通常実施権登録申請書",
    "Ｒ３３５３５１": "通常実施権登録申請書",
    "Ｒ３３５３５２": "通常実施権登録申請書",
    "Ｒ３３５３５３": "通常実施権登録申請書",
    "Ｒ３３５３５４": "通常実施権登録申請書",
    "Ｒ３３５３５５": "通常実施権登録申請書",
    "Ｒ３３５３５６": "通常実施権登録申請書",
    "Ｒ３３５３５７": "通常実施権登録申請書",
    "Ｒ３３５３５８": "通常実施権登録申請書",
    "Ｒ３３５３５９": "通常実施権登録申請書",
    "Ｒ３３５３６０": "通常実施権登録申請書",
    "Ｒ３３５３６１": "通常実施権登録申請書",
    "Ｒ３３５３９９": "質権登録申請書",
    "Ｒ３３５５０１": "質権登録申請書",
    "Ｒ３３５５０２": "質権登録申請書",
    "Ｒ３３５５０３": "質権登録申請書",
    "Ｒ３３５５０４": "質権登録申請書",
    "Ｒ３３５５０５": "質権登録申請書",
    "Ｒ３３５５０６": "質権登録申請書",
    "Ｒ３３５５０７": "質権登録申請書",
    "Ｒ３３５５０８": "質権登録申請書",
    "Ｒ３３５５０９": "質権登録申請書",
    "Ｒ３３５５１０": "質権登録申請書",
    "Ｒ３３５５１１": "質権登録申請書",
    "Ｒ３３５５１２": "質権登録申請書",
    "Ｒ３３５５１３": "質権登録申請書",
    "Ｒ３３５５１４": "質権登録申請書",
    "Ｒ３３５５３１": "質権登録申請書",
    "Ｒ３３５５３２": "質権登録申請書",
    "Ｒ３３５５３３": "質権登録申請書",
    "Ｒ３３５５３４": "質権登録申請書",
    "Ｒ３３５５９９": "表示変更登録申請書",
    "Ｒ３３５６１１": "表示変更登録申請書",
    "Ｒ３３５６１２": "表示変更登録申請書",
    "Ｒ３３５６１３": "表示変更登録申請書",
    "Ｒ３３５６１４": "表示変更登録申請書",
    "Ｒ３３５６３１": "表示変更登録申請書",
    "Ｒ３３５６３２": "表示変更登録申請書",
    "Ｒ３３５６３３": "表示変更登録申請書",
    "Ｒ３３５６３４": "表示変更登録申請書",
    "Ｒ３３５６９９": "表示更正登録申請書",
    "Ｒ３３５８０３": "表示更正登録申請書",
    "Ｒ３３５８０４": "表示更正登録申請書",
    "Ｒ３３５８０５": "表示更正登録申請書",
    "Ｒ３３５８９９": "抹消登録申請書",
    "Ｒ３３５Ｄ９９": "回復登録申請書",
    "Ｒ３３５Ｆ０１": "回復登録申請書",
    "Ｒ３３５Ｆ０２": "回復登録申請書",
    "Ｒ３３５Ｆ９９": "嘱託書",
    "Ｒ３３５Ｇ０１": "嘱託書",
    "Ｒ３３５Ｇ９９": "仮登録申請書",
    "Ｒ３３５Ｈ９９": "仮登録申請書",
    "Ｒ３３５Ｉ９９": "仮登録申請書",
    "Ｒ３３５Ｊ０１": "仮登録申請書",
    "Ｒ３３５Ｊ９９": "仮登録申請書",
    "Ｒ３３５Ｋ９９": "仮登録申請書",
    "Ｒ３３５Ｌ９９": "仮登録申請書",
    "Ｒ３３５Ｚ０２": "信託登録申請書",
    "Ｒ３３５Ｚ０３": "信託抹消登録申請書",
    "Ｒ３３６３０３": "信託抹消登録申請書",
    "Ｒ３３６３０４": "信託抹消登録申請書",
    "Ｒ３３６３１１": "信託抹消登録申請書",
    "Ｒ３３６３１２": "信託抹消登録申請書",
    "Ｒ３３６３１３": "信託抹消登録申請書",
    "Ｒ３３６３１４": "信託抹消登録申請書",
    "Ｒ３３６３１５": "信託抹消登録申請書",
    "Ｒ３３６３１６": "信託抹消登録申請書",
    "Ｒ３３６３１７": "信託抹消登録申請書",
    "Ｒ３３６３１８": "信託抹消登録申請書",
    "Ｒ３３６３１９": "信託抹消登録申請書",
    "Ｒ３３６３２１": "信託抹消登録申請書",
    "Ｒ３３６３２５": "信託抹消登録申請書",
    "Ｒ３３６３２６": "信託抹消登録申請書",
    "Ｒ３３６３２７": "信託抹消登録申請書",
    "Ｒ３３６３２８": "信託抹消登録申請書",
    "Ｒ３３６３３０": "信託抹消登録申請書",
    "Ｒ３３６３３１": "信託抹消登録申請書",
    "Ｒ３３６３３２": "信託抹消登録申請書",
    "Ｒ３３６３３３": "信託抹消登録申請書",
    "Ｒ３３６３３４": "信託抹消登録申請書",
    "Ｒ３３６３３５": "信託抹消登録申請書",
    "Ｒ３３６３３６": "信託抹消登録申請書",
    "Ｒ３３６３３７": "信託抹消登録申請書",
    "Ｒ３３６３３８": "信託抹消登録申請書",
    "Ｒ３３６３３９": "信託抹消登録申請書",
    "Ｒ３３６３４０": "信託抹消登録申請書",
    "Ｒ３３６３４１": "信託抹消登録申請書",
    "Ｒ３３６３４３": "信託抹消登録申請書",
    "Ｒ３３６３４４": "信託抹消登録申請書",
    "Ｒ３３６３４５": "信託抹消登録申請書",
    "Ｒ３３６３４７": "信託抹消登録申請書",
    "Ｒ３３６３４８": "信託抹消登録申請書",
    "Ｒ３３６３５０": "信託抹消登録申請書",
    "Ｒ３３６３５１": "信託抹消登録申請書",
    "Ｒ３３６３５２": "信託抹消登録申請書",
    "Ｒ３３６３５３": "信託抹消登録申請書",
    "Ｒ３３６３５４": "信託抹消登録申請書",
    "Ｒ３３６３５５": "信託抹消登録申請書",
    "Ｒ３３６３５６": "信託抹消登録申請書",
    "Ｒ３３６３５７": "信託抹消登録申請書",
    "Ｒ３３６３５８": "信託抹消登録申請書",
    "Ｒ３３６３５９": "信託抹消登録申請書",
    "Ｒ３３６３６０": "信託抹消登録申請書",
    "Ｒ３３６３６１": "信託抹消登録申請書",
    "Ｒ３３６３９９": "質権登録申請書",
    "Ｒ３３６５０１": "質権登録申請書",
    "Ｒ３３６５０２": "質権登録申請書",
    "Ｒ３３６５０３": "質権登録申請書",
    "Ｒ３３６５０４": "質権登録申請書",
    "Ｒ３３６５０５": "質権登録申請書",
    "Ｒ３３６５０６": "質権登録申請書",
    "Ｒ３３６５０７": "質権登録申請書",
    "Ｒ３３６５０８": "質権登録申請書",
    "Ｒ３３６５０９": "質権登録申請書",
    "Ｒ３３６５１０": "質権登録申請書",
    "Ｒ３３６５１１": "質権登録申請書",
    "Ｒ３３６５１２": "質権登録申請書",
    "Ｒ３３６５１３": "質権登録申請書",
    "Ｒ３３６５１４": "質権登録申請書",
    "Ｒ３３６５３１": "質権登録申請書",
    "Ｒ３３６５３２": "質権登録申請書",
    "Ｒ３３６５３３": "質権登録申請書",
    "Ｒ３３６５３４": "質権登録申請書",
    "Ｒ３３６５９９": "表示変更登録申請書",
    "Ｒ３３６６１１": "表示変更登録申請書",
    "Ｒ３３６６１２": "表示変更登録申請書",
    "Ｒ３３６６１３": "表示変更登録申請書",
    "Ｒ３３６６１４": "表示変更登録申請書",
    "Ｒ３３６６３１": "表示変更登録申請書",
    "Ｒ３３６６３２": "表示変更登録申請書",
    "Ｒ３３６６３３": "表示変更登録申請書",
    "Ｒ３３６６３４": "表示変更登録申請書",
    "Ｒ３３６６９９": "表示更正登録申請書",
    "Ｒ３３６８０３": "表示更正登録申請書",
    "Ｒ３３６８０４": "表示更正登録申請書",
    "Ｒ３３６８０５": "表示更正登録申請書",
    "Ｒ３３６８９９": "抹消登録申請書",
    "Ｒ３３６Ｄ９９": "回復登録申請書",
    "Ｒ３３６Ｆ０１": "回復登録申請書",
    "Ｒ３３６Ｆ０２": "回復登録申請書",
    "Ｒ３３６Ｆ９９": "嘱託書",
    "Ｒ３３６Ｇ０１": "嘱託書",
    "Ｒ３３６Ｇ９９": "仮登録申請書",
    "Ｒ３３６Ｈ９９": "仮登録申請書",
    "Ｒ３３６Ｉ９９": "仮登録申請書",
    "Ｒ３３６Ｊ０１": "仮登録申請書",
    "Ｒ３３６Ｊ９９": "仮登録申請書",
    "Ｒ３３６Ｋ９９": "仮登録申請書",
    "Ｒ３３６Ｌ９９": "仮登録申請書",
    "Ｒ３３６Ｚ０２": "信託登録申請書",
    "Ｒ３３６Ｚ０３": "信託抹消登録申請書",
    "Ｒ３３７４０１": "信託抹消登録申請書",
    "Ｒ３３７４０２": "信託抹消登録申請書",
    "Ｒ３３７４１１": "信託抹消登録申請書",
    "Ｒ３３７４２１": "信託抹消登録申請書",
    "Ｒ３３７４２２": "信託抹消登録申請書",
    "Ｒ３３７４９９": "管理人登録申請書",
    "Ｒ３３７５０１": "管理人登録申請書",
    "Ｒ３３７５０２": "管理人登録申請書",
    "Ｒ３３７５０３": "管理人登録申請書",
    "Ｒ３３７５０４": "管理人登録申請書",
    "Ｒ３３７５０５": "管理人登録申請書",
    "Ｒ３３７５０６": "管理人登録申請書",
    "Ｒ３３７５０７": "管理人登録申請書",
    "Ｒ３３７５０８": "管理人登録申請書",
    "Ｒ３３７５０９": "管理人登録申請書",
    "Ｒ３３７５１０": "管理人登録申請書",
    "Ｒ３３７５１１": "管理人登録申請書",
    "Ｒ３３７５１２": "管理人登録申請書",
    "Ｒ３３７５１３": "管理人登録申請書",
    "Ｒ３３７５１４": "管理人登録申請書",
    "Ｒ３３７５３１": "管理人登録申請書",
    "Ｒ３３７５３２": "管理人登録申請書",
    "Ｒ３３７５３３": "管理人登録申請書",
    "Ｒ３３７５３４": "管理人登録申請書",
    "Ｒ３３７５９９": "表示変更登録申請書",
    "Ｒ３３７６１１": "表示変更登録申請書",
    "Ｒ３３７６１２": "表示変更登録申請書",
    "Ｒ３３７６１３": "表示変更登録申請書",
    "Ｒ３３７６１４": "表示変更登録申請書",
    "Ｒ３３７６３１": "表示変更登録申請書",
    "Ｒ３３７６３２": "表示変更登録申請書",
    "Ｒ３３７６３３": "表示変更登録申請書",
    "Ｒ３３７６３４": "表示変更登録申請書",
    "Ｒ３３７６９９": "表示更正登録申請書",
    "Ｒ３３Ａ１７２": "所有権の移転の通報",
    "Ｒ３３Ａ１７３": "所有権の一部移転の通報",
    "Ｒ３３Ａ１７４": "移転が効力を有しない旨の宣言の通報",
    "Ｒ３３Ａ１７５": "移転が効力を有しない旨の宣言の取下の通報",
    "Ｒ３３Ａ５７１": "名義人の氏名・名称・住所の表示変更の通報",
    "Ｒ３３Ａ７８５": "国際登録簿の更正の通報",
    "Ｒ３３Ａ７８７": "国際登録簿の更正の通報",
    "Ｒ３３Ａ７８９": "国際登録簿の更正の通報",
    "Ｒ３３Ａ９１１": "抹消の通報",
    "Ｒ３３Ａ９１２": "限定の通報",
    "Ｒ３３Ａ９１３": "抹消の通報",
    "Ｒ３３Ａ９９９": "その他通報",
    "Ｒ３３ＡＯ１４": "更新の記録の通報",
    "Ｒ３３ＡＴ０１": "国際登録の分割の通報",
    "Ｒ３３ＡＴ２１": "国際登録の併合の通報",
    "Ｒ３３ＸＤ９９": "回復登録申請書",
    "Ｒ３４１８０１": "回復登録申請書",
    "Ｒ３４１８０２": "回復登録申請書",
    "Ｒ３４１８９９": "抹消登録申請書",
    "Ｒ３４１Ｄ９９": "回復登録申請書",
    "Ｒ３４１Ｇ９９": "仮登録申請書",
    "Ｒ３４１Ｈ９９": "仮登録申請書",
    "Ｒ３４１Ｌ８８": "商標権変更登録申請書",
    "Ｒ３４１Ｌ９９": "商標権変更登録申請書",
    "Ｒ３４１Ｔ０１": "商標権分割移転登録申請書",
    "Ｒ３４１Ｔ０２": "商標権分割登録申請書",
    "Ｒ３４１Ｔ９９": "商標権分割登録申請書",
    "Ｒ３４２８０２": "防護標章権一部抹消登録申請書（一部放棄）",
    "Ｒ３４２８０５": "防護標章権抹消登録申請書 （放棄）",
    "Ｒ３４２８９９": "抹消登録申請書",
    "Ｒ３４２Ｄ９９": "回復登録申請書",
    "Ｒ３４２Ｆ９９": "嘱託書",
    "Ｒ３４２Ｇ９９": "仮登録申請書",
    "Ｒ３４２Ｈ９９": "仮登録申請書",
    "Ｒ３４２Ｉ９９": "仮登録申請書",
    "Ｒ３４２Ｊ９９": "仮登録申請書",
    "Ｒ３４２Ｋ９９": "仮登録申請書",
    "Ｒ３４２Ｌ９９": "仮登録申請書",
    "Ｒ３４３１１１": "本権移転登録申請書",
    "Ｒ３４３１１２": "本権移転登録申請書",
    "Ｒ３４３１１３": "本権移転登録申請書",
    "Ｒ３４３１１４": "本権移転登録申請書",
    "Ｒ３４３１１５": "本権移転登録申請書",
    "Ｒ３４３１１６": "本権移転登録申請書",
    "Ｒ３４３１１７": "本権移転登録申請書",
    "Ｒ３４３１１８": "本権移転登録申請書",
    "Ｒ３４３１１９": "本権移転登録申請書",
    "Ｒ３４３１２１": "本権移転登録申請書",
    "Ｒ３４３１２２": "本権移転登録申請書",
    "Ｒ３４３１３１": "本権移転登録申請書",
    "Ｒ３４３１３２": "本権移転登録申請書",
    "Ｒ３４３１３３": "本権移転登録申請書",
    "Ｒ３４３１３４": "本権移転登録申請書",
    "Ｒ３４３１３５": "本権移転登録申請書",
    "Ｒ３４３１３６": "本権移転登録申請書",
    "Ｒ３４３１３７": "本権移転登録申請書",
    "Ｒ３４３１３８": "本権移転登録申請書",
    "Ｒ３４３１４１": "本権共有の特約等の事項の変更登録申請書",
    "Ｒ３４３１９９": "本権移転登録申請書",
    "Ｒ３４３５０１": "本権移転登録申請書",
    "Ｒ３４３５０２": "本権移転登録申請書",
    "Ｒ３４３５０３": "本権移転登録申請書",
    "Ｒ３４３５０４": "本権移転登録申請書",
    "Ｒ３４３５０５": "本権移転登録申請書",
    "Ｒ３４３５０６": "本権移転登録申請書",
    "Ｒ３４３５０７": "本権移転登録申請書",
    "Ｒ３４３５０８": "本権移転登録申請書",
    "Ｒ３４３５０９": "本権移転登録申請書",
    "Ｒ３４３５１０": "本権移転登録申請書",
    "Ｒ３４３５１１": "本権移転登録申請書",
    "Ｒ３４３５１２": "本権移転登録申請書",
    "Ｒ３４３５１３": "本権移転登録申請書",
    "Ｒ３４３５１４": "本権移転登録申請書",
    "Ｒ３４３５３１": "本権移転登録申請書",
    "Ｒ３４３５３２": "本権移転登録申請書",
    "Ｒ３４３５３３": "本権移転登録申請書",
    "Ｒ３４３５３４": "本権移転登録申請書",
    "Ｒ３４３５９９": "表示変更登録申請書",
    "Ｒ３４３６１１": "表示変更登録申請書",
    "Ｒ３４３６１２": "表示変更登録申請書",
    "Ｒ３４３６１３": "表示変更登録申請書",
    "Ｒ３４３６１４": "表示変更登録申請書",
    "Ｒ３４３６３１": "表示変更登録申請書",
    "Ｒ３４３６３２": "表示更正登録申請書 （住所）",
    "Ｒ３４３６３３": "表示更正登録申請書 （住所）",
    "Ｒ３４３６３４": "表示更正登録申請書 （住所）",
    "Ｒ３４３６９９": "表示更正登録申請書",
    "Ｒ３４３８０３": "表示更正登録申請書",
    "Ｒ３４３８０５": "表示更正登録申請書",
    "Ｒ３４３８９９": "抹消登録申請書",
    "Ｒ３４３Ｄ９９": "回復登録申請書",
    "Ｒ３４３Ｆ０１": "回復登録申請書",
    "Ｒ３４３Ｆ０２": "回復登録申請書",
    "Ｒ３４３Ｆ９９": "嘱託書",
    "Ｒ３４３Ｇ０１": "嘱託書",
    "Ｒ３４３Ｇ９９": "仮登録申請書",
    "Ｒ３４３Ｈ９９": "仮登録申請書",
    "Ｒ３４３Ｉ９９": "仮登録申請書",
    "Ｒ３４３Ｊ０１": "仮登録申請書",
    "Ｒ３４３Ｊ９９": "仮登録申請書",
    "Ｒ３４３Ｋ９９": "仮登録申請書",
    "Ｒ３４３Ｌ９９": "仮登録申請書",
    "Ｒ３４３Ｚ０２": "信託登録申請書",
    "Ｒ３４３Ｚ０３": "信託抹消登録申請書",
    "Ｒ３４４２０１": "専用使用権設定登録申請書 （契約・許諾）",
    "Ｒ３４４２０２": "専用使用権設定登録申請書 （許諾）",
    "Ｒ３４４２１１": "専用使用権移転登録申請書 （相続・合併）",
    "Ｒ３４４２１２": "専用使用権移転登録申請書 （合併）",
    "Ｒ３４４２１３": "専用使用権移転登録申請書 （譲渡）",
    "Ｒ３４４２１４": "専用使用権移転登録申請書 （共有）",
    "Ｒ３４４２１５": "専用使用権移転登録申請書 （持分相続合併）",
    "Ｒ３４４２１６": "専用使用権移転登録申請書 （持分合併）",
    "Ｒ３４４２１７": "専用使用権移転登録申請書 （持分譲渡放棄）",
    "Ｒ３４４２１８": "専用使用権移転登録申請書 （持分共有）",
    "Ｒ３４４２１９": "専用使用権移転登録申請書 （持分放棄）",
    "Ｒ３４４２２１": "専用使用権変更登録申請書 （変更契約）",
    "Ｒ３４４２２２": "専用使用権変更登録申請書 （契約）",
    "Ｒ３４４２２３": "専用使用権変更登録申請書 （許諾）",
    "Ｒ３４４２２５": "専用使用権移転登録申請書 （共有分割）",
    "Ｒ３４４２２６": "専用使用権移転登録申請書（持分共有分割）",
    "Ｒ３４４２３０": "専用使用権設定信託登録申請書 （信託契約）",
    "Ｒ３４４２３１": "専用使用権移転信託登録申請書 （信託契約）",
    "Ｒ３４４２３２": "専用使用権信託抹消登録申請書 （信託抹消）",
    "Ｒ３４４２３３": "専用使用権設定信託登録申請書（信託契約）",
    "Ｒ３４４２３４": "専用使用権移転信託登録申請書（信託契約）",
    "Ｒ３４４２３５": "専用使用権移転信託登録申請書（持分信託）",
    "Ｒ３４４２３６": "専用使用権変更信託登録申請書（信託契約）",
    "Ｒ３４４２３７": "専用使用権変更信託登録申請書（共有信託）",
    "Ｒ３４４２３８": "専用使用権変更信託登録申請書（持分信託）",
    "Ｒ３４４２３９": "専用使用権変更信託登録申請書（信託変更）",
    "Ｒ３４４２４０": "専用使用権抹消信託登録申請書（契約解除）",
    "Ｒ３４４２９９": "専用使用権登録申請書",
    "Ｒ３４４３０３": "専用使用権登録申請書",
    "Ｒ３４４３０４": "専用使用権登録申請書",
    "Ｒ３４４３１１": "専用使用権登録申請書",
    "Ｒ３４４３１２": "専用使用権登録申請書",
    "Ｒ３４４３１３": "専用使用権登録申請書",
    "Ｒ３４４３１４": "専用使用権登録申請書",
    "Ｒ３４４３１５": "専用使用権登録申請書",
    "Ｒ３４４３１６": "専用使用権登録申請書",
    "Ｒ３４４３１７": "専用使用権登録申請書",
    "Ｒ３４４３１８": "専用使用権登録申請書",
    "Ｒ３４４３１９": "専用使用権登録申請書",
    "Ｒ３４４３２１": "専用使用権登録申請書",
    "Ｒ３４４３２５": "専用使用権登録申請書",
    "Ｒ３４４３２６": "専用使用権登録申請書",
    "Ｒ３４４３２７": "専用使用権登録申請書",
    "Ｒ３４４３２８": "専用使用権登録申請書",
    "Ｒ３４４３３０": "専用使用権登録申請書",
    "Ｒ３４４３３１": "専用使用権登録申請書",
    "Ｒ３４４３３２": "専用使用権登録申請書",
    "Ｒ３４４３３３": "専用使用権登録申請書",
    "Ｒ３４４３３４": "専用使用権登録申請書",
    "Ｒ３４４３３５": "専用使用権登録申請書",
    "Ｒ３４４３３６": "専用使用権登録申請書",
    "Ｒ３４４３３７": "専用使用権登録申請書",
    "Ｒ３４４３３８": "専用使用権登録申請書",
    "Ｒ３４４３３９": "専用使用権登録申請書",
    "Ｒ３４４３４０": "専用使用権登録申請書",
    "Ｒ３４４３４１": "専用使用権登録申請書",
    "Ｒ３４４３４３": "専用使用権登録申請書",
    "Ｒ３４４３４４": "専用使用権登録申請書",
    "Ｒ３４４３４５": "専用使用権登録申請書",
    "Ｒ３４４３４７": "専用使用権登録申請書",
    "Ｒ３４４３４８": "専用使用権登録申請書",
    "Ｒ３４４３５０": "専用使用権登録申請書",
    "Ｒ３４４３５１": "専用使用権登録申請書",
    "Ｒ３４４３５２": "専用使用権登録申請書",
    "Ｒ３４４３５３": "専用使用権登録申請書",
    "Ｒ３４４３５４": "専用使用権登録申請書",
    "Ｒ３４４３５５": "専用使用権登録申請書",
    "Ｒ３４４３５６": "専用使用権登録申請書",
    "Ｒ３４４３５７": "専用使用権登録申請書",
    "Ｒ３４４３５８": "専用使用権登録申請書",
    "Ｒ３４４３５９": "専用使用権登録申請書",
    "Ｒ３４４３６０": "専用使用権登録申請書",
    "Ｒ３４４３６１": "専用使用権登録申請書",
    "Ｒ３４４３９９": "質権登録申請書",
    "Ｒ３４４５０１": "質権登録申請書",
    "Ｒ３４４５０２": "質権登録申請書",
    "Ｒ３４４５０３": "質権登録申請書",
    "Ｒ３４４５０４": "質権登録申請書",
    "Ｒ３４４５０５": "質権登録申請書",
    "Ｒ３４４５０６": "質権登録申請書",
    "Ｒ３４４５０７": "質権登録申請書",
    "Ｒ３４４５０８": "質権登録申請書",
    "Ｒ３４４５０９": "質権登録申請書",
    "Ｒ３４４５１０": "質権登録申請書",
    "Ｒ３４４５１１": "質権登録申請書",
    "Ｒ３４４５１２": "質権登録申請書",
    "Ｒ３４４５１３": "質権登録申請書",
    "Ｒ３４４５１４": "質権登録申請書",
    "Ｒ３４４５３１": "表示変更登録申請書 （住所）",
    "Ｒ３４４５３２": "表示変更登録申請書 （住所）",
    "Ｒ３４４５３３": "表示変更登録申請書 （住所）",
    "Ｒ３４４５３４": "表示変更登録申請書 （住所）",
    "Ｒ３４４５９９": "表示変更登録申請書",
    "Ｒ３４４６１１": "表示変更登録申請書",
    "Ｒ３４４６１２": "表示変更登録申請書",
    "Ｒ３４４６１３": "表示変更登録申請書",
    "Ｒ３４４６１４": "表示変更登録申請書",
    "Ｒ３４４６３１": "表示変更登録申請書",
    "Ｒ３４４６３２": "表示変更登録申請書",
    "Ｒ３４４６３３": "表示変更登録申請書",
    "Ｒ３４４６３４": "表示変更登録申請書",
    "Ｒ３４４６９９": "表示更正登録申請書",
    "Ｒ３４４８０３": "専用使用権抹消登録申請書 （解除・弁済）",
    "Ｒ３４４８０４": "専用使用権抹消登録申請書 （債務弁済）",
    "Ｒ３４４８０５": "専用使用権抹消登録申請書 （放棄）",
    "Ｒ３４４８９９": "抹消登録申請書",
    "Ｒ３４４Ｄ９９": "回復登録申請書",
    "Ｒ３４４Ｆ０１": "回復登録申請書",
    "Ｒ３４４Ｆ０２": "回復登録申請書",
    "Ｒ３４４Ｆ９９": "嘱託書",
    "Ｒ３４４Ｇ０１": "嘱託書",
    "Ｒ３４４Ｇ９９": "仮登録申請書",
    "Ｒ３４４Ｈ９９": "仮登録申請書",
    "Ｒ３４４Ｉ９９": "仮登録申請書",
    "Ｒ３４４Ｊ０１": "仮登録申請書",
    "Ｒ３４４Ｊ９９": "仮登録申請書",
    "Ｒ３４４Ｋ９９": "仮登録申請書",
    "Ｒ３４４Ｌ９９": "仮登録申請書",
    "Ｒ３４４Ｚ０２": "信託登録申請書",
    "Ｒ３４４Ｚ０３": "信託抹消登録申請書",
    "Ｒ３４５２０１": "通常使用権設定登録申請書 （契約・許諾）",
    "Ｒ３４５２０２": "通常使用権設定登録申請書 （許諾）",
    "Ｒ３４５２１１": "通常使用権移転登録申請書 （相続・合併）",
    "Ｒ３４５２１２": "通常使用権移転登録申請書 （合併）",
    "Ｒ３４５２１３": "通常使用権移転登録申請書 （譲渡）",
    "Ｒ３４５２１４": "通常使用権移転登録申請書 （共有）",
    "Ｒ３４５２１５": "通常使用権移転登録申請書 （持分相続合併）",
    "Ｒ３４５２１６": "通常使用権移転登録申請書 （持分合併）",
    "Ｒ３４５２１７": "通常使用権移転登録申請書 （持分譲渡放棄）",
    "Ｒ３４５２１８": "通常使用権移転登録申請書 （持分共有）",
    "Ｒ３４５２１９": "通常使用権移転登録申請書 （持分放棄）",
    "Ｒ３４５２２１": "通常使用権変更登録申請書 （変更契約）",
    "Ｒ３４５２２２": "通常使用権変更登録申請書 （契約）",
    "Ｒ３４５２２３": "通常使用権変更登録申請書 （許諾）",
    "Ｒ３４５２２５": "通常使用権移転登録申請書 （共有分割）",
    "Ｒ３４５２２６": "通常使用権移転登録申請書（持分共有分割）",
    "Ｒ３４５２３０": "通常使用権設定信託登録申請書 （信託契約）",
    "Ｒ３４５２３１": "通常使用権移転信託登録申請書 （信託契約）",
    "Ｒ３４５２３２": "通常使用権信託抹消登録申請書 （信託抹消）",
    "Ｒ３４５２３３": "通常使用権設定信託登録申請書（信託契約）",
    "Ｒ３４５２３４": "通常使用権移転信託登録申請書（信託契約）",
    "Ｒ３４５２３５": "通常使用権移転信託登録申請書（持分信託）",
    "Ｒ３４５２３６": "通常使用権変更信託登録申請書（信託契約）",
    "Ｒ３４５２３７": "通常使用権変更信託登録申請書（共有信託）",
    "Ｒ３４５２３８": "通常使用権変更信託登録申請書（持分信託）",
    "Ｒ３４５２３９": "通常使用権変更信託登録申請書（信託変更）",
    "Ｒ３４５２４０": "通常使用権抹消信託登録申請書（契約解除）",
    "Ｒ３４５２９９": "通常使用権登録申請書",
    "Ｒ３４５３０３": "通常使用権登録申請書",
    "Ｒ３４５３０４": "通常使用権登録申請書",
    "Ｒ３４５３１１": "通常使用権登録申請書",
    "Ｒ３４５３１２": "通常使用権登録申請書",
    "Ｒ３４５３１３": "通常使用権登録申請書",
    "Ｒ３４５３１４": "通常使用権登録申請書",
    "Ｒ３４５３１５": "通常使用権登録申請書",
    "Ｒ３４５３１６": "通常使用権登録申請書",
    "Ｒ３４５３１７": "通常使用権登録申請書",
    "Ｒ３４５３１８": "通常使用権登録申請書",
    "Ｒ３４５３１９": "通常使用権登録申請書",
    "Ｒ３４５３２１": "通常使用権登録申請書",
    "Ｒ３４５３２５": "通常使用権登録申請書",
    "Ｒ３４５３２６": "通常使用権登録申請書",
    "Ｒ３４５３２７": "通常使用権登録申請書",
    "Ｒ３４５３２８": "通常使用権登録申請書",
    "Ｒ３４５３３０": "通常使用権登録申請書",
    "Ｒ３４５３３１": "通常使用権登録申請書",
    "Ｒ３４５３３２": "通常使用権登録申請書",
    "Ｒ３４５３３３": "通常使用権登録申請書",
    "Ｒ３４５３３４": "通常使用権登録申請書",
    "Ｒ３４５３３５": "通常使用権登録申請書",
    "Ｒ３４５３３６": "通常使用権登録申請書",
    "Ｒ３４５３３７": "通常使用権登録申請書",
    "Ｒ３４５３３８": "通常使用権登録申請書",
    "Ｒ３４５３３９": "通常使用権登録申請書",
    "Ｒ３４５３４０": "通常使用権登録申請書",
    "Ｒ３４５３４１": "通常使用権登録申請書",
    "Ｒ３４５３４３": "通常使用権登録申請書",
    "Ｒ３４５３４４": "通常使用権登録申請書",
    "Ｒ３４５３４５": "通常使用権登録申請書",
    "Ｒ３４５３４７": "通常使用権登録申請書",
    "Ｒ３４５３４８": "通常使用権登録申請書",
    "Ｒ３４５３５０": "通常使用権登録申請書",
    "Ｒ３４５３５１": "通常使用権登録申請書",
    "Ｒ３４５３５２": "通常使用権登録申請書",
    "Ｒ３４５３５３": "通常使用権登録申請書",
    "Ｒ３４５３５４": "通常使用権登録申請書",
    "Ｒ３４５３５５": "通常使用権登録申請書",
    "Ｒ３４５３５６": "通常使用権登録申請書",
    "Ｒ３４５３５７": "通常使用権登録申請書",
    "Ｒ３４５３５８": "通常使用権登録申請書",
    "Ｒ３４５３５９": "通常使用権登録申請書",
    "Ｒ３４５３６０": "通常使用権登録申請書",
    "Ｒ３４５３６１": "通常使用権登録申請書",
    "Ｒ３４５３９９": "質権登録申請書",
    "Ｒ３４５５０１": "質権登録申請書",
    "Ｒ３４５５０２": "質権登録申請書",
    "Ｒ３４５５０３": "質権登録申請書",
    "Ｒ３４５５０４": "質権登録申請書",
    "Ｒ３４５５０５": "質権登録申請書",
    "Ｒ３４５５０６": "質権登録申請書",
    "Ｒ３４５５０７": "質権登録申請書",
    "Ｒ３４５５０８": "質権登録申請書",
    "Ｒ３４５５０９": "質権登録申請書",
    "Ｒ３４５５１０": "質権登録申請書",
    "Ｒ３４５５１１": "質権登録申請書",
    "Ｒ３４５５１２": "質権登録申請書",
    "Ｒ３４５５１３": "質権登録申請書",
    "Ｒ３４５５１４": "質権登録申請書",
    "Ｒ３４５５３１": "質権登録申請書",
    "Ｒ３４５５３２": "質権登録申請書",
    "Ｒ３４５５３３": "質権登録申請書",
    "Ｒ３４５５３４": "質権登録申請書",
    "Ｒ３４５５９９": "表示変更登録申請書",
    "Ｒ３４５６１１": "表示変更登録申請書",
    "Ｒ３４５６１２": "表示変更登録申請書",
    "Ｒ３４５６１３": "表示変更登録申請書",
    "Ｒ３４５６１４": "表示変更登録申請書",
    "Ｒ３４５６３１": "表示変更登録申請書",
    "Ｒ３４５６３２": "表示変更登録申請書",
    "Ｒ３４５６３３": "表示変更登録申請書",
    "Ｒ３４５６３４": "表示変更登録申請書",
    "Ｒ３４５６９９": "表示更正登録申請書",
    "Ｒ３４５８０３": "通常使用権抹消登録申請書 （解除・弁済）",
    "Ｒ３４５８０４": "通常使用権抹消登録申請書 （債務弁済）",
    "Ｒ３４５８０５": "通常使用権抹消登録申請書 （放棄）",
    "Ｒ３４５８９９": "抹消登録申請書",
    "Ｒ３４５Ｄ９９": "回復登録申請書",
    "Ｒ３４５Ｆ０１": "回復登録申請書",
    "Ｒ３４５Ｆ０２": "回復登録申請書",
    "Ｒ３４５Ｆ９９": "嘱託書",
    "Ｒ３４５Ｇ０１": "嘱託書",
    "Ｒ３４５Ｇ９９": "仮登録申請書",
    "Ｒ３４５Ｈ９９": "仮登録申請書",
    "Ｒ３４５Ｉ９９": "仮登録申請書",
    "Ｒ３４５Ｊ０１": "仮登録申請書",
    "Ｒ３４５Ｊ９９": "仮登録申請書",
    "Ｒ３４５Ｋ９９": "仮登録申請書",
    "Ｒ３４５Ｌ９９": "仮登録申請書",
    "Ｒ３４５Ｚ０２": "信託登録申請書",
    "Ｒ３４５Ｚ０３": "信託抹消登録申請書",
    "Ｒ３４６３０３": "信託抹消登録申請書",
    "Ｒ３４６３０４": "信託抹消登録申請書",
    "Ｒ３４６３１１": "信託抹消登録申請書",
    "Ｒ３４６３１２": "信託抹消登録申請書",
    "Ｒ３４６３１３": "信託抹消登録申請書",
    "Ｒ３４６３１４": "信託抹消登録申請書",
    "Ｒ３４６３１５": "信託抹消登録申請書",
    "Ｒ３４６３１６": "信託抹消登録申請書",
    "Ｒ３４６３１７": "信託抹消登録申請書",
    "Ｒ３４６３１８": "信託抹消登録申請書",
    "Ｒ３４６３１９": "信託抹消登録申請書",
    "Ｒ３４６３２１": "信託抹消登録申請書",
    "Ｒ３４６３２５": "信託抹消登録申請書",
    "Ｒ３４６３２６": "信託抹消登録申請書",
    "Ｒ３４６３２７": "信託抹消登録申請書",
    "Ｒ３４６３２８": "信託抹消登録申請書",
    "Ｒ３４６３３０": "信託抹消登録申請書",
    "Ｒ３４６３３１": "信託抹消登録申請書",
    "Ｒ３４６３３２": "信託抹消登録申請書",
    "Ｒ３４６３３３": "信託抹消登録申請書",
    "Ｒ３４６３３４": "信託抹消登録申請書",
    "Ｒ３４６３３５": "信託抹消登録申請書",
    "Ｒ３４６３３６": "信託抹消登録申請書",
    "Ｒ３４６３３７": "信託抹消登録申請書",
    "Ｒ３４６３３８": "信託抹消登録申請書",
    "Ｒ３４６３３９": "信託抹消登録申請書",
    "Ｒ３４６３４０": "信託抹消登録申請書",
    "Ｒ３４６３４１": "信託抹消登録申請書",
    "Ｒ３４６３４３": "信託抹消登録申請書",
    "Ｒ３４６３４４": "信託抹消登録申請書",
    "Ｒ３４６３４５": "信託抹消登録申請書",
    "Ｒ３４６３４７": "信託抹消登録申請書",
    "Ｒ３４６３４８": "信託抹消登録申請書",
    "Ｒ３４６３５０": "信託抹消登録申請書",
    "Ｒ３４６３５１": "信託抹消登録申請書",
    "Ｒ３４６３５２": "信託抹消登録申請書",
    "Ｒ３４６３５３": "信託抹消登録申請書",
    "Ｒ３４６３５４": "信託抹消登録申請書",
    "Ｒ３４６３５５": "信託抹消登録申請書",
    "Ｒ３４６３５６": "信託抹消登録申請書",
    "Ｒ３４６３５７": "信託抹消登録申請書",
    "Ｒ３４６３５８": "信託抹消登録申請書",
    "Ｒ３４６３５９": "信託抹消登録申請書",
    "Ｒ３４６３６０": "信託抹消登録申請書",
    "Ｒ３４６３６１": "信託抹消登録申請書",
    "Ｒ３４６３９９": "質権登録申請書",
    "Ｒ３４６５０１": "質権登録申請書",
    "Ｒ３４６５０２": "質権登録申請書",
    "Ｒ３４６５０３": "質権登録申請書",
    "Ｒ３４６５０４": "質権登録申請書",
    "Ｒ３４６５０５": "質権登録申請書",
    "Ｒ３４６５０６": "質権登録申請書",
    "Ｒ３４６５０７": "質権登録申請書",
    "Ｒ３４６５０８": "質権登録申請書",
    "Ｒ３４６５０９": "質権登録申請書",
    "Ｒ３４６５１０": "質権登録申請書",
    "Ｒ３４６５１１": "質権登録申請書",
    "Ｒ３４６５１２": "質権登録申請書",
    "Ｒ３４６５１３": "質権登録申請書",
    "Ｒ３４６５１４": "質権登録申請書",
    "Ｒ３４６５３１": "質権登録申請書",
    "Ｒ３４６５３２": "質権登録申請書",
    "Ｒ３４６５３３": "質権登録申請書",
    "Ｒ３４６５３４": "質権登録申請書",
    "Ｒ３４６５９９": "表示変更登録申請書",
    "Ｒ３４６６１１": "表示変更登録申請書",
    "Ｒ３４６６１２": "表示変更登録申請書",
    "Ｒ３４６６１３": "表示変更登録申請書",
    "Ｒ３４６６１４": "表示変更登録申請書",
    "Ｒ３４６６３１": "表示変更登録申請書",
    "Ｒ３４６６３２": "表示変更登録申請書",
    "Ｒ３４６６３３": "表示変更登録申請書",
    "Ｒ３４６６３４": "表示変更登録申請書",
    "Ｒ３４６６９９": "表示更正登録申請書",
    "Ｒ３４６８０３": "表示更正登録申請書",
    "Ｒ３４６８０４": "表示更正登録申請書",
    "Ｒ３４６８０５": "表示更正登録申請書",
    "Ｒ３４６８９９": "抹消登録申請書",
    "Ｒ３４６Ｄ９９": "回復登録申請書",
    "Ｒ３４６Ｆ０１": "回復登録申請書",
    "Ｒ３４６Ｆ０２": "回復登録申請書",
    "Ｒ３４６Ｆ９９": "嘱託書",
    "Ｒ３４６Ｇ０１": "嘱託書",
    "Ｒ３４６Ｇ９９": "仮登録申請書",
    "Ｒ３４６Ｈ９９": "仮登録申請書",
    "Ｒ３４６Ｉ９９": "仮登録申請書",
    "Ｒ３４６Ｊ０１": "仮登録申請書",
    "Ｒ３４６Ｊ９９": "仮登録申請書",
    "Ｒ３４６Ｋ９９": "仮登録申請書",
    "Ｒ３４６Ｌ９９": "仮登録申請書",
    "Ｒ３４６Ｚ０２": "信託登録申請書",
    "Ｒ３４６Ｚ０３": "信託抹消登録申請書",
    "Ｒ３４７４０１": "信託抹消登録申請書",
    "Ｒ３４７４０２": "信託抹消登録申請書",
    "Ｒ３４７４１１": "信託抹消登録申請書",
    "Ｒ３４７４２１": "信託抹消登録申請書",
    "Ｒ３４７４２２": "信託抹消登録申請書",
    "Ｒ３４７４９９": "管理人登録申請書",
    "Ｒ３４７５０１": "管理人登録申請書",
    "Ｒ３４７５０２": "管理人登録申請書",
    "Ｒ３４７５０３": "管理人登録申請書",
    "Ｒ３４７５０４": "管理人登録申請書",
    "Ｒ３４７５０５": "管理人登録申請書",
    "Ｒ３４７５０６": "管理人登録申請書",
    "Ｒ３４７５０７": "管理人登録申請書",
    "Ｒ３４７５０８": "管理人登録申請書",
    "Ｒ３４７５０９": "管理人登録申請書",
    "Ｒ３４７５１０": "管理人登録申請書",
    "Ｒ３４７５１１": "管理人登録申請書",
    "Ｒ３４７５１２": "管理人登録申請書",
    "Ｒ３４７５１３": "管理人登録申請書",
    "Ｒ３４７５１４": "管理人登録申請書",
    "Ｒ３４７５３１": "管理人登録申請書",
    "Ｒ３４７５３２": "管理人登録申請書",
    "Ｒ３４７５３３": "管理人登録申請書",
    "Ｒ３４７５３４": "管理人登録申請書",
    "Ｒ３４７５９９": "表示変更登録申請書",
    "Ｒ３４７６１１": "表示変更登録申請書",
    "Ｒ３４７６１２": "表示変更登録申請書",
    "Ｒ３４７６１３": "表示変更登録申請書",
    "Ｒ３４７６１４": "表示変更登録申請書",
    "Ｒ３４７６３１": "表示変更登録申請書",
    "Ｒ３４７６３２": "表示変更登録申請書",
    "Ｒ３４７６３３": "表示変更登録申請書",
    "Ｒ３４７６３４": "表示変更登録申請書",
    "Ｒ３４７６９９": "表示更正登録申請書",
    "Ｒ３４ＸＤ９９": "回復登録申請書",
    "Ｒ３５０": "移転登録済通知書",
    "Ｒ３６０": "却下理由通知書 （移転）",
    "Ｒ３６２": "物件提出命令書 （移転）",
    "Ｒ３７０": "手続却下処分書 （移転）",
    "Ｒ３７１": "取下 （移転）",
    "Ｒ３７２": "手続却下処分書 （移転補正・弁明・物件）",
    "Ｒ３８０": "補正指令書 （移転）",
    "Ｒ３８２": "補完指令書 （移転）",
    "Ｒ３９０": "補正書 （移転）",
    "Ｒ３９１": "弁明書 （移転）",
    "Ｒ３９２": "物件提出書 （移転）",
    "Ｒ３９３": "上申書 （移転）",
    "Ｒ３９４": "補完書 （移転）",
    "Ｒ３９５": "雑書類 （移転）",
    "Ｒ３９６": "期間延長願 （移転）",
    "Ｒ３Ｄ０１": "代理人変更届",
    "Ｒ３Ｄ０２": "代理人受任届",
    "Ｒ３Ｄ０３": "代理人選任届",
    "Ｒ３Ｄ０４": "代理人辞任届",
    "Ｒ３Ｄ０５": "代理人解任届",
    "Ｒ３Ｄ０６": "代理権変更届",
    "Ｒ３Ｄ０７": "代理権消滅届",
    "Ｒ３Ｄ０８": "包括委任状援用制限届",
    "Ｒ３Ｄ０９": "代理人氏名（名称）変更届",
    "Ｒ３Ｄ１０": "代理人住所（居所）変更届",
    "Ｒ３Ｄ１１": "復代理人変更届",
    "Ｒ３Ｄ１２": "復代理人受任届",
    "Ｒ３Ｄ１３": "復代理人選任届",
    "Ｒ３Ｄ１４": "復代理人辞任届",
    "Ｒ３Ｄ１５": "復代理人解任届",
    "Ｒ３Ｄ１６": "復代理権変更届",
    "Ｒ３Ｄ１７": "復代理権消滅届",
    "Ｒ３Ｅ０": "印紙還付（移転）",
    "Ｒ９０": "誤送通知",
    "Ｒ９０１": "誤送通知（返送）",
    "Ｒ９０２": "誤送通知（再送）",
    "Ｒ９０３": "誤送通知（官報）",
    "Ｒ９１": "職権取消通知",
    "Ｒ９１１": "職権取消通知（返送）",
    "Ｒ９１２": "職権取消通知（再送）",
    "Ｒ９１３": "職権取消通知（官報）",
    "Ｒ９２": "無効通知",
    "Ｒ９２１": "無効通知（返送）",
    "Ｒ９２２": "無効通知（再送）",
    "Ｒ９２３": "無効通知（官報）",
    "Ｒ９３": "職権更正通知",
    "Ｒ９３１": "職権更正通知（返送）",
    "Ｒ９３２": "職権更正通知（再送）",
    "Ｒ９３３": "職権更正通知（官報）",
    "Ｒ９４": "返戻通知（移転）",
}

    # 審判種別コードマッピング
    APPEAL_TYPE_MAP = {
        "01": "拒絶査定不服審判",
        "02": "補正却下不服審判",
        "03": "無効審判",
        "04": "取消審判",
        "05": "異議申立",
        "06": "訂正審判",
        "07": "再審",
        "11": "判定請求",
        "21": "異議申立(マドプロ)",
        "31": "取消審判(マドプロ)",
        "41": "無効審判(マドプロ)"
    }
    
    # 審判条文コードマッピング（審判条文記事用）
    APPEAL_ARTICLE_CODE_MAP = {
        # 商標法に基づく審判条文
        "C441": "第44条第1項（拒絶査定不服審判）",
        "45": "第45条（補正却下不服審判）",
        "46": "第46条（無効審判）",
        "C461": "第46条第1項（無効審判）",
        "47": "第47条（無効審判の審決確定の効果）",
        "50": "第50条（不使用取消審判）",
        "51": "第51条（不正使用取消審判）",
        "52": "第52条の2（不正使用取消審判）",
        "53": "第53条（使用権者の不正使用取消審判）",
        "C532": "第53条の2（代理人等の不正登録取消審判）",
        "54": "第54条（審決の効果）",
        "C552": "第55条の2（商標登録の取消しの審判）",
        "C553": "第55条の3（審決の効果）",
        "56": "第56条（再審）",
        "57": "第57条（再審の期間）",
        "58": "第58条（再審により回復した商標権の効力の制限）",
        "59": "第59条（審判の規定の準用）",
        "60": "第60条（審判における費用負担）",
        "61": "第61条（審判の手続）",
        "62": "第62条（査定に対する審判）",
        "63": "第63条（拒絶査定不服審判における特則）",
        "C432": "第43条の2（異議申立）",
        "C433": "第43条の3（異議申立理由）",
        "C434": "第43条の4（異議申立についての審理）",
        "C435": "第43条の5（異議申立についての決定）",
        "C436": "第43条の6（審判の規定の準用）",
        "C437": "第43条の7（異議申立と審判の関係）",
        "C438": "第43条の8（審判官の指定）",
        "C439": "第43条の9（審理の方式）",
        "C4310": "第43条の10（異議申立の取下げ）",
        "C4311": "第43条の11（参加）",
        "C4312": "第43条の12（証拠調べ）",
        "C4313": "第43条の13（職権審理）",
        "C4314": "第43条の14（意見書提出の機会）",
        "C4315": "第43条の15（決定）"
    }
    
    # 拒絶理由条文コードマッピング（特許庁公式コードINDEX 02110より）
    REJECTION_REASON_CODE_MAP = {
        # 商標の拒絶理由条文コード
        "30": "第3条第1項各号",
        "31": "第3条第1項各号＋第4条第1項第16号",
        "32": "第3条第1項柱書",
        "33": "第3条第1項柱書（定型文付）",
        "34": "第3条第1項柱書（定型文、但し書付）",
        "40": "第4条第1項各号（第11号～第13号を除く）",
        "41": "第4条第1項第11号",
        "42": "第4条第1項第12号",
        "43": "第4条第1項第13号",
        "44": "第4条第1項第11号＋第12号",
        "45": "第4条第1項第11号＋第13号",
        "46": "第4条第1項第12号＋第13号",
        "47": "第4条第1項第11号＋第12号＋第13号",
        "48": "第4条第3項",
        "49": "第5条第5項",
        "50": "第5条第5項＋第53条の2",
        "51": "第5条第5項（標準文字）",
        "52": "第5条の2第1項",
        "53": "第5条の2第1項＋第53条の2",
        "54": "第8条第1項",
        "55": "第8条第2項",
        "56": "第8条第5項",
        "60": "第6条第3項で準用する第5条第5項",
        "61": "第6条第1項",
        "62": "第6条第2項",
        "63": "第6条第1項＋第6条第2項",
        "64": "第64条（防護）",
        "65": "第6条第1項（防護）＋第6条第2項（防護）",
        "66": "第6条第1項又は第6条第2項",
        "67": "第6条第1項（防護）",
        "68": "防護更新",
        "69": "第6条第2項",
        "71": "第7条第1項（商標・商品類似）",
        "72": "第7条の2第1項",
        "73": "第7条の2第1項（団体）",
        "74": "第7条の2第1項（団体）（構成員）",
        "75": "第7条の2第1項（地域団体）",
        "76": "第7条の2第1項（防護）",
        "80": "第8条第2項＋第5条第5項",
        "81": "第8条第2項＋第6条第1項＋第6条第2項",
        "82": "第4条第1項各号＋第8条第2項＋第5条第5項",
        "84": "第4条第1項各号＋第8条第5項",
        "85": "第8条第5項＋第5条第5項",
        "90": "第65条の4第2項",
        "91": "第15条の3第2項",
        "99": "その他",
        # 互換性のため以前のコードも残す
        "10": "第3条第1項柱書",
        "11": "第3条第1項第1号",
        "12": "第3条第1項第2号",
        "13": "第3条第1項第3号",
        "14": "第3条第1項第4号",
        "15": "第3条第1項第5号",
        "16": "第3条第1項第6号",
        "17": "第3条第2項",
        "20": "第4条第1項第1号",
        "21": "第4条第1項第2号",
        "22": "第4条第1項第3号",
        "23": "第4条第1項第4号",
        "24": "第4条第1項第5号",
        "25": "第4条第1項第6号",
        "26": "第4条第1項第7号",
        "27": "第4条第1項第8号",
        "28": "第4条第1項第9号",
        "29": "第4条第1項第10号",
        "30": "第4条第1項第11号",
        "31": "第4条第1項第12号",
        "32": "第4条第1項第13号",
        "33": "第4条第1項第14号",
        "34": "第4条第1項第15号",
        "35": "第4条第1項第16号",
        "36": "第4条第1項第17号",
        "37": "第4条第1項第18号",
        "38": "第4条第1項第19号",
        "40": "第5条",
        "41": "第5条第5項",
        "45": "第6条第1項",
        "46": "第6条第2項",
        "47": "第6条第1項及び第2項",
        "50": "第7条",
        "51": "第7条の2",
        "52": "第8条第1項",
        "53": "第8条第2項",
        "54": "第8条第3項",
        "55": "第8条第5項",
        "60": "第15条第1号",
        "61": "第15条第2号",
        "62": "第15条第3号",
        "63": "第15条第1号及び第3号",
        "64": "第15条の3第2項",
        "65": "第53条の2",
        "66": "第64条",
        "70": "第65条第1項",
        "80": "第68条の16第1項",
        "81": "第68条の17第1項",
        "82": "第68条の20第1項",
        "83": "第68条の20第2項",
        "84": "第68条の20第3項",
        "85": "第68条の20第4項",
        "90": "第68条の28第1項",
        "91": "第68条の28第2項",
        "92": "第68条の40第1項",
        "93": "第68条の40第2項",
        "94": "第77条第2項において準用する特許法第17条第3項",
        "95": "第77条第2項において準用する特許法第17条の2第1項",
        "99": "その他"
    }
    
    # C1280+C1380（マドプロ中間コード）統合版マッピング
    # C1280(116個) + C1380(428個)から439個のマッピングを抽出
    # 全角・半角両対応版（計878個）
    MADRID_INTERMEDIATE_CODE_MAP = {
    "A01": "登録査定書",
    "A045": "出願却下処分書",
    "A26": "誤送通知書",
    "AP00051": "方式的な手続の補正の書面の提出",
    "AP00053": "拒絶通報に対する意見書",
    "AP00055": "受継の申立書の提出",
    "AP00059": "却下理由通知に対する弁明書の提出",
    "AP00075": "出願人の印鑑変更の届出",
    "AP00079": "パリ優先権を主張するための証明書の提出",
    "AP00080": "出願時の特例をうけるための証明書の提出",
    "AP00082": "物件を提出する書面",
    "AP00420": "名義人からの代替の申請",
    "AP00521": "手続の補正（主に拒絶理由の応答）",
    "AP00531": "手数料の補正",
    "AP00601": "拒絶通報に対する指定期間の延長の請求",
    "AP00602": "拒絶通報に対する指定期間の延長の請求（期間徒過後",
    "AP00691": "出願人等からのその他の書類",
    "AP00711": "国内段階での名義変更の届出",
    "AP00721": "代理人の氏名（名称）の変更の届出",
    "AP00722": "復代理人の氏名（名称）の変更の届出",
    "AP00731": "代理人の印鑑の変更の届出",
    "AP00732": "復代理人の印鑑の変更の届出",
    "AP00751": "代理人住所の変更の届出",
    "AP00752": "復代理人住所の変更の届出",
    "AP00761": "国内段階での出願の取り下げの届出",
    "AP00762": "国内段階での出願の放棄の届出",
    "AP00781": "上申書",
    "AP00822": "証明書を提出するための書面",
    "AP00831": "刊行物を提出する書面",
    "AP00871": "早期審査のための事情を説明する書面",
    "AP00872": "早期審査のための事情の説明を補充するための書面",
    "AP00902": "審査に関する伺い等の書面",
    "AP00908": "同日に第三者との同一出願があった場合の協議の結果 を届け出るための書面",
    "AP01957": "過誤納の料金の還付請求",
    "AP032B1": "ＩＢに対する代理人の選任に係るＭＤＯへの届出",
    "AP07112": "名義人からの信託の申請",
    "AP07421": "代理人の変更の届出",
    "AP07422": "代理人の受任の届出",
    "AP07423": "代理人の選任の届出",
    "AP07424": "代理人の辞任の届出",
    "AP07425": "代理人の解任の届出",
    "AP07426": "代理権の変更の届出",
    "AP07427": "代理権の消滅の届出",
    "AP07428": "包括委任状の援用の制限の届出",
    "AP07431": "復代理人の変更の届出",
    "AP07432": "復代理人の受任の届出",
    "AP07433": "復代理人の選任の届出",
    "AP07434": "復代理人の辞任の届出",
    "AP07435": "復代理人の解任の届出",
    "AP07436": "復代理権の変更の届出",
    "AP07437": "復代理権の消滅の届出",
    "ENN0100": "国際登録の通知",
    "EXN0100": "事後の指定の通知",
    "EXN1100": "マドリッドプロトコル締約国に対する協定の最初の事 後指定の通知",
    "IB00999": "国際事務局からのその他の通報",
    "IB033B1": "ＩＢに対する代理人の選任の通信をJPOを介して送っ たが宛先が締約国内になく選任無効の通報",
    "IB033B2": "ＩＢに対する代理人の選任の通信をJPOを介して送っ たが欠陥があった場合の通報",
    "IB034B1": "ＩＢに対する代理人の選任の通信をＪＰＯを介して 送った場合に来る通報",
    "IB14100": "国際登録時の指定",
    "IB14101": "所有権の一部移転に伴い新しい出願扱いになるもの （国際登録指定後に分割）",
    "IB182Ｃ1": "拒絶通報を拒絶通報とみなさない旨の通知",
    "IB182Ｃ2": "拒絶の通報を是正する旨の指令",
    "IB221A1": "全ての基礎出願、基礎登録の効力の終了の通報（セン トラルアタックの元）",
    "IB221A2": "一部の基礎出願、基礎登録の効力の終了の通報（セン トラルアタックの元）",
    "IB23200": "基礎出願の分割の通報（セントラルアタックの元）",
    "IB23300": "基礎登録の分割の通報（セントラルアタックの元）",
    "IB24700": "事後の指定",
    "IB24701": "所有権の一部移転に伴い新しい出願扱いになるもの （事後指定後に分割）",
    "IB271A0": "所有権一部移転通報",
    "IB271A2": "商品・サービスの限定の通報",
    "IB271A3": "商品等放棄通報",
    "IB271A4": "名義人の表示変更、住所変更",
    "IB271A5": "全ての商品・サービスの取消の通報",
    "IB271A6": "一部の商品・サービスの取消の通報",
    "IB272A1": "所有権移転通報",
    "IB27300": "併合の通報",
    "IB28200": "国際登録簿の更正の通報",
    "IB30300": "更新継続通報",
    "IB303Ｃ1": "更新取消通報",
    "IB31300": "更新の記録がされた通報",
    "IB31301": "更新の記録がされた通報（猶予あり）",
    "IB31400": "更新がされなかった通報",
    "IB343D1": "納付の記録の通報：登録料２段階納付",
    "IB343D2": "取消の記録の通報：登録料２段階納付",
    "M361797": "登録・表示の追加更正(職権)",
    "M361799": "登録・表示の更正(職権)",
    "M361999": "権利の抹消(職権)",
    "M361A01": "予告登録(無効審判)",
    "M361A02": "予告登録(一部無効審判)",
    "M361A09": "予告登録(商標取消審判)",
    "M361A10": "予告登録(商標一部取消審判)",
    "M361A11": "予告登録(再審)",
    "M361A12": "予告登録(付与後異議)",
    "M361A99": "予告登録(その他)",
    "M361B01": "確定(成立)登録(無効審判)",
    "M361B02": "確定(成立)登録(一部無効審判)",
    "M361B09": "確定(成立)登録(商標取消審判)",
    "M361B10": "確定(成立)登録(商標一部取消審判)",
    "M361B11": "確定(成立)登録(再審)",
    "M361B12": "確定(成立)登録(付与後異議)",
    "M361B99": "確定(成立)登録(その他)",
    "M361E99": "回復登録(職権)",
    "M361Ｃ21": "予告登録の抹消(審判確定不成立)",
    "M361Ｃ22": "予告登録の抹消(審判請求書却下の決定の確定)",
    "M361Ｃ23": "予告登録の抹消(審判請求却下の審判の確定)",
    "M361Ｃ24": "予告登録の抹消(審判請求の取下)",
    "M361Ｃ25": "予告登録の抹消(審判請求の一部取下)",
    "M361Ｃ31": "予告登録の抹消(再審確定不成立)",
    "M361Ｃ32": "予告登録の抹消(再審請求書却下の決定の確定)",
    "M361Ｃ33": "予告登録の抹消(再審請求却下の審判の確定)",
    "M361Ｃ34": "予告登録の抹消(再審請求の取下)",
    "M361Ｃ35": "予告登録の抹消(付与後異議一部取下)",
    "M361Ｃ41": "予告登録の抹消(付与後異議維持)",
    "M361Ｃ42": "予告登録の抹消(付与後異議申立書却下)",
    "M361Ｃ43": "予告登録の抹消(付与後異議申立の却下)",
    "M361Ｃ44": "予告登録の抹消(付与後異議申立の取下)",
    "M361Ｃ99": "予告登録の抹消(その他)",
    "M361Ｆ99": "嘱託書（処分の制限）",
    "M361Ｇ99": "仮登録申請書",
    "M361Ｈ99": "嘱託書（予告登録）",
    "M361Ｌ99": "嘱託書（和議）",
    "M361Ｑ99": "欠号",
    "M362797": "登録・表示の追加更正(職権)",
    "M362799": "登録・表示の更正(職権)",
    "M362802": "防護標章権一部抹消登録申請書（一部放棄）",
    "M362805": "防護標章権抹消登録申請書（放棄）",
    "M362899": "抹消登録申請書（その他）",
    "M362911": "存続期間満了に伴う防護標章権の抹消(職権)",
    "M362999": "防護標章権の抹消(職権)",
    "M362A01": "予告登録(無効審判)",
    "M362A02": "予告登録(一部無効審判)",
    "M362A09": "予告登録(商標取消審判)",
    "M362A10": "予告登録(商標一部取消審判)",
    "M362A11": "予告登録(再審)",
    "M362A12": "予告登録(付与後異議)",
    "M362A99": "予告登録(その他)",
    "M362B01": "確定(成立)登録(無効審判)",
    "M362B02": "確定(成立)登録(一部無効審判)",
    "M362B09": "確定(成立)登録(商標取消審判)",
    "M362B10": "確定(成立)登録(商標一部取消審判)",
    "M362B11": "確定(成立)登録(再審)",
    "M362B12": "確定(成立)登録(付与後異議)",
    "M362B99": "確定(成立)登録(その他)",
    "M362E99": "回復登録(職権)",
    "M362I99": "通知書（工場抵当）",
    "M362O11": "防護登録申請書",
    "M362O12": "防護更新登録申請書",
    "M362Ｃ21": "予告登録の抹消(審判確定不成立)",
    "M362Ｃ22": "予告登録の抹消(審判請求書却下の決定の確定)",
    "M362Ｃ23": "予告登録の抹消(審判請求却下の審判の確定)",
    "M362Ｃ24": "予告登録の抹消(審判請求の取下)",
    "M362Ｃ25": "予告登録の抹消(審判請求の一部取下)",
    "M362Ｃ31": "予告登録の抹消(再審確定不成立)",
    "M362Ｃ32": "予告登録の抹消(再審請求書却下の決定の確定)",
    "M362Ｃ33": "予告登録の抹消(再審請求却下の審判の確定)",
    "M362Ｃ34": "予告登録の抹消(再審請求の取下)",
    "M362Ｃ35": "予告登録の抹消(付与後異議一部取下)",
    "M362Ｃ41": "予告登録の抹消(付与後異議維持)",
    "M362Ｃ42": "予告登録の抹消(付与後異議申立書却下)",
    "M362Ｃ43": "予告登録の抹消(付与後異議申立の却下)",
    "M362Ｃ44": "予告登録の抹消(付与後異議申立の取下)",
    "M362Ｃ99": "予告登録の抹消(その他)",
    "M362Ｆ99": "嘱託書（処分の制限）",
    "M362Ｇ99": "仮登録申請書",
    "M362Ｈ99": "嘱託書（予告登録）",
    "M362Ｊ99": "嘱託書（会社更正）",
    "M362Ｋ99": "嘱託書（破産）",
    "M362Ｌ99": "嘱託書（和議）",
    "M363131": "本権信託登録申請書",
    "M363132": "本権信託抹消申請書",
    "M363199": "本権信託申請書",
    "M363797": "登録・表示の追加更正(職権)",
    "M363799": "登録・表示の更正(職権)",
    "M363E99": "回復登録(職権)",
    "M363I99": "通知書（工場抵当）",
    "M363Ｆ99": "嘱託書（処分の制限）",
    "M363Ｇ99": "仮登録申請書",
    "M363Ｈ99": "嘱託書（予告登録）",
    "M363Ｊ99": "嘱託書（会社更正）",
    "M363Ｋ99": "嘱託書（破産）",
    "M363Ｌ99": "嘱託書（和議）",
    "M364201": "専用使用権設定登録申請書（契約・許諾）",
    "M364211": "専用使用権移転登録申請書（相続・合併）",
    "M364213": "専用使用権移転登録申請書（譲渡）",
    "M364214": "専用使用権移転登録申請書（共有）",
    "M364215": "専用使用権移転登録申請書（持分相続・合併）",
    "M364217": "専用使用権移転登録申請書（持分譲渡・放棄）",
    "M364218": "専用使用権移転登録申請書（持分共有）",
    "M364221": "専用使用権変更登録申請書（変更契約）",
    "M364230": "専用使用権設定信託登録申請書（信託契約）",
    "M364231": "専用使用権移転信託登録申請書（信託契約）",
    "M364232": "専用使用権信託抹消登録申請書（信託抹消）",
    "M364299": "専用使用権登録申請書（その他）",
    "M364303": "質権設定登録申請書（設定契約）",
    "M364304": "根質権設定登録申請書（設定契約）",
    "M364311": "質権移転登録申請書（相続・合併）",
    "M364313": "質権移転登録申請書（譲渡）",
    "M364314": "質権移転登録申請書（一部譲渡）",
    "M364315": "質権移転登録申請書（持分相続・合併）",
    "M364317": "質権移転登録申請書（持分譲渡・放棄）",
    "M364318": "質権移転登録申請書（持分の一部譲渡）",
    "M364321": "質権変更登録申請書（変更契約）",
    "M364330": "質権設定信託登録申請書（信託契約）",
    "M364331": "質権移転信託登録申請書（信託契約）",
    "M364332": "質権移転信託抹消登録申請書（信託抹消）",
    "M364333": "根質権設定信託登録申請書（信託契約）",
    "M364334": "根質権移転信託登録申請書（信託契約）",
    "M364335": "根質権移転信託抹消登録申請書（信託抹消）",
    "M364341": "根質権移転登録申請書（相続・合併）",
    "M364343": "根質権移転登録申請書（譲渡）",
    "M364344": "根質権移転登録申請書（一部譲渡）",
    "M364345": "根質権移転登録申請書（持分相続・合併）",
    "M364347": "根質権移転登録申請書（持分譲渡・放棄）",
    "M364348": "根質権移転登録申請書（持分の一部譲渡）",
    "M364350": "根質権変更登録申請書（変更契約）",
    "M364399": "質権登録申請書（その他）",
    "M364531": "表示変更登録申請書（住所・免許税あり）",
    "M364532": "表示変更登録申請書（住所・免許税なし）",
    "M364533": "表示変更登録申請書（氏名）",
    "M364534": "表示変更登録申請書（国籍）",
    "M364631": "表示更正登録申請書（住所・免許税あり）",
    "M364632": "表示更正登録申請書（住所・免許税なし）",
    "M364633": "表示更正登録申請書（氏名）",
    "M364634": "表示更正登録申請書（国籍）",
    "M364797": "登録・表示の追加更正(職権)",
    "M364799": "登録・表示の更正(職権)",
    "M364803": "専用使用権抹消登録申請書（解除・弁済）",
    "M364805": "専用使用権抹消登録申請書（放棄）",
    "M364899": "抹消登録申請書（その他）",
    "M364E99": "回復登録(職権)",
    "M364I99": "通知書（工場抵当）",
    "M364Ｆ99": "嘱託書（処分の制限）",
    "M364Ｇ99": "仮登録申請書",
    "M364Ｈ99": "嘱託書（予告登録）",
    "M364Ｊ99": "嘱託書（会社更正）",
    "M364Ｋ99": "嘱託書（破産）",
    "M364Ｌ99": "嘱託書（和議）",
    "M365201": "通常使用権設定登録申請書（契約・許諾）",
    "M365211": "通常使用権移転登録申請書（相続・合併）",
    "M365213": "通常使用権移転登録申請書（譲渡）",
    "M365214": "通常使用権移転登録申請書（共有）",
    "M365215": "通常使用権移転登録申請書（持分相続合併）",
    "M365217": "通常使用権移転登録申請書（持分譲渡放棄）",
    "M365218": "通常使用権移転登録申請書（持分共有）",
    "M365221": "通常使用権変更登録申請書（変更契約）",
    "M365230": "通常使用権設定信託申請書（信託契約）",
    "M365231": "通常使用権移転信託申請書（信託契約）",
    "M365299": "通常使用権登録申請書",
    "M365303": "質権設定登録申請書（設定契約）",
    "M365304": "根質権設定登録申請書（設定契約）",
    "M365311": "質権移転登録申請書（相続・合併）",
    "M365313": "質権移転登録申請書（譲渡）",
    "M365314": "質権移転登録申請書（一部譲渡）",
    "M365315": "質権移転登録申請書（持分相続・合併）",
    "M365317": "質権移転登録申請書（持分譲渡・放棄）",
    "M365318": "質権移転登録申請書（持分の一部譲渡）",
    "M365321": "質権変更登録申請書（変更契約）",
    "M365330": "質権設定信託登録申請書（信託契約）",
    "M365331": "質権移転信託登録申請書（信託契約）",
    "M365332": "質権移転信託抹消登録申請書（信託抹消）",
    "M365333": "根質権設定信託登録申請書（信託契約）",
    "M365334": "根質権移転信託登録申請書（信託契約）",
    "M365335": "根質権移転信託抹消登録申請書（信託抹消）",
    "M365341": "根質権移転登録申請書（相続・合併）",
    "M365343": "根質権移転登録申請書（譲渡）",
    "M365344": "根質権移転登録申請書（一部譲渡）",
    "M365345": "根質権移転登録申請書（持分相続・合併）",
    "M365347": "根質権移転登録申請書（持分譲渡・放棄）",
    "M365348": "根質権移転登録申請書（持分の一部譲渡）",
    "M365350": "根質権変更登録申請書（変更契約）",
    "M365399": "質権登録申請書（その他）",
    "M365531": "表示変更登録申請書（住所・免許税あり）",
    "M365532": "表示変更登録申請書（住所・免許税なし）",
    "M365533": "表示変更登録申請書（氏名）",
    "M365534": "表示変更登録申請書（国籍）",
    "M365631": "表示更正登録申請書（住所・免許税あり）",
    "M365632": "表示更正登録申請書（住所・免許税なし）",
    "M365633": "表示更正登録申請書（氏名）",
    "M365634": "表示更正登録申請書（国籍）",
    "M365797": "登録・表示の追加更正(職権)",
    "M365799": "登録・表示の更正(職権)",
    "M365803": "通常使用権抹消登録申請書（解除・弁済）",
    "M365805": "通常使用権抹消登録申請書（放棄）",
    "M365899": "抹消登録申請書（その他）",
    "M365E99": "回復登録(職権)",
    "M365I99": "通知書（工場抵当）",
    "M365Ｆ99": "嘱託書（処分の制限）",
    "M365Ｇ99": "仮登録申請書",
    "M365Ｈ99": "嘱託書（予告登録）",
    "M365Ｊ99": "嘱託書（会社更正）",
    "M365Ｋ99": "嘱託書（破産）",
    "M365Ｌ99": "嘱託書（和議）",
    "M366303": "質権設定登録申請書（設定契約）",
    "M366304": "根質権設定登録申請書（設定契約）",
    "M366311": "質権移転登録申請書（相続・合併）",
    "M366313": "質権移転登録申請書（譲渡）",
    "M366314": "質権移転登録申請書（一部譲渡）",
    "M366315": "質権移転登録申請書（持分相続・合併）",
    "M366317": "質権移転登録申請書（持分譲渡・放棄）",
    "M366318": "質権移転登録申請書（持分の一部譲渡）",
    "M366321": "質権変更登録申請書（変更契約）",
    "M366330": "質権設定信託登録申請書（信託契約）",
    "M366331": "質権移転信託登録申請書（信託契約）",
    "M366332": "質権移転信託抹消登録申請書（信託抹消）",
    "M366333": "根質権設定信託登録申請書（信託契約）",
    "M366334": "根質権移転信託登録申請書（信託契約）",
    "M366335": "根質権移転信託抹消登録申請書（信託抹消）",
    "M366341": "根質権移転登録申請書（相続・合併）",
    "M366343": "根質権移転登録申請書（譲渡）",
    "M366344": "根質権移転登録申請書（一部譲渡）",
    "M366345": "根質権移転登録申請書（持分相続・合併）",
    "M366347": "根質権移転登録申請書（持分譲渡・放棄）",
    "M366348": "根質権移転登録申請書（持分の一部譲渡）",
    "M366350": "根質権変更登録申請書（変更契約）",
    "M366399": "質権登録申請書（その他）",
    "M366531": "表示変更登録申請書（住所・免許税あり）",
    "M366532": "表示変更登録申請書（住所・免許税なし）",
    "M366533": "表示変更登録申請書（氏名）",
    "M366534": "表示変更登録申請書（国籍）",
    "M366631": "表示更正登録申請書（住所・免許税あり）",
    "M366632": "表示更正登録申請書（住所・免許税なし）",
    "M366633": "表示更正登録申請書（氏名）",
    "M366634": "表示更正登録申請書（国籍）",
    "M366797": "登録・表示の追加更正(職権)",
    "M366799": "登録・表示の更正(職権)",
    "M366803": "質権抹消登録申請書（解除・弁済）",
    "M366805": "質権抹消登録申請書（放棄）",
    "M366899": "抹消登録申請書（その他）",
    "M366E99": "回復登録(職権)",
    "M366I99": "通知書（工場抵当）",
    "M366Ｆ99": "嘱託書（処分の制限）",
    "M366Ｇ99": "仮登録申請書",
    "M366Ｈ99": "嘱託書（予告登録）",
    "M366Ｊ99": "嘱託書（会社更正）",
    "M366Ｋ99": "嘱託書（破産）",
    "M366Ｌ99": "嘱託書（和議）",
    "M367797": "その他（職権更正）",
    "M367799": "その他（職権登録）",
    "M369P01": "判定の請求",
    "M369P02": "判定の決定",
    "MD00001": "登録の査定",
    "MD00002": "拒絶の査定",
    "MD00014": "手続受継指令書",
    "MD00026": "誤送通知",
    "MD00073": "手続却下の処分",
    "MD00102": "補正では治癒できない瑕疵を包含する手続に対する却 下の理由を明示した通知",
    "MD00112": "出願人等が行った手続に対する補正命令",
    "MD00122": "ＷＩＰＯ宛撤回書面",
    "MD00131": "拒絶の理由の通知",
    "MD00191": "補正の却下の決定",
    "MD00192": "限定効力無宣言",
    "MD00214": "事後新名義人に対し手続を続行する旨の通知",
    "MD00222": "審査官による手続の補正の指示",
    "MD00241": "その他の通知（期間有り）",
    "MD00242": "その他の通知（期間無し）",
    "MD00243": "その他の国際事務局への通報",
    "MD00251": "審査官による他の通知",
    "MD00516": "くじを行う旨の通知",
    "MD00831": "第三者から刊行物の提出があった旨の通知",
    "MD00902": "伺いに対する回答",
    "MD01956": "過誤の料金の還付",
    "MD02511": "協議指示（日）",
    "MD02528": "早期審査の対象としない旨の通知",
    "MD032B1": "ＩＢへの代理人選任申請の送付",
    "MD036E1": "ＪＰＯを介して登録された代理人の抹消届のＩＢから の送付",
    "MD171A1": "暫定拒絶通報",
    "MD174B1": "再審査請求、抗告が提出された通報",
    "MD174B2": "拒絶確定声明",
    "MD174B3": "拒絶の通報後、拒絶が確定に至ったとき",
    "MD174B4": "保護認容声明（ＳＡ登録）",
    "MD174B5": "審判請求（再審査請求）の取り下げ",
    "MD176A1": "保護認容声明（ＦＡ登録）",
    "MD182A1": "拒絶の通報が欠陥ありと国際事務局から言われた後、 是正した通報",
    "MD19100": "指定国で国際登録の効果が無効となってそれがもはや 抗告の対象とならない通報",
    "MD20100": "名義人の処分権の制限の通報",
    "MD20200": "名義人の処分権の制限の一部又は全部の解除の通報",
    "MD21100": "代替されてる旨の記録を国内登録簿にしたという通報",
    "MD274A1": "所有権の変更が効力を有しない宣言",
    "MD274B1": "所有権の変更が効力を有しない宣言の最終の決定",
    "MD28100": "国際登録簿の記載に誤りありと更正の請求",
    "MD68303": "登録料の支払通知",
    "R103": "防護標章登録納付書",
    "R1031": "防護標章登録納付書(包括納付)",
    "R1032": "防護標章登録納付書(免除)",
    "R1033": "防護標章登録納付書(猶予)",
    "R105": "防護標章更新登録納付書",
    "R1051": "防護標章更新登録納付書(包括納付)",
    "R1052": "防護標章更新登録納付書(免除)",
    "R1053": "防護標章更新登録納付書(猶予)",
    "R113": "防護標章登録納付書(設定補充)",
    "R115": "防護標章更新登録納付書(設定補充)",
    "R141": "軽減申請書",
    "R142": "免除申請書",
    "R143": "猶予申請書",
    "R150": "登録証",
    "R154": "登録証(再発行)",
    "R155": "出願却下処分前通知",
    "R156": "登録証（返送）",
    "R160": "却下理由通知書(防護設定)",
    "R170": "手続却下処分書(防護設定)",
    "R180": "納付書補充指令書(防護設定)",
    "R191": "弁明書(防護設定)",
    "R193": "上申書(設定)",
    "R195": "雑書類(設定)",
    "R294": "上申書(回復)",
    "R350": "移転登録済通知書",
    "R360": "却下理由通知書(移転)",
    "R362": "物件提出指示書(移転)",
    "R370": "手続却下処分書(移転)",
    "R371": "取下(移転)",
    "R372": "手続却下処分書(移転補正書・弁明書)",
    "R380": "補正指令書(移転)",
    "R390": "補正書(移転)",
    "R391": "弁明書(移転)",
    "R392": "物件提出書(移転)",
    "R393": "上申書(移転)",
    "R395": "雑書類(移転)",
    "R3D01": "代理人変更届",
    "R3D02": "代理人受任届",
    "R3D03": "代理人選任届",
    "R3D04": "代理人辞任届",
    "R3D05": "代理人解任届",
    "R3D06": "代理権変更届",
    "R3D07": "代理権消滅届",
    "R3D08": "包括委任状援用制限届",
    "R3D09": "代理人氏名(名称)変更届",
    "R3D10": "代理人住所(居所)変更届",
    "R3D11": "復代理人変更届",
    "R3D12": "復代理人受任届",
    "R3D13": "復代理人選任届",
    "R3D14": "復代理人辞任届",
    "R3D15": "復代理人解任届",
    "R3D16": "復代理権変更届",
    "R3D17": "復代理権消滅届",
    "R3E0": "印紙還付(移転)",
    "R90": "誤送通知書",
    "R91": "職権訂正",
    "WO14100": "国際登録時の指定",
    "WO24700": "事後の指定",
    "Ａ０１": "登録査定書",
    "Ａ０４５": "出願却下処分書",
    "Ａ２６": "誤送通知書",
    "ＡＰ０００５１": "方式的な手続の補正の書面の提出",
    "ＡＰ０００５３": "拒絶通報に対する意見書",
    "ＡＰ０００５５": "受継の申立書の提出",
    "ＡＰ０００５９": "却下理由通知に対する弁明書の提出",
    "ＡＰ０００７５": "出願人の印鑑変更の届出",
    "ＡＰ０００７９": "パリ優先権を主張するための証明書の提出",
    "ＡＰ０００８０": "出願時の特例をうけるための証明書の提出",
    "ＡＰ０００８２": "物件を提出する書面",
    "ＡＰ００４２０": "名義人からの代替の申請",
    "ＡＰ００５２１": "手続の補正（主に拒絶理由の応答）",
    "ＡＰ００５３１": "手数料の補正",
    "ＡＰ００６０１": "拒絶通報に対する指定期間の延長の請求",
    "ＡＰ００６０２": "拒絶通報に対する指定期間の延長の請求（期間徒過後",
    "ＡＰ００６９１": "出願人等からのその他の書類",
    "ＡＰ００７１１": "国内段階での名義変更の届出",
    "ＡＰ００７２１": "代理人の氏名（名称）の変更の届出",
    "ＡＰ００７２２": "復代理人の氏名（名称）の変更の届出",
    "ＡＰ００７３１": "代理人の印鑑の変更の届出",
    "ＡＰ００７３２": "復代理人の印鑑の変更の届出",
    "ＡＰ００７５１": "代理人住所の変更の届出",
    "ＡＰ００７５２": "復代理人住所の変更の届出",
    "ＡＰ００７６１": "国内段階での出願の取り下げの届出",
    "ＡＰ００７６２": "国内段階での出願の放棄の届出",
    "ＡＰ００７８１": "上申書",
    "ＡＰ００８２２": "証明書を提出するための書面",
    "ＡＰ００８３１": "刊行物を提出する書面",
    "ＡＰ００８７１": "早期審査のための事情を説明する書面",
    "ＡＰ００８７２": "早期審査のための事情の説明を補充するための書面",
    "ＡＰ００９０２": "審査に関する伺い等の書面",
    "ＡＰ００９０８": "同日に第三者との同一出願があった場合の協議の結果 を届け出るための書面",
    "ＡＰ０１９５７": "過誤納の料金の還付請求",
    "ＡＰ０３２Ｂ１": "ＩＢに対する代理人の選任に係るＭＤＯへの届出",
    "ＡＰ０７１１２": "名義人からの信託の申請",
    "ＡＰ０７４２１": "代理人の変更の届出",
    "ＡＰ０７４２２": "代理人の受任の届出",
    "ＡＰ０７４２３": "代理人の選任の届出",
    "ＡＰ０７４２４": "代理人の辞任の届出",
    "ＡＰ０７４２５": "代理人の解任の届出",
    "ＡＰ０７４２６": "代理権の変更の届出",
    "ＡＰ０７４２７": "代理権の消滅の届出",
    "ＡＰ０７４２８": "包括委任状の援用の制限の届出",
    "ＡＰ０７４３１": "復代理人の変更の届出",
    "ＡＰ０７４３２": "復代理人の受任の届出",
    "ＡＰ０７４３３": "復代理人の選任の届出",
    "ＡＰ０７４３４": "復代理人の辞任の届出",
    "ＡＰ０７４３５": "復代理人の解任の届出",
    "ＡＰ０７４３６": "復代理権の変更の届出",
    "ＡＰ０７４３７": "復代理権の消滅の届出",
    "ＥＮＮ０１００": "国際登録の通知",
    "ＥＸＮ０１００": "事後の指定の通知",
    "ＥＸＮ１１００": "マドリッドプロトコル締約国に対する協定の最初の事 後指定の通知",
    "ＩＢ００９９９": "国際事務局からのその他の通報",
    "ＩＢ０３３Ｂ１": "ＩＢに対する代理人の選任の通信をJPOを介して送っ たが宛先が締約国内になく選任無効の通報",
    "ＩＢ０３３Ｂ２": "ＩＢに対する代理人の選任の通信をJPOを介して送っ たが欠陥があった場合の通報",
    "ＩＢ０３４Ｂ１": "ＩＢに対する代理人の選任の通信をＪＰＯを介して 送った場合に来る通報",
    "ＩＢ１４１００": "国際登録時の指定",
    "ＩＢ１４１０１": "所有権の一部移転に伴い新しい出願扱いになるもの （国際登録指定後に分割）",
    "ＩＢ１８２Ｃ１": "拒絶通報を拒絶通報とみなさない旨の通知",
    "ＩＢ１８２Ｃ２": "拒絶の通報を是正する旨の指令",
    "ＩＢ２２１Ａ１": "全ての基礎出願、基礎登録の効力の終了の通報（セン トラルアタックの元）",
    "ＩＢ２２１Ａ２": "一部の基礎出願、基礎登録の効力の終了の通報（セン トラルアタックの元）",
    "ＩＢ２３２００": "基礎出願の分割の通報（セントラルアタックの元）",
    "ＩＢ２３３００": "基礎登録の分割の通報（セントラルアタックの元）",
    "ＩＢ２４７００": "事後の指定",
    "ＩＢ２４７０１": "所有権の一部移転に伴い新しい出願扱いになるもの （事後指定後に分割）",
    "ＩＢ２７１Ａ０": "所有権一部移転通報",
    "ＩＢ２７１Ａ２": "商品・サービスの限定の通報",
    "ＩＢ２７１Ａ３": "商品等放棄通報",
    "ＩＢ２７１Ａ４": "名義人の表示変更、住所変更",
    "ＩＢ２７１Ａ５": "全ての商品・サービスの取消の通報",
    "ＩＢ２７１Ａ６": "一部の商品・サービスの取消の通報",
    "ＩＢ２７２Ａ１": "所有権移転通報",
    "ＩＢ２７３００": "併合の通報",
    "ＩＢ２８２００": "国際登録簿の更正の通報",
    "ＩＢ３０３００": "更新継続通報",
    "ＩＢ３０３Ｃ１": "更新取消通報",
    "ＩＢ３１３００": "更新の記録がされた通報",
    "ＩＢ３１３０１": "更新の記録がされた通報（猶予あり）",
    "ＩＢ３１４００": "更新がされなかった通報",
    "ＩＢ３４３Ｄ１": "納付の記録の通報：登録料２段階納付",
    "ＩＢ３４３Ｄ２": "取消の記録の通報：登録料２段階納付",
    "Ｍ３６１７９７": "登録・表示の追加更正(職権)",
    "Ｍ３６１７９９": "登録・表示の更正(職権)",
    "Ｍ３６１９９９": "権利の抹消(職権)",
    "Ｍ３６１Ａ０１": "予告登録(無効審判)",
    "Ｍ３６１Ａ０２": "予告登録(一部無効審判)",
    "Ｍ３６１Ａ０９": "予告登録(商標取消審判)",
    "Ｍ３６１Ａ１０": "予告登録(商標一部取消審判)",
    "Ｍ３６１Ａ１１": "予告登録(再審)",
    "Ｍ３６１Ａ１２": "予告登録(付与後異議)",
    "Ｍ３６１Ａ９９": "予告登録(その他)",
    "Ｍ３６１Ｂ０１": "確定(成立)登録(無効審判)",
    "Ｍ３６１Ｂ０２": "確定(成立)登録(一部無効審判)",
    "Ｍ３６１Ｂ０９": "確定(成立)登録(商標取消審判)",
    "Ｍ３６１Ｂ１０": "確定(成立)登録(商標一部取消審判)",
    "Ｍ３６１Ｂ１１": "確定(成立)登録(再審)",
    "Ｍ３６１Ｂ１２": "確定(成立)登録(付与後異議)",
    "Ｍ３６１Ｂ９９": "確定(成立)登録(その他)",
    "Ｍ３６１Ｃ２１": "予告登録の抹消(審判確定不成立)",
    "Ｍ３６１Ｃ２２": "予告登録の抹消(審判請求書却下の決定の確定)",
    "Ｍ３６１Ｃ２３": "予告登録の抹消(審判請求却下の審判の確定)",
    "Ｍ３６１Ｃ２４": "予告登録の抹消(審判請求の取下)",
    "Ｍ３６１Ｃ２５": "予告登録の抹消(審判請求の一部取下)",
    "Ｍ３６１Ｃ３１": "予告登録の抹消(再審確定不成立)",
    "Ｍ３６１Ｃ３２": "予告登録の抹消(再審請求書却下の決定の確定)",
    "Ｍ３６１Ｃ３３": "予告登録の抹消(再審請求却下の審判の確定)",
    "Ｍ３６１Ｃ３４": "予告登録の抹消(再審請求の取下)",
    "Ｍ３６１Ｃ３５": "予告登録の抹消(付与後異議一部取下)",
    "Ｍ３６１Ｃ４１": "予告登録の抹消(付与後異議維持)",
    "Ｍ３６１Ｃ４２": "予告登録の抹消(付与後異議申立書却下)",
    "Ｍ３６１Ｃ４３": "予告登録の抹消(付与後異議申立の却下)",
    "Ｍ３６１Ｃ４４": "予告登録の抹消(付与後異議申立の取下)",
    "Ｍ３６１Ｃ９９": "予告登録の抹消(その他)",
    "Ｍ３６１Ｅ９９": "回復登録(職権)",
    "Ｍ３６１Ｆ９９": "嘱託書（処分の制限）",
    "Ｍ３６１Ｇ９９": "仮登録申請書",
    "Ｍ３６１Ｈ９９": "嘱託書（予告登録）",
    "Ｍ３６１Ｌ９９": "嘱託書（和議）",
    "Ｍ３６１Ｑ９９": "欠号",
    "Ｍ３６２７９７": "登録・表示の追加更正(職権)",
    "Ｍ３６２７９９": "登録・表示の更正(職権)",
    "Ｍ３６２８０２": "防護標章権一部抹消登録申請書（一部放棄）",
    "Ｍ３６２８０５": "防護標章権抹消登録申請書（放棄）",
    "Ｍ３６２８９９": "抹消登録申請書（その他）",
    "Ｍ３６２９１１": "存続期間満了に伴う防護標章権の抹消(職権)",
    "Ｍ３６２９９９": "防護標章権の抹消(職権)",
    "Ｍ３６２Ａ０１": "予告登録(無効審判)",
    "Ｍ３６２Ａ０２": "予告登録(一部無効審判)",
    "Ｍ３６２Ａ０９": "予告登録(商標取消審判)",
    "Ｍ３６２Ａ１０": "予告登録(商標一部取消審判)",
    "Ｍ３６２Ａ１１": "予告登録(再審)",
    "Ｍ３６２Ａ１２": "予告登録(付与後異議)",
    "Ｍ３６２Ａ９９": "予告登録(その他)",
    "Ｍ３６２Ｂ０１": "確定(成立)登録(無効審判)",
    "Ｍ３６２Ｂ０２": "確定(成立)登録(一部無効審判)",
    "Ｍ３６２Ｂ０９": "確定(成立)登録(商標取消審判)",
    "Ｍ３６２Ｂ１０": "確定(成立)登録(商標一部取消審判)",
    "Ｍ３６２Ｂ１１": "確定(成立)登録(再審)",
    "Ｍ３６２Ｂ１２": "確定(成立)登録(付与後異議)",
    "Ｍ３６２Ｂ９９": "確定(成立)登録(その他)",
    "Ｍ３６２Ｃ２１": "予告登録の抹消(審判確定不成立)",
    "Ｍ３６２Ｃ２２": "予告登録の抹消(審判請求書却下の決定の確定)",
    "Ｍ３６２Ｃ２３": "予告登録の抹消(審判請求却下の審判の確定)",
    "Ｍ３６２Ｃ２４": "予告登録の抹消(審判請求の取下)",
    "Ｍ３６２Ｃ２５": "予告登録の抹消(審判請求の一部取下)",
    "Ｍ３６２Ｃ３１": "予告登録の抹消(再審確定不成立)",
    "Ｍ３６２Ｃ３２": "予告登録の抹消(再審請求書却下の決定の確定)",
    "Ｍ３６２Ｃ３３": "予告登録の抹消(再審請求却下の審判の確定)",
    "Ｍ３６２Ｃ３４": "予告登録の抹消(再審請求の取下)",
    "Ｍ３６２Ｃ３５": "予告登録の抹消(付与後異議一部取下)",
    "Ｍ３６２Ｃ４１": "予告登録の抹消(付与後異議維持)",
    "Ｍ３６２Ｃ４２": "予告登録の抹消(付与後異議申立書却下)",
    "Ｍ３６２Ｃ４３": "予告登録の抹消(付与後異議申立の却下)",
    "Ｍ３６２Ｃ４４": "予告登録の抹消(付与後異議申立の取下)",
    "Ｍ３６２Ｃ９９": "予告登録の抹消(その他)",
    "Ｍ３６２Ｅ９９": "回復登録(職権)",
    "Ｍ３６２Ｆ９９": "嘱託書（処分の制限）",
    "Ｍ３６２Ｇ９９": "仮登録申請書",
    "Ｍ３６２Ｈ９９": "嘱託書（予告登録）",
    "Ｍ３６２Ｉ９９": "通知書（工場抵当）",
    "Ｍ３６２Ｊ９９": "嘱託書（会社更正）",
    "Ｍ３６２Ｋ９９": "嘱託書（破産）",
    "Ｍ３６２Ｌ９９": "嘱託書（和議）",
    "Ｍ３６２Ｏ１１": "防護登録申請書",
    "Ｍ３６２Ｏ１２": "防護更新登録申請書",
    "Ｍ３６３１３１": "本権信託登録申請書",
    "Ｍ３６３１３２": "本権信託抹消申請書",
    "Ｍ３６３１９９": "本権信託申請書",
    "Ｍ３６３７９７": "登録・表示の追加更正(職権)",
    "Ｍ３６３７９９": "登録・表示の更正(職権)",
    "Ｍ３６３Ｅ９９": "回復登録(職権)",
    "Ｍ３６３Ｆ９９": "嘱託書（処分の制限）",
    "Ｍ３６３Ｇ９９": "仮登録申請書",
    "Ｍ３６３Ｈ９９": "嘱託書（予告登録）",
    "Ｍ３６３Ｉ９９": "通知書（工場抵当）",
    "Ｍ３６３Ｊ９９": "嘱託書（会社更正）",
    "Ｍ３６３Ｋ９９": "嘱託書（破産）",
    "Ｍ３６３Ｌ９９": "嘱託書（和議）",
    "Ｍ３６４２０１": "専用使用権設定登録申請書（契約・許諾）",
    "Ｍ３６４２１１": "専用使用権移転登録申請書（相続・合併）",
    "Ｍ３６４２１３": "専用使用権移転登録申請書（譲渡）",
    "Ｍ３６４２１４": "専用使用権移転登録申請書（共有）",
    "Ｍ３６４２１５": "専用使用権移転登録申請書（持分相続・合併）",
    "Ｍ３６４２１７": "専用使用権移転登録申請書（持分譲渡・放棄）",
    "Ｍ３６４２１８": "専用使用権移転登録申請書（持分共有）",
    "Ｍ３６４２２１": "専用使用権変更登録申請書（変更契約）",
    "Ｍ３６４２３０": "専用使用権設定信託登録申請書（信託契約）",
    "Ｍ３６４２３１": "専用使用権移転信託登録申請書（信託契約）",
    "Ｍ３６４２３２": "専用使用権信託抹消登録申請書（信託抹消）",
    "Ｍ３６４２９９": "専用使用権登録申請書（その他）",
    "Ｍ３６４３０３": "質権設定登録申請書（設定契約）",
    "Ｍ３６４３０４": "根質権設定登録申請書（設定契約）",
    "Ｍ３６４３１１": "質権移転登録申請書（相続・合併）",
    "Ｍ３６４３１３": "質権移転登録申請書（譲渡）",
    "Ｍ３６４３１４": "質権移転登録申請書（一部譲渡）",
    "Ｍ３６４３１５": "質権移転登録申請書（持分相続・合併）",
    "Ｍ３６４３１７": "質権移転登録申請書（持分譲渡・放棄）",
    "Ｍ３６４３１８": "質権移転登録申請書（持分の一部譲渡）",
    "Ｍ３６４３２１": "質権変更登録申請書（変更契約）",
    "Ｍ３６４３３０": "質権設定信託登録申請書（信託契約）",
    "Ｍ３６４３３１": "質権移転信託登録申請書（信託契約）",
    "Ｍ３６４３３２": "質権移転信託抹消登録申請書（信託抹消）",
    "Ｍ３６４３３３": "根質権設定信託登録申請書（信託契約）",
    "Ｍ３６４３３４": "根質権移転信託登録申請書（信託契約）",
    "Ｍ３６４３３５": "根質権移転信託抹消登録申請書（信託抹消）",
    "Ｍ３６４３４１": "根質権移転登録申請書（相続・合併）",
    "Ｍ３６４３４３": "根質権移転登録申請書（譲渡）",
    "Ｍ３６４３４４": "根質権移転登録申請書（一部譲渡）",
    "Ｍ３６４３４５": "根質権移転登録申請書（持分相続・合併）",
    "Ｍ３６４３４７": "根質権移転登録申請書（持分譲渡・放棄）",
    "Ｍ３６４３４８": "根質権移転登録申請書（持分の一部譲渡）",
    "Ｍ３６４３５０": "根質権変更登録申請書（変更契約）",
    "Ｍ３６４３９９": "質権登録申請書（その他）",
    "Ｍ３６４５３１": "表示変更登録申請書（住所・免許税あり）",
    "Ｍ３６４５３２": "表示変更登録申請書（住所・免許税なし）",
    "Ｍ３６４５３３": "表示変更登録申請書（氏名）",
    "Ｍ３６４５３４": "表示変更登録申請書（国籍）",
    "Ｍ３６４６３１": "表示更正登録申請書（住所・免許税あり）",
    "Ｍ３６４６３２": "表示更正登録申請書（住所・免許税なし）",
    "Ｍ３６４６３３": "表示更正登録申請書（氏名）",
    "Ｍ３６４６３４": "表示更正登録申請書（国籍）",
    "Ｍ３６４７９７": "登録・表示の追加更正(職権)",
    "Ｍ３６４７９９": "登録・表示の更正(職権)",
    "Ｍ３６４８０３": "専用使用権抹消登録申請書（解除・弁済）",
    "Ｍ３６４８０５": "専用使用権抹消登録申請書（放棄）",
    "Ｍ３６４８９９": "抹消登録申請書（その他）",
    "Ｍ３６４Ｅ９９": "回復登録(職権)",
    "Ｍ３６４Ｆ９９": "嘱託書（処分の制限）",
    "Ｍ３６４Ｇ９９": "仮登録申請書",
    "Ｍ３６４Ｈ９９": "嘱託書（予告登録）",
    "Ｍ３６４Ｉ９９": "通知書（工場抵当）",
    "Ｍ３６４Ｊ９９": "嘱託書（会社更正）",
    "Ｍ３６４Ｋ９９": "嘱託書（破産）",
    "Ｍ３６４Ｌ９９": "嘱託書（和議）",
    "Ｍ３６５２０１": "通常使用権設定登録申請書（契約・許諾）",
    "Ｍ３６５２１１": "通常使用権移転登録申請書（相続・合併）",
    "Ｍ３６５２１３": "通常使用権移転登録申請書（譲渡）",
    "Ｍ３６５２１４": "通常使用権移転登録申請書（共有）",
    "Ｍ３６５２１５": "通常使用権移転登録申請書（持分相続合併）",
    "Ｍ３６５２１７": "通常使用権移転登録申請書（持分譲渡放棄）",
    "Ｍ３６５２１８": "通常使用権移転登録申請書（持分共有）",
    "Ｍ３６５２２１": "通常使用権変更登録申請書（変更契約）",
    "Ｍ３６５２３０": "通常使用権設定信託申請書（信託契約）",
    "Ｍ３６５２３１": "通常使用権移転信託申請書（信託契約）",
    "Ｍ３６５２９９": "通常使用権登録申請書",
    "Ｍ３６５３０３": "質権設定登録申請書（設定契約）",
    "Ｍ３６５３０４": "根質権設定登録申請書（設定契約）",
    "Ｍ３６５３１１": "質権移転登録申請書（相続・合併）",
    "Ｍ３６５３１３": "質権移転登録申請書（譲渡）",
    "Ｍ３６５３１４": "質権移転登録申請書（一部譲渡）",
    "Ｍ３６５３１５": "質権移転登録申請書（持分相続・合併）",
    "Ｍ３６５３１７": "質権移転登録申請書（持分譲渡・放棄）",
    "Ｍ３６５３１８": "質権移転登録申請書（持分の一部譲渡）",
    "Ｍ３６５３２１": "質権変更登録申請書（変更契約）",
    "Ｍ３６５３３０": "質権設定信託登録申請書（信託契約）",
    "Ｍ３６５３３１": "質権移転信託登録申請書（信託契約）",
    "Ｍ３６５３３２": "質権移転信託抹消登録申請書（信託抹消）",
    "Ｍ３６５３３３": "根質権設定信託登録申請書（信託契約）",
    "Ｍ３６５３３４": "根質権移転信託登録申請書（信託契約）",
    "Ｍ３６５３３５": "根質権移転信託抹消登録申請書（信託抹消）",
    "Ｍ３６５３４１": "根質権移転登録申請書（相続・合併）",
    "Ｍ３６５３４３": "根質権移転登録申請書（譲渡）",
    "Ｍ３６５３４４": "根質権移転登録申請書（一部譲渡）",
    "Ｍ３６５３４５": "根質権移転登録申請書（持分相続・合併）",
    "Ｍ３６５３４７": "根質権移転登録申請書（持分譲渡・放棄）",
    "Ｍ３６５３４８": "根質権移転登録申請書（持分の一部譲渡）",
    "Ｍ３６５３５０": "根質権変更登録申請書（変更契約）",
    "Ｍ３６５３９９": "質権登録申請書（その他）",
    "Ｍ３６５５３１": "表示変更登録申請書（住所・免許税あり）",
    "Ｍ３６５５３２": "表示変更登録申請書（住所・免許税なし）",
    "Ｍ３６５５３３": "表示変更登録申請書（氏名）",
    "Ｍ３６５５３４": "表示変更登録申請書（国籍）",
    "Ｍ３６５６３１": "表示更正登録申請書（住所・免許税あり）",
    "Ｍ３６５６３２": "表示更正登録申請書（住所・免許税なし）",
    "Ｍ３６５６３３": "表示更正登録申請書（氏名）",
    "Ｍ３６５６３４": "表示更正登録申請書（国籍）",
    "Ｍ３６５７９７": "登録・表示の追加更正(職権)",
    "Ｍ３６５７９９": "登録・表示の更正(職権)",
    "Ｍ３６５８０３": "通常使用権抹消登録申請書（解除・弁済）",
    "Ｍ３６５８０５": "通常使用権抹消登録申請書（放棄）",
    "Ｍ３６５８９９": "抹消登録申請書（その他）",
    "Ｍ３６５Ｅ９９": "回復登録(職権)",
    "Ｍ３６５Ｆ９９": "嘱託書（処分の制限）",
    "Ｍ３６５Ｇ９９": "仮登録申請書",
    "Ｍ３６５Ｈ９９": "嘱託書（予告登録）",
    "Ｍ３６５Ｉ９９": "通知書（工場抵当）",
    "Ｍ３６５Ｊ９９": "嘱託書（会社更正）",
    "Ｍ３６５Ｋ９９": "嘱託書（破産）",
    "Ｍ３６５Ｌ９９": "嘱託書（和議）",
    "Ｍ３６６３０３": "質権設定登録申請書（設定契約）",
    "Ｍ３６６３０４": "根質権設定登録申請書（設定契約）",
    "Ｍ３６６３１１": "質権移転登録申請書（相続・合併）",
    "Ｍ３６６３１３": "質権移転登録申請書（譲渡）",
    "Ｍ３６６３１４": "質権移転登録申請書（一部譲渡）",
    "Ｍ３６６３１５": "質権移転登録申請書（持分相続・合併）",
    "Ｍ３６６３１７": "質権移転登録申請書（持分譲渡・放棄）",
    "Ｍ３６６３１８": "質権移転登録申請書（持分の一部譲渡）",
    "Ｍ３６６３２１": "質権変更登録申請書（変更契約）",
    "Ｍ３６６３３０": "質権設定信託登録申請書（信託契約）",
    "Ｍ３６６３３１": "質権移転信託登録申請書（信託契約）",
    "Ｍ３６６３３２": "質権移転信託抹消登録申請書（信託抹消）",
    "Ｍ３６６３３３": "根質権設定信託登録申請書（信託契約）",
    "Ｍ３６６３３４": "根質権移転信託登録申請書（信託契約）",
    "Ｍ３６６３３５": "根質権移転信託抹消登録申請書（信託抹消）",
    "Ｍ３６６３４１": "根質権移転登録申請書（相続・合併）",
    "Ｍ３６６３４３": "根質権移転登録申請書（譲渡）",
    "Ｍ３６６３４４": "根質権移転登録申請書（一部譲渡）",
    "Ｍ３６６３４５": "根質権移転登録申請書（持分相続・合併）",
    "Ｍ３６６３４７": "根質権移転登録申請書（持分譲渡・放棄）",
    "Ｍ３６６３４８": "根質権移転登録申請書（持分の一部譲渡）",
    "Ｍ３６６３５０": "根質権変更登録申請書（変更契約）",
    "Ｍ３６６３９９": "質権登録申請書（その他）",
    "Ｍ３６６５３１": "表示変更登録申請書（住所・免許税あり）",
    "Ｍ３６６５３２": "表示変更登録申請書（住所・免許税なし）",
    "Ｍ３６６５３３": "表示変更登録申請書（氏名）",
    "Ｍ３６６５３４": "表示変更登録申請書（国籍）",
    "Ｍ３６６６３１": "表示更正登録申請書（住所・免許税あり）",
    "Ｍ３６６６３２": "表示更正登録申請書（住所・免許税なし）",
    "Ｍ３６６６３３": "表示更正登録申請書（氏名）",
    "Ｍ３６６６３４": "表示更正登録申請書（国籍）",
    "Ｍ３６６７９７": "登録・表示の追加更正(職権)",
    "Ｍ３６６７９９": "登録・表示の更正(職権)",
    "Ｍ３６６８０３": "質権抹消登録申請書（解除・弁済）",
    "Ｍ３６６８０５": "質権抹消登録申請書（放棄）",
    "Ｍ３６６８９９": "抹消登録申請書（その他）",
    "Ｍ３６６Ｅ９９": "回復登録(職権)",
    "Ｍ３６６Ｆ９９": "嘱託書（処分の制限）",
    "Ｍ３６６Ｇ９９": "仮登録申請書",
    "Ｍ３６６Ｈ９９": "嘱託書（予告登録）",
    "Ｍ３６６Ｉ９９": "通知書（工場抵当）",
    "Ｍ３６６Ｊ９９": "嘱託書（会社更正）",
    "Ｍ３６６Ｋ９９": "嘱託書（破産）",
    "Ｍ３６６Ｌ９９": "嘱託書（和議）",
    "Ｍ３６７７９７": "その他（職権更正）",
    "Ｍ３６７７９９": "その他（職権登録）",
    "Ｍ３６９Ｐ０１": "判定の請求",
    "Ｍ３６９Ｐ０２": "判定の決定",
    "ＭＤ００００１": "登録の査定",
    "ＭＤ００００２": "拒絶の査定",
    "ＭＤ０００１４": "手続受継指令書",
    "ＭＤ０００２６": "誤送通知",
    "ＭＤ０００７３": "手続却下の処分",
    "ＭＤ００１０２": "補正では治癒できない瑕疵を包含する手続に対する却 下の理由を明示した通知",
    "ＭＤ００１１２": "出願人等が行った手続に対する補正命令",
    "ＭＤ００１２２": "ＷＩＰＯ宛撤回書面",
    "ＭＤ００１３１": "拒絶の理由の通知",
    "ＭＤ００１９１": "補正の却下の決定",
    "ＭＤ００１９２": "限定効力無宣言",
    "ＭＤ００２１４": "事後新名義人に対し手続を続行する旨の通知",
    "ＭＤ００２２２": "審査官による手続の補正の指示",
    "ＭＤ００２４１": "その他の通知（期間有り）",
    "ＭＤ００２４２": "その他の通知（期間無し）",
    "ＭＤ００２４３": "その他の国際事務局への通報",
    "ＭＤ００２５１": "審査官による他の通知",
    "ＭＤ００５１６": "くじを行う旨の通知",
    "ＭＤ００８３１": "第三者から刊行物の提出があった旨の通知",
    "ＭＤ００９０２": "伺いに対する回答",
    "ＭＤ０１９５６": "過誤の料金の還付",
    "ＭＤ０２５１１": "協議指示（日）",
    "ＭＤ０２５２８": "早期審査の対象としない旨の通知",
    "ＭＤ０３２Ｂ１": "ＩＢへの代理人選任申請の送付",
    "ＭＤ０３６Ｅ１": "ＪＰＯを介して登録された代理人の抹消届のＩＢから の送付",
    "ＭＤ１７１Ａ１": "暫定拒絶通報",
    "ＭＤ１７４Ｂ１": "再審査請求、抗告が提出された通報",
    "ＭＤ１７４Ｂ２": "拒絶確定声明",
    "ＭＤ１７４Ｂ３": "拒絶の通報後、拒絶が確定に至ったとき",
    "ＭＤ１７４Ｂ４": "保護認容声明（ＳＡ登録）",
    "ＭＤ１７４Ｂ５": "審判請求（再審査請求）の取り下げ",
    "ＭＤ１７６Ａ１": "保護認容声明（ＦＡ登録）",
    "ＭＤ１８２Ａ１": "拒絶の通報が欠陥ありと国際事務局から言われた後、 是正した通報",
    "ＭＤ１９１００": "指定国で国際登録の効果が無効となってそれがもはや 抗告の対象とならない通報",
    "ＭＤ２０１００": "名義人の処分権の制限の通報",
    "ＭＤ２０２００": "名義人の処分権の制限の一部又は全部の解除の通報",
    "ＭＤ２１１００": "代替されてる旨の記録を国内登録簿にしたという通報",
    "ＭＤ２７４Ａ１": "所有権の変更が効力を有しない宣言",
    "ＭＤ２７４Ｂ１": "所有権の変更が効力を有しない宣言の最終の決定",
    "ＭＤ２８１００": "国際登録簿の記載に誤りありと更正の請求",
    "ＭＤ６８３０３": "登録料の支払通知",
    "Ｒ１０３": "防護標章登録納付書",
    "Ｒ１０３１": "防護標章登録納付書(包括納付)",
    "Ｒ１０３２": "防護標章登録納付書(免除)",
    "Ｒ１０３３": "防護標章登録納付書(猶予)",
    "Ｒ１０５": "防護標章更新登録納付書",
    "Ｒ１０５１": "防護標章更新登録納付書(包括納付)",
    "Ｒ１０５２": "防護標章更新登録納付書(免除)",
    "Ｒ１０５３": "防護標章更新登録納付書(猶予)",
    "Ｒ１１３": "防護標章登録納付書(設定補充)",
    "Ｒ１１５": "防護標章更新登録納付書(設定補充)",
    "Ｒ１４１": "軽減申請書",
    "Ｒ１４２": "免除申請書",
    "Ｒ１４３": "猶予申請書",
    "Ｒ１５０": "登録証",
    "Ｒ１５４": "登録証(再発行)",
    "Ｒ１５５": "出願却下処分前通知",
    "Ｒ１５６": "登録証（返送）",
    "Ｒ１６０": "却下理由通知書(防護設定)",
    "Ｒ１７０": "手続却下処分書(防護設定)",
    "Ｒ１８０": "納付書補充指令書(防護設定)",
    "Ｒ１９１": "弁明書(防護設定)",
    "Ｒ１９３": "上申書(設定)",
    "Ｒ１９５": "雑書類(設定)",
    "Ｒ２９４": "上申書(回復)",
    "Ｒ３５０": "移転登録済通知書",
    "Ｒ３６０": "却下理由通知書(移転)",
    "Ｒ３６２": "物件提出指示書(移転)",
    "Ｒ３７０": "手続却下処分書(移転)",
    "Ｒ３７１": "取下(移転)",
    "Ｒ３７２": "手続却下処分書(移転補正書・弁明書)",
    "Ｒ３８０": "補正指令書(移転)",
    "Ｒ３９０": "補正書(移転)",
    "Ｒ３９１": "弁明書(移転)",
    "Ｒ３９２": "物件提出書(移転)",
    "Ｒ３９３": "上申書(移転)",
    "Ｒ３９５": "雑書類(移転)",
    "Ｒ３Ｄ０１": "代理人変更届",
    "Ｒ３Ｄ０２": "代理人受任届",
    "Ｒ３Ｄ０３": "代理人選任届",
    "Ｒ３Ｄ０４": "代理人辞任届",
    "Ｒ３Ｄ０５": "代理人解任届",
    "Ｒ３Ｄ０６": "代理権変更届",
    "Ｒ３Ｄ０７": "代理権消滅届",
    "Ｒ３Ｄ０８": "包括委任状援用制限届",
    "Ｒ３Ｄ０９": "代理人氏名(名称)変更届",
    "Ｒ３Ｄ１０": "代理人住所(居所)変更届",
    "Ｒ３Ｄ１１": "復代理人変更届",
    "Ｒ３Ｄ１２": "復代理人受任届",
    "Ｒ３Ｄ１３": "復代理人選任届",
    "Ｒ３Ｄ１４": "復代理人辞任届",
    "Ｒ３Ｄ１５": "復代理人解任届",
    "Ｒ３Ｄ１６": "復代理権変更届",
    "Ｒ３Ｄ１７": "復代理権消滅届",
    "Ｒ３Ｅ０": "印紙還付(移転)",
    "Ｒ９０": "誤送通知書",
    "Ｒ９１": "職権訂正",
    "ＷＯ１４１００": "国際登録時の指定",
    "ＷＯ２４７００": "事後の指定",
}

    
    # 査定種別コード（半角数字版も追加）
    DECISION_TYPE_MAP = {
        '０': '査定なし',
        '１': '登録査定',
        '２': '拒絶査定',
        '0': '査定なし',
        '1': '登録査定',
        '2': '拒絶査定',
    }
    
    # 審査種別コード
    EXAMINATION_TYPE_MAP = {
        '０１': '通常審査',
        '０３': '早期審査',
        '01': '通常審査',
        '03': '早期審査',
        '1': '通常審査',
        '3': '早期審査',
    }
    
    # 出願種別マッピング（コードINDEX: 02010）
    # 4-02出願マスタ（意商）_1.13版.docx Table 1より
    APPLICATION_TYPE_MAP = {
        '01': '通常',  # 11条1項、12条1項
        '04': '分割',  # 10条1項
        '05': '変更',
        '06': '補正却下',  # 17条
        '07': '地域団体',
        '10': '連合',  # 11条2項
        '11': '防護',  # 65条1項
        '12': '更新',
        '13': '防護の更新',
        '14': '団体',
        '15': '書換',
        '16': '防護の書換',
        '17': '重複更新',
    }
    
    # 中間記録コードマップは上記で定義済み（497行目～）
    
    def __init__(self, db_path: str = None):
        """初期化"""
        if db_path is None:
            # デフォルトのデータベースパスを探す
            db_files = sorted(Path('.').glob('tmcloud_v2_*.db'))
            if db_files:
                db_path = str(db_files[-1])
            else:
                raise FileNotFoundError("データベースファイルが見つかりません")
        
        self.db_path = db_path
        self.conn = None
        self.connect()
        
        # IN句の上限設定
        self.IN_CLAUSE_LIMIT = 400
    
    def connect(self):
        """データベース接続"""
        try:
            self.conn = sqlite3.connect(self.db_path)
            self.conn.row_factory = sqlite3.Row  # 結果を辞書形式で取得
            
            # パフォーマンス設定
            self.conn.execute("PRAGMA journal_mode=WAL")
            self.conn.execute("PRAGMA synchronous=NORMAL")
            self.conn.execute("PRAGMA temp_store=MEMORY")
            self.conn.execute("PRAGMA cache_size=-1048576")  # 1GB cache
            
            # 必要なカラムとFTSテーブルの存在確認・作成
            self._ensure_required_columns_and_tables()
            
            print(f"データベース接続成功: {self.db_path}")
        except Exception as e:
            print(f"データベース接続エラー: {e}")
            sys.exit(1)
    
    def _ensure_required_columns_and_tables(self):
        """必要なカラムとFTSテーブルの存在確認・作成"""
        cursor = self.conn.cursor()
        
        # trademark_searchの_normカラム確認・追加
        cursor.execute("PRAGMA table_info(trademark_search)")
        cols = {row[1] for row in cursor.fetchall()}
        if 'search_use_t_norm' not in cols:
            try:
                cursor.execute("ALTER TABLE trademark_search ADD COLUMN search_use_t_norm TEXT")
                # 既存データの正規化（簡易版）
                cursor.execute("""
                    UPDATE trademark_search 
                    SET search_use_t_norm = UPPER(REPLACE(REPLACE(search_use_t, ' ', ''), '　', ''))
                    WHERE search_use_t_norm IS NULL
                """)
                self.conn.commit()
                print("search_use_t_normカラムを追加しました")
            except sqlite3.OperationalError:
                pass  # 既に存在する場合
        
        # trademark_pronunciationsの_normカラム確認・追加
        cursor.execute("PRAGMA table_info(trademark_pronunciations)")
        cols = {row[1] for row in cursor.fetchall()}
        if 'pronunciation_norm' not in cols:
            try:
                cursor.execute("ALTER TABLE trademark_pronunciations ADD COLUMN pronunciation_norm TEXT")
                # 既存データの正規化（簡易版）
                cursor.execute("""
                    UPDATE trademark_pronunciations 
                    SET pronunciation_norm = pronunciation
                    WHERE pronunciation_norm IS NULL
                """)
                self.conn.commit()
                print("pronunciation_normカラムを追加しました")
            except sqlite3.OperationalError:
                pass  # 既に存在する場合
        
        # FTSテーブルの確認・作成
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='trademark_search_fts'")
        if not cursor.fetchone():
            try:
                cursor.execute("""
                    CREATE VIRTUAL TABLE trademark_search_fts
                    USING fts5(
                        search_use_t,
                        content='trademark_search',
                        content_rowid='rowid',
                        tokenize='unicode61'
                    )
                """)
                # 初回データ同期
                cursor.execute("""
                    INSERT INTO trademark_search_fts(rowid, search_use_t)
                    SELECT rowid, search_use_t FROM trademark_search WHERE search_use_t IS NOT NULL
                """)
                self.conn.commit()
                print("trademark_search_ftsテーブルを作成しました")
            except sqlite3.OperationalError as e:
                print(f"FTSテーブル作成エラー: {e}")
        
        # trademark_draft_recordsテーブルの確認
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='trademark_draft_records'")
        if not cursor.fetchone():
            # テーブルが存在しない場合は警告を出す
            print("警告: trademark_draft_recordsテーブルが存在しません。拒絶条文・中間記録検索は利用できません。")
    
    # ========== 商標名検索（FTS5） ==========
    
    def search_trademark_name(self, keywords: str, limit: int = 100, unified_format: bool = True) -> List[Dict[str, Any]]:
        """商標名検索（TMSONAR準拠）
        
        Args:
            keywords: 検索キーワード（複数可、空白/カンマ区切り）
            limit: 最大取得件数
        
        Returns:
            検索結果リスト
        """
        terms = QueryParser.split_terms(keywords)
        if not terms:
            return []
        
        # 全指定の場合
        if terms == ['?']:
            return self._get_all_trademarks(limit)
        
        results = []
        for term in terms:
            # 正規化
            normalized = TextNormalizer.normalize_text_jp(term, for_trademark=True)
            
            if len(normalized) < 2:
                # 2文字未満はLIKE検索
                results.extend(self._search_trademark_like(normalized, limit))
            elif len(normalized) < 3:
                # 2文字はLIKE検索（trigramでは効果が薄い）
                results.extend(self._search_trademark_like(normalized, limit))
            else:
                # 3文字以上はFTS検索
                results.extend(self._search_trademark_fts(normalized, limit))
        
        # 重複除去
        seen = set()
        unique_results = []
        for r in results:
            if r['app_num'] not in seen:
                seen.add(r['app_num'])
                unique_results.append(r)
        
        # 統一フォーマットで返す
        if unified_format:
            app_nums = [r['app_num'] for r in unique_results[:limit]]
            # 検索固有データとして商標名検索の情報を含める
            search_specific = {
                r['app_num']: {
                    'matched_trademark': r.get('trademark_name'),
                    'search_term': keywords
                } for r in unique_results[:limit]
            }
            return self._format_unified_result(app_nums, search_specific)
        
        return unique_results[:limit]
        
    
    def _search_trademark_like(self, term: str, limit: int) -> List[Dict[str, Any]]:
        """商標名LIKE検索"""
        pattern = f"%{QueryParser.wildcard_like(term)}%"
        cursor = self.conn.cursor()
        
        query = """
            SELECT 
                ts.app_num,
                tci.reg_article_reg_num as reg_num,
                -- 商標名の優先順位: 商標見本→標準文字→表示用商標
                COALESCE(
                    td.indct_use_t,
                    tsc.standard_char_t,
                    ts.search_use_t
                ) as trademark_name,
                tci.app_date,
                tci.reg_date,
                tci.final_disposition_type,
                tci.law_code,
                tci.class_count
            FROM trademark_search ts
            INNER JOIN trademark_case_info tci ON ts.app_num = tci.app_num
            LEFT JOIN trademark_display td ON tci.app_num = td.app_num
            LEFT JOIN trademark_standard_char tsc ON tci.app_num = tsc.app_num
            WHERE ts.search_use_t_norm LIKE ? ESCAPE '\\'
            ORDER BY tci.app_date DESC
            LIMIT ?
        """
        
        cursor.execute(query, (pattern, limit))
        return [dict(row) for row in cursor.fetchall()]
    
    def _search_trademark_fts(self, term: str, limit: int) -> List[Dict[str, Any]]:
        """商標名FTS検索"""
        cursor = self.conn.cursor()
        
        # FTS用にワイルドカード変換（? → *）
        fts_pattern = QueryParser.wildcard_fts(term)
        
        query = """
            SELECT 
                ts.app_num,
                tci.reg_article_reg_num as reg_num,
                -- 商標名の優先順位: 商標見本→標準文字→表示用商標
                COALESCE(
                    td.indct_use_t,
                    tsc.standard_char_t,
                    ts.search_use_t
                ) as trademark_name,
                tci.app_date,
                tci.reg_date,
                tci.final_disposition_type,
                tci.law_code,
                tci.class_count
            FROM trademark_search_fts fts
            JOIN trademark_search ts ON fts.rowid = ts.rowid
            INNER JOIN trademark_case_info tci ON ts.app_num = tci.app_num
            LEFT JOIN trademark_display td ON tci.app_num = td.app_num
            LEFT JOIN trademark_standard_char tsc ON tci.app_num = tsc.app_num
            WHERE fts MATCH ?
            ORDER BY tci.app_date DESC
            LIMIT ?
        """
        
        try:
            cursor.execute(query, (fts_pattern, limit))
            return [dict(row) for row in cursor.fetchall()]
        except sqlite3.OperationalError:
            # FTSテーブルが存在しない場合はLIKE検索にフォールバック
            return self._search_trademark_like(term, limit)
    
    def _get_all_trademarks(self, limit: int) -> List[Dict[str, Any]]:
        """全商標取得"""
        cursor = self.conn.cursor()
        query = """
            SELECT 
                ts.app_num,
                tci.reg_article_reg_num as reg_num,
                -- 商標名の優先順位: 商標見本→標準文字→表示用商標
                COALESCE(
                    td.indct_use_t,
                    tsc.standard_char_t,
                    ts.search_use_t
                ) as trademark_name,
                tci.app_date,
                tci.reg_date,
                tci.final_disposition_type,
                tci.law_code,
                tci.class_count
            FROM trademark_search ts
            LEFT JOIN trademark_case_info tci ON ts.app_num = tci.app_num
            LEFT JOIN trademark_display td ON tci.app_num = td.app_num
            LEFT JOIN trademark_standard_char tsc ON tci.app_num = tsc.app_num
            ORDER BY tci.app_date DESC
            LIMIT ?
        """
        
        cursor.execute(query, (limit,))
        return [dict(row) for row in cursor.fetchall()]
    
    # ========== 称呼検索（TMSONAR準拠） ==========
    
    def search_phonetic(self, keywords: str, limit: int = 100, unified_format: bool = True) -> List[Dict[str, Any]]:
        """称呼検索（TMSONAR準拠）
        
        Args:
            keywords: 検索キーワード（複数可）
            limit: 最大取得件数
            unified_format: 統一フォーマットで返すか
        
        Returns:
            検索結果リスト
        """
        terms = QueryParser.split_terms(keywords)
        if not terms:
            return []
        
        # 全指定の場合
        if terms == ['?']:
            if unified_format:
                results = self._get_all_phonetics(limit)
                app_nums = [r['app_num'] for r in results if r.get('app_num')]
                search_specific = {
                    r['app_num']: {
                        'matched_phonetic': r.get('pronunciation'),
                        'search_term': keywords
                    } for r in results if r.get('app_num')
                }
                return self._format_unified_result(app_nums[:limit], search_specific)
            else:
                return self._get_all_phonetics(limit)
        
        results = []
        for term in terms:
            # 正規化
            normalized = TextNormalizer.normalize_kana_for_pron(term)
            pattern = f"%{QueryParser.wildcard_like(normalized)}%"
            
            cursor = self.conn.cursor()
            # シンプルなクエリ：出願番号でGROUP BYして重複を除去
            query = """
                SELECT 
                    tp.app_num,
                    GROUP_CONCAT(DISTINCT tp.pronunciation) as pronunciation,
                    COALESCE(
                        td.indct_use_t,
                        tsc.standard_char_t,
                        ts.search_use_t
                    ) as trademark_name,
                    tci.app_date,
                    tci.reg_date,
                    tci.final_disposition_type,
                    tci.law_code,
                    tci.class_count
                FROM trademark_pronunciations tp
                INNER JOIN trademark_case_info tci ON tp.app_num = tci.app_num
                LEFT JOIN trademark_search ts ON tp.app_num = ts.app_num
                LEFT JOIN trademark_display td ON tp.app_num = td.app_num
                LEFT JOIN trademark_standard_char tsc ON tp.app_num = tsc.app_num
                WHERE tp.pronunciation_norm LIKE ? ESCAPE '\\'
                GROUP BY tp.app_num
                ORDER BY tci.app_date DESC
                LIMIT ?
            """
            
            cursor.execute(query, (pattern, limit))
            results.extend([dict(row) for row in cursor.fetchall()])
        
        # 重複除去（出願番号単位）
        seen = set()
        unique_results = []
        for r in results:
            if r['app_num'] not in seen:
                seen.add(r['app_num'])
                unique_results.append(r)
        
        # 統一フォーマットで返す
        if unified_format:
            app_nums = [r['app_num'] for r in unique_results[:limit]]
            search_specific = {
                r['app_num']: {
                    'matched_phonetic': r.get('pronunciation'),
                    'search_term': keywords
                } for r in unique_results[:limit]
            }
            return self._format_unified_result(app_nums, search_specific)
        else:
            return unique_results[:limit]
    
    def _get_all_phonetics(self, limit: int) -> List[Dict[str, Any]]:
        """全称呼取得"""
        cursor = self.conn.cursor()
        
        query = """
            SELECT DISTINCT
                tp.app_num,
                tp.pronunciation,
                COALESCE(
                    td.indct_use_t,
                    tsc.standard_char_t,
                    ts.search_use_t
                ) as trademark_name,
                tci.app_date,
                tci.reg_date,
                tci.final_disposition_type,
                tci.law_code,
                tci.class_count
            FROM trademark_pronunciations tp
            LEFT JOIN trademark_search ts ON tp.app_num = ts.app_num
            LEFT JOIN trademark_display td ON tp.app_num = td.app_num
            LEFT JOIN trademark_standard_char tsc ON tp.app_num = tsc.app_num
            LEFT JOIN trademark_case_info tci ON tp.app_num = tci.app_num
            ORDER BY tci.app_date DESC
            LIMIT ?
        """
        
        cursor.execute(query, (limit,))
        return [dict(row) for row in cursor.fetchall()]
    
    # ========== 番号検索 ==========
    
    def search_by_app_num(self, app_num: str, unified_format: bool = True) -> Optional[Dict[str, Any]]:
        """出願番号による検索"""
        if not app_num:
            return None
        
        # 番号の正規化（ハイフンを除去）
        app_num = app_num.replace('-', '').replace('－', '')
        
        cursor = self.conn.cursor()
        
        query = """
            SELECT 
                tci.app_num,
                tci.reg_article_reg_num as reg_num,
                ts.search_use_t as trademark_name,
                tci.app_date,
                tci.reg_date,
                tci.pub_article_gazette_date as public_date,
                tci.final_disposition_type as final_disposition_code,
                tci.final_disposition_date,
                tci.law_code || '-' || tci.class_count as class_info,
                '' as right_holder_name,
                '' as right_holder_address
            FROM trademark_case_info tci
            LEFT JOIN trademark_search ts ON tci.app_num = ts.app_num
            WHERE tci.app_num = ?
        """
        
        cursor.execute(query, (app_num,))
        row = cursor.fetchone()
        
        if row:
            if unified_format:
                # 統一フォーマットで返す
                search_specific = {
                    app_num: {
                        'search_type': 'app_num',
                        'search_term': app_num
                    }
                }
                return self._format_unified_result([app_num], search_specific)[0] if self._format_unified_result([app_num], search_specific) else None
            else:
                return dict(row)
        return None
    
    def search_by_reg_num(self, reg_num: str, unified_format: bool = True) -> Optional[Dict[str, Any]]:
        """登録番号による検索
        
        Args:
            reg_num: 登録番号
            unified_format: 統一フォーマットで返すか
        
        Returns:
            検索結果（単一）
        """
        if not reg_num:
            return None
        
        # 番号の正規化
        reg_num = reg_num.replace('-', '').replace('－', '')
        
        cursor = self.conn.cursor()
        
        # シンプルなクエリ
        query = """
            SELECT 
                tci.app_num,
                tci.reg_article_reg_num as reg_num,
                ts.search_use_t as trademark_name,
                tci.app_date,
                tci.reg_date,
                tci.pub_article_gazette_date as public_date,
                tci.final_disposition_type as final_disposition_code,
                tci.final_disposition_date,
                tci.law_code,
                tci.class_count
            FROM trademark_case_info tci
            LEFT JOIN trademark_search ts ON tci.app_num = ts.app_num
            WHERE tci.reg_article_reg_num = ?
        """
        
        cursor.execute(query, (reg_num,))
        row = cursor.fetchone()
        
        if row:
            if unified_format:
                # 統一フォーマットで返す
                app_num = row['app_num']
                search_specific = {
                    app_num: {
                        'search_type': 'reg_num',
                        'search_term': reg_num
                    }
                }
                results = self._format_unified_result([app_num], search_specific)
                return results[0] if results else None
            else:
                return dict(row)
        return None
    
    # ========== 日付範囲検索 ==========
    
    def search_by_date_range(
        self, 
        date_type: str, 
        start_date: str, 
        end_date: str, 
        limit: int = 100
    ) -> List[Dict[str, Any]]:
        """日付範囲検索
        
        Args:
            date_type: 'app_date'（出願日）, 'reg_date'（登録日）, 'pub_date'（公開日）
            start_date: 開始日（YYYY-MM-DD, YYYY/MM/DD, YYYYMMDD, 和暦形式など）
            end_date: 終了日（YYYY-MM-DD, YYYY/MM/DD, YYYYMMDD, 和暦形式など）
            limit: 最大取得件数
        """
        if date_type not in ['app_date', 'reg_date', 'pub_article_gazette_date']:
            raise ValueError("date_typeは'app_date', 'reg_date', 'pub_article_gazette_date'のいずれかを指定してください")
        
        # 日付を正規化（YYYYMMDD形式に変換）
        # 範囲指定(:)がある場合もparse_date_rangeで処理
        if start_date and ':' in start_date:
            # start_dateに範囲指定が含まれている場合
            norm_start, norm_end = QueryParser.parse_date_range(start_date)
        else:
            # 個別に指定されている場合
            norm_start = QueryParser._parse_single_date(start_date) if start_date else None
            norm_end = QueryParser._parse_single_date(end_date) if end_date else None
        
        if not norm_start and not norm_end:
            return []
        
        cursor = self.conn.cursor()
        
        # WHERE句とパラメータを構築
        if norm_start and norm_end:
            where_clause = f"tci.{date_type} BETWEEN ? AND ?"
            params = (norm_start, norm_end, limit)
        elif norm_start:
            where_clause = f"tci.{date_type} >= ?"
            params = (norm_start, limit)
        else:
            where_clause = f"tci.{date_type} <= ?"
            params = (norm_end, limit)
        
        query = f"""
            SELECT 
                tci.app_num,
                tci.reg_article_reg_num as reg_num,
                ts.search_use_t as trademark_name,
                tci.app_date,
                tci.reg_date,
                tci.pub_article_gazette_date as public_date,
                tci.final_disposition_type as final_disposition_code,
                tci.final_disposition_date,
                tci.law_code || '-' || tci.class_count as class_info
            FROM trademark_case_info tci
            LEFT JOIN trademark_search ts ON tci.app_num = ts.app_num
            WHERE {where_clause}
            ORDER BY tci.{date_type} DESC
            LIMIT ?
        """
        
        cursor.execute(query, params)
        
        results = []
        for row in cursor.fetchall():
            results.append(dict(row))
        
        return results
    
    # ========== 最終処分コード定義（補助ボタン用） ==========
    
    FINAL_DISPOSITION_CODES = {
        'A01': '登録査定',
        'A02': '拒絶査定',
        'A03': '審決（請求成立）',
        'A04': '審決（請求不成立）',
        'A05': '審決（請求却下）',
        'A06': '審決（無効）',
        'A07': '審決（取消）',
        'A20': '出願取下',
        'A21': '出願放棄',
        'A22': '出願却下',
        'A23': '書換登録申請却下',
        'A30': '存続期間満了',
        'A31': '商標権消滅',
        'A32': '無効',
        'A33': '取消',
        'A40': '放棄（全部）',
        'A41': '放棄（一部）',
        'A42': '査定系審判係属中',
        'A43': '当事者系審判係属中',
        'A44': '異議申立係属中',
        'A45': '却下処分',
        'A46': '審査中',
        'A47': '方式審査中'
    }
    
    # ========== 最終処分検索（TMSONAR ID:130） ==========
    
    def search_by_final_disposition(self, codes: str, limit: int = 100) -> List[Dict[str, Any]]:
        """最終処分による検索（TMSONAR ID:130）
        
        Args:
            codes: 最終処分コード（複数可、スペース/カンマ区切り）
                   例: A01:登録査定, A02:拒絶査定, A0?:査定系全部
                   ?で全指定
            limit: 最大取得件数
        
        Returns:
            検索結果リスト
        """
        terms = QueryParser.split_terms(codes)
        if not terms or terms == ['?']:
            return self._get_all_final_dispositions(limit)
        
        cursor = self.conn.cursor()
        results = []
        
        for term in terms:
            if term.endswith('?'):
                # 前方一致検索
                prefix = term[:-1]
                query = """
                    SELECT DISTINCT
                        tci.app_num,
                        tci.final_disposition_type,
                        tci.final_disposition_date,
                        ts.search_use_t as trademark_name,
                        tci.app_date,
                        tci.reg_date,
                        tci.reg_article_reg_num as reg_num,
                        tci.law_code,
                        tci.class_count
                    FROM trademark_case_info tci
                    LEFT JOIN trademark_search ts ON tci.app_num = ts.app_num
                    WHERE tci.final_disposition_type LIKE ? ESCAPE '\\'
                    ORDER BY tci.app_date DESC
                    LIMIT ?
                """
                pattern = prefix.replace('_', '\\_').replace('%', '\\%') + '%'
                cursor.execute(query, (pattern, limit))
            else:
                # 完全一致検索
                query = """
                    SELECT DISTINCT
                        tci.app_num,
                        tci.final_disposition_type,
                        tci.final_disposition_date,
                        ts.search_use_t as trademark_name,
                        tci.app_date,
                        tci.reg_date,
                        tci.reg_article_reg_num as reg_num,
                        tci.law_code,
                        tci.class_count
                    FROM trademark_case_info tci
                    LEFT JOIN trademark_search ts ON tci.app_num = ts.app_num
                    WHERE tci.final_disposition_type = ?
                    ORDER BY tci.app_date DESC
                    LIMIT ?
                """
                cursor.execute(query, (term, limit))
            
            results.extend([dict(row) for row in cursor.fetchall()])
        
        # 重複除去
        seen = set()
        unique_results = []
        for r in results:
            if r['app_num'] not in seen:
                seen.add(r['app_num'])
                unique_results.append(r)
        
        return unique_results[:limit]
    
    def _get_all_final_dispositions(self, limit: int) -> List[Dict[str, Any]]:
        """全最終処分取得"""
        cursor = self.conn.cursor()
        query = """
            SELECT DISTINCT
                tci.app_num,
                tci.final_disposition_type,
                tci.final_disposition_date,
                ts.search_use_t as trademark_name,
                tci.app_date,
                tci.reg_date,
                tci.reg_article_reg_num as reg_num,
                tci.law_code,
                tci.class_count
            FROM trademark_case_info tci
            LEFT JOIN trademark_search ts ON tci.app_num = ts.app_num
            WHERE tci.final_disposition_type IS NOT NULL AND tci.final_disposition_type != ''
            ORDER BY tci.app_date DESC
            LIMIT ?
        """
        cursor.execute(query, (limit,))
        return [dict(row) for row in cursor.fetchall()]
    
    # ========== ステータス検索（旧インターフェース、互換性維持） ==========
    
    def search_by_status(
        self, 
        final_disposition_type: str = None, 
        final_disposition_date: str = None,
        law_code: str = None,
        class_count: str = None,
        limit: int = 100
    ) -> List[Dict[str, Any]]:
        """ステータス検索
        
        Args:
            final_disposition_type: 最終処分種別
            final_disposition_date: 最終処分日
            law_code: 四法コード
            class_count: 区分数
            limit: 最大取得件数
        """
        cursor = self.conn.cursor()
        
        conditions = []
        params = []
        
        if final_disposition_type:
            conditions.append("tci.final_disposition_type = ?")
            params.append(final_disposition_type)
        
        if final_disposition_date:
            conditions.append("tci.final_disposition_date = ?")
            params.append(final_disposition_date)
        
        if law_code:
            conditions.append("tci.law_code = ?")
            params.append(law_code)
        
        if class_count:
            conditions.append("tci.class_count = ?")
            params.append(class_count)
        
        if not conditions:
            return []
        
        where_clause = " AND ".join(conditions)
        
        query = f"""
            SELECT 
                tci.app_num,
                tci.reg_article_reg_num as reg_num,
                ts.search_use_t as trademark_name,
                tci.app_date,
                tci.reg_date,
                tci.final_disposition_type as final_disposition_code,
                tci.final_disposition_date,
                tci.law_code || '-' || tci.class_count as class_info
            FROM trademark_case_info tci
            LEFT JOIN trademark_search ts ON tci.app_num = ts.app_num
            WHERE {where_clause}
            ORDER BY tci.app_date DESC
            LIMIT ?
        """
        
        params.append(limit)
        cursor.execute(query, params)
        
        results = []
        for row in cursor.fetchall():
            results.append(dict(row))
        
        return results
    
    # ========== 国際分類（類展開）検索（TMSONAR ID:104） ==========
    
    def search_by_international_class(self, class_nums: str, limit: int = 100) -> List[Dict[str, Any]]:
        """国際分類（類似群コード展開）検索（TMSONAR ID:104）
        
        Args:
            class_nums: 類番号（複数可、スペース/カンマ区切り）
                       例: '09', '09,42', '01 03 05'
                       2桁類番号を指定すると、その類に属する類似群コードに展開
            limit: 最大取得件数
        
        Returns:
            検索結果リスト
        """
        terms = QueryParser.split_terms(class_nums)
        if not terms or terms == ['?']:
            return self._get_all_class_items(limit)
        
        cursor = self.conn.cursor()
        results = []
        
        for class_num in terms:
            # 2桁にゼロパディング
            class_num = class_num.zfill(2)
            
            # その類番号を持つ商標を検索
            query = """
                SELECT DISTINCT
                    tsgc.app_num,
                    tsgc.class_num,
                    tsgc.similar_group_codes,
                    ts.search_use_t as trademark_name,
                    tci.app_date,
                    tci.reg_date,
                    tci.reg_article_reg_num as reg_num,
                    tci.final_disposition_type,
                    tci.law_code,
                    tci.class_count
                FROM trademark_similar_group_codes tsgc
                LEFT JOIN trademark_search ts ON tsgc.app_num = ts.app_num
                LEFT JOIN trademark_case_info tci ON tsgc.app_num = tci.app_num
                WHERE tsgc.class_num = ?
                ORDER BY tci.app_date DESC
                LIMIT ?
            """
            cursor.execute(query, (class_num, limit))
            results.extend([dict(row) for row in cursor.fetchall()])
        
        # 重複除去
        seen = set()
        unique_results = []
        for r in results:
            if r['app_num'] not in seen:
                seen.add(r['app_num'])
                unique_results.append(r)
        
        return unique_results[:limit]
    
    def _get_all_class_items(self, limit: int) -> List[Dict[str, Any]]:
        """全類の商標取得"""
        cursor = self.conn.cursor()
        query = """
            SELECT DISTINCT
                tsgc.app_num,
                tsgc.class_num,
                tsgc.similar_group_codes,
                ts.search_use_t as trademark_name,
                tci.app_date,
                tci.reg_date,
                tci.reg_article_reg_num as reg_num,
                tci.final_disposition_type,
                tci.law_code,
                tci.class_count
            FROM trademark_similar_group_codes tsgc
            LEFT JOIN trademark_search ts ON tsgc.app_num = ts.app_num
            LEFT JOIN trademark_case_info tci ON tsgc.app_num = tci.app_num
            WHERE tsgc.class_num IS NOT NULL
            ORDER BY tci.app_date DESC
            LIMIT ?
        """
        cursor.execute(query, (limit,))
        return [dict(row) for row in cursor.fetchall()]
    
    # ========== 類似群コード検索 ==========
    
    def search_by_similar_group(self, codes: str, limit: int = 100, unified_format: bool = True) -> List[Dict[str, Any]]:
        """類似群コード検索（TMSONAR準拠）
        
        Args:
            codes: 類似群コード（複数可、末尾?で前方一致）
            limit: 最大取得件数
            unified_format: 統一フォーマットで返すか
        
        Returns:
            検索結果リスト
        """
        terms = QueryParser.split_terms(codes)
        if not terms:
            return []
        
        # 全指定の場合
        if terms == ['?']:
            results = self._get_all_similar_groups(limit)
            if unified_format:
                app_nums = [r['app_num'] for r in results]
                search_specific = {
                    r['app_num']: {
                        'matched_similar_group': r.get('similar_group_codes'),
                        'search_term': codes
                    } for r in results
                }
                return self._format_unified_result(app_nums, search_specific)
            else:
                return results
        
        results = []
        for term in terms:
            cursor = self.conn.cursor()
            
            if term.endswith('?') or term.endswith('？'):
                # 前方一致
                prefix = term[:-1]
                # カンマ区切りを考慮：先頭、中間、末尾のいずれかでマッチ
                pattern = f"%{prefix}%"
                where_clause = """(
                    tsgc.similar_group_codes LIKE ? OR
                    tsgc.similar_group_codes LIKE ? OR
                    tsgc.similar_group_codes LIKE ?
                )"""
                params = (f"{prefix}%", f"%,{prefix}%", f"%,{prefix}")
            else:
                # 完全一致
                # カンマ区切りを考慮：先頭、中間、末尾のいずれかで完全一致
                where_clause = """(
                    tsgc.similar_group_codes = ? OR
                    tsgc.similar_group_codes LIKE ? OR
                    tsgc.similar_group_codes LIKE ? OR
                    tsgc.similar_group_codes LIKE ?
                )"""
                params = (term, f"{term},%", f"%,{term},%", f"%,{term}")
            
            query = f"""
                SELECT DISTINCT
                    tsgc.app_num,
                    tsgc.similar_group_codes,
                    COALESCE(
                        td.indct_use_t,
                        tsc.standard_char_t,
                        ts.search_use_t
                    ) as trademark_name,
                    tci.app_date,
                    tci.reg_date,
                    tci.final_disposition_type,
                    tci.law_code,
                    tci.class_count
                FROM trademark_similar_group_codes tsgc
                INNER JOIN trademark_case_info tci ON tsgc.app_num = tci.app_num
                LEFT JOIN trademark_search ts ON tsgc.app_num = ts.app_num
                LEFT JOIN trademark_display td ON tsgc.app_num = td.app_num
                LEFT JOIN trademark_standard_char tsc ON tsgc.app_num = tsc.app_num
                WHERE {where_clause}
                ORDER BY tci.app_date DESC
                LIMIT ?
            """
            
            cursor.execute(query, params + (limit,))
            results.extend([dict(row) for row in cursor.fetchall()])
        
        # 重複除去
        seen = set()
        unique_results = []
        for r in results:
            if r['app_num'] not in seen:
                seen.add(r['app_num'])
                unique_results.append(r)
        
        # 統一フォーマットで返す
        if unified_format:
            app_nums = [r['app_num'] for r in unique_results[:limit]]
            search_specific = {
                r['app_num']: {
                    'matched_similar_group': r.get('similar_group_codes'),
                    'search_term': codes
                } for r in unique_results[:limit]
            }
            return self._format_unified_result(app_nums, search_specific)
        else:
            return unique_results[:limit]
    
    def _get_all_similar_groups(self, limit: int) -> List[Dict[str, Any]]:
        """全類似群コード取得"""
        cursor = self.conn.cursor()
        query = """
            SELECT DISTINCT
                tsgc.app_num,
                tsgc.similar_group_codes,
                COALESCE(
                    td.indct_use_t,
                    tsc.standard_char_t,
                    ts.search_use_t
                ) as trademark_name,
                tci.app_date,
                tci.reg_date,
                tci.final_disposition_type,
                tci.law_code,
                tci.class_count
            FROM trademark_similar_group_codes tsgc
            INNER JOIN trademark_case_info tci ON tsgc.app_num = tci.app_num
            LEFT JOIN trademark_search ts ON tsgc.app_num = ts.app_num
            LEFT JOIN trademark_display td ON tsgc.app_num = td.app_num
            LEFT JOIN trademark_standard_char tsc ON tsgc.app_num = tsc.app_num
            ORDER BY tci.app_date DESC
            LIMIT ?
        """
        cursor.execute(query, (limit,))
        return [dict(row) for row in cursor.fetchall()]
    
    # ========== 商品・役務検索 ==========
    
    def search_goods_services(self, keywords: str, limit: int = 100, item_and: bool = True, unified_format: bool = True) -> List[Dict[str, Any]]:
        """指定商品/役務検索（TMSONAR準拠）
        
        注意: trademark_goods_servicesテーブルには正規化カラム（goods_services_name_norm）が
              存在しないため、オリジナルテキストに対してLIKE検索を行う。
              将来的にDB改修で正規化カラムを追加すれば、より高精度な検索が可能。
        
        Args:
            keywords: 検索キーワード（複数可）
            limit: 最大取得件数
            item_and: True=項目内AND, False=項目間AND
            unified_format: 統一フォーマットで返すか
        
        Returns:
            検索結果リスト
        """
        terms = QueryParser.split_terms(keywords)
        if not terms or terms == ['?']:
            return self._get_all_goods_services(limit)
        
        # 各キーワードを正規化
        # ※DBに正規化カラムがないため、検索パターンを正規化してLIKE検索
        normalized_terms = []
        for term in terms:
            normalized = TextNormalizer.normalize_text_jp(term)
            pattern = f"%{QueryParser.wildcard_like(normalized)}%"
            normalized_terms.append(pattern)
        
        cursor = self.conn.cursor()
        
        if item_and:
            # 項目内AND（同一goods_seq_num内で全キーワードがマッチ）
            conditions = []
            for pattern in normalized_terms:
                conditions.append(f"goods_services_name LIKE ? ESCAPE '\\'") 
            
            where_clause = " AND ".join(conditions)
            
            query = f"""
                SELECT DISTINCT
                    tgs.app_num,
                    tgs.class_num,
                    tgs.goods_services_name,
                    COALESCE(
                        td.indct_use_t,
                        tsc.standard_char_t,
                        ts.search_use_t
                    ) as trademark_name,
                    tci.app_date,
                    tci.reg_date,
                    tci.final_disposition_type,
                    tci.law_code,
                    tci.class_count
                FROM trademark_goods_services tgs
                INNER JOIN trademark_case_info tci ON tgs.app_num = tci.app_num
                LEFT JOIN trademark_search ts ON tgs.app_num = ts.app_num
                LEFT JOIN trademark_display td ON tgs.app_num = td.app_num
                LEFT JOIN trademark_standard_char tsc ON tgs.app_num = tsc.app_num
                WHERE {where_clause}
                ORDER BY tci.app_date DESC
                LIMIT ?
            """
            
            params = normalized_terms + [limit]
            cursor.execute(query, params)
            results = [dict(row) for row in cursor.fetchall()]
        else:
            # 項目間AND（異なるgoods_seq_numでもOK）- 簡略化した実装
            results = self._search_goods_services_between_items(normalized_terms, limit, unified_format)
        
        if unified_format:
            app_nums = [r['app_num'] for r in results]
            search_specific = {
                r['app_num']: {
                    'matched_goods_services': r.get('goods_services_name'),
                    'search_term': keywords
                } for r in results
            }
            return self._format_unified_result(app_nums, search_specific)
        else:
            return results
    
    def _search_goods_services_between_items(self, patterns: List[str], limit: int, unified_format: bool = True) -> List[Dict[str, Any]]:
        """項目間AND検索"""
        # 各パターンでマッチする出願番号を取得
        cursor = self.conn.cursor()
        app_num_sets = []
        
        for pattern in patterns:
            query = """
                SELECT DISTINCT app_num
                FROM trademark_goods_services
                WHERE goods_services_name LIKE ? ESCAPE '\\'
            """
            cursor.execute(query, (pattern,))
            app_nums = {row[0] for row in cursor.fetchall()}
            app_num_sets.append(app_nums)
        
        # 全パターンにマッチする出願番号の交差を取る
        if app_num_sets:
            common_app_nums = set.intersection(*app_num_sets)
        else:
            return []
        
        if not common_app_nums:
            return []
        
        # 結果を取得
        placeholders = ','.join(['?'] * len(common_app_nums))
        query = f"""
            SELECT DISTINCT
                tgs.app_num,
                tgs.class_num,
                GROUP_CONCAT(DISTINCT tgs.goods_services_name, '; ') as goods_services_name,
                COALESCE(
                    td.indct_use_t,
                    tsc.standard_char_t,
                    ts.search_use_t
                ) as trademark_name,
                tci.app_date,
                tci.reg_date,
                tci.final_disposition_type,
                tci.law_code,
                tci.class_count
            FROM trademark_goods_services tgs
            INNER JOIN trademark_case_info tci ON tgs.app_num = tci.app_num
            LEFT JOIN trademark_search ts ON tgs.app_num = ts.app_num
            LEFT JOIN trademark_display td ON tgs.app_num = td.app_num
            LEFT JOIN trademark_standard_char tsc ON tgs.app_num = tsc.app_num
            WHERE tgs.app_num IN ({placeholders})
            GROUP BY tgs.app_num, tgs.class_num
            ORDER BY tci.app_date DESC
            LIMIT ?
        """
        
        params = list(common_app_nums) + [limit]
        cursor.execute(query, params)
        results = [dict(row) for row in cursor.fetchall()]
        
        # unified_formatは呼び出し元で処理されるので、ここでは結果を返すだけ
        return results
    
    def _get_all_goods_services(self, limit: int) -> List[Dict[str, Any]]:
        """全商品/役務取得"""
        cursor = self.conn.cursor()
        query = """
            SELECT DISTINCT
                tgs.app_num,
                tgs.class_num,
                tgs.goods_services_name,
                ts.search_use_t as trademark_name,
                tci.app_date,
                tci.reg_date,
                tci.final_disposition_type,
                tci.law_code,
                tci.class_count
            FROM trademark_goods_services tgs
            LEFT JOIN trademark_search ts ON tgs.app_num = ts.app_num
            LEFT JOIN trademark_case_info tci ON tgs.app_num = tci.app_num
            ORDER BY tci.app_date DESC
            LIMIT ?
        """
        cursor.execute(query, (limit,))
        return [dict(row) for row in cursor.fetchall()]
    
    # ========== 出願人/権利者検索 ==========
    
    def search_applicant(self, keywords: str, limit: int = 100, use_or: bool = False, unified_format: bool = True) -> List[Dict[str, Any]]:
        """出願人/権利者検索（type-102）
        
        Args:
            keywords: 検索キーワード（複数可、スペース=AND、カンマ=OR）
            limit: 最大取得件数
            use_or: True=OR検索、False=AND検索（スペース区切り時）
            unified_format: 統一フォーマットで返すか
        
        Returns:
            検索結果リスト
        """
        # カンマ区切りは常にOR
        if ',' in keywords or '，' in keywords:
            terms = QueryParser.split_terms(keywords)
            use_or = True
        else:
            # スペース区切り
            terms = keywords.split()
        
        if not terms or terms == ['?']:
            return self._get_all_applicants(limit)
        
        # 各キーワードを正規化（会社種別除去）と半角・全角両パターン生成
        normalized_terms = []
        for term in terms:
            # 正規化（NFKC変換で全角→半角に統一、会社種別除去）
            normalized = TextNormalizer.normalize_company_name(term)
            
            # 半角パターン（正規化後そのまま）
            pattern_hankaku = f"%{QueryParser.wildcard_like(normalized)}%"
            normalized_terms.append(pattern_hankaku)
            
            # 全角パターンも生成（半角英数字を全角に変換）
            zenkaku = ''
            for c in normalized:
                if 'A' <= c <= 'Z':
                    zenkaku += chr(ord(c) - ord('A') + ord('Ａ'))
                elif 'a' <= c <= 'z':
                    zenkaku += chr(ord(c) - ord('a') + ord('ａ'))
                elif '0' <= c <= '9':
                    zenkaku += chr(ord(c) - ord('0') + ord('０'))
                else:
                    zenkaku += c
            pattern_zenkaku = f"%{QueryParser.wildcard_like(zenkaku)}%"
            normalized_terms.append(pattern_zenkaku)
        
        cursor = self.conn.cursor()
        
        # WHERE句構築（申請人マスタの名前は正規化後にマッチング）
        conditions = []
        for i in range(0, len(normalized_terms), 2):  # 半角と全角のペアで処理
            # 申請人名を正規化してマッチング（会社種別除去）＋ 半角・全角両方でマッチ
            conditions.append("""(
                REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
                    COALESCE(ari.applicant_name, ''),
                    '株式会社', ''), '有限会社', ''), '合同会社', ''),
                    '合資会社', ''), '合名会社', ''), '一般社団法人', '')
                LIKE ? OR 
                REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
                    COALESCE(ari.applicant_name, ''),
                    '株式会社', ''), '有限会社', ''), '合同会社', ''),
                    '合資会社', ''), '合名会社', ''), '一般社団法人', '')
                LIKE ? OR
                taa.applicant_agent_code LIKE ? OR
                taa.applicant_agent_code LIKE ?
            )""")
        
        if use_or:
            where_clause = " OR ".join(conditions)
        else:
            where_clause = " AND ".join(conditions)
        
        # パラメータ構築（半角・全角の各パターンを2回使用）
        params = []
        for i in range(0, len(normalized_terms), 2):
            params.extend([normalized_terms[i], normalized_terms[i+1], normalized_terms[i], normalized_terms[i+1]])
        params.append(limit)
        
        query = f"""
            SELECT DISTINCT
                taa.app_num,
                ari.applicant_name as applicant_name,
                ari.applicant_address as applicant_address,
                COALESCE(
                    td.indct_use_t,
                    tsc.standard_char_t,
                    ts.search_use_t
                ) as trademark_name,
                tci.app_date,
                tci.reg_date,
                tci.reg_article_reg_num as reg_num,
                tci.final_disposition_type,
                tci.law_code,
                tci.class_count
            FROM trademark_applicants_agents taa
            INNER JOIN applicant_registration_info ari 
                ON taa.applicant_agent_code = ari.applicant_code
            LEFT JOIN trademark_search ts ON taa.app_num = ts.app_num
            LEFT JOIN trademark_display td ON taa.app_num = td.app_num
            LEFT JOIN trademark_standard_char tsc ON taa.app_num = tsc.app_num
            INNER JOIN trademark_case_info tci ON taa.app_num = tci.app_num
            WHERE ({where_clause})
            AND ari.applicant_name IS NOT NULL
            AND taa.applicant_agent_type = '1'
            ORDER BY tci.app_date DESC
            LIMIT ?
        """
        
        # 構築したパラメータを使用
        cursor.execute(query, params)
        results = [dict(row) for row in cursor.fetchall()]
        
        # 統一フォーマットで返す
        if unified_format:
            app_nums = [r['app_num'] for r in results if r.get('app_num')]
            search_specific = {
                r['app_num']: {
                    'matched_applicant': r.get('applicant_name'),
                    'search_term': keywords
                } for r in results if r.get('app_num')
            }
            return self._format_unified_result(app_nums[:limit], search_specific)
        else:
            return results
    
    def _get_all_applicants(self, limit: int) -> List[Dict[str, Any]]:
        """全出願人取得"""
        cursor = self.conn.cursor()
        query = """
            SELECT DISTINCT
                taa.app_num,
                taa.applicant_name,
                taa.agent_name,
                ts.search_use_t as trademark_name,
                tci.app_date,
                tci.reg_date,
                tci.reg_article_reg_num as reg_num,
                tci.final_disposition_type,
                tci.law_code,
                tci.class_count
            FROM trademark_applicants_agents taa
            LEFT JOIN trademark_search ts ON taa.app_num = ts.app_num
            LEFT JOIN trademark_case_info tci ON taa.app_num = tci.app_num
            WHERE taa.applicant_name IS NOT NULL
            ORDER BY tci.app_date DESC
            LIMIT ?
        """
        cursor.execute(query, (limit,))
        return [dict(row) for row in cursor.fetchall()]
    
    # ========== 法区分＋類検索 ==========
    
    def search_by_law_class(self, expr: str, limit: int = 100) -> List[Dict[str, Any]]:
        """法区分＋類検索（TMSONAR ID:105）
        
        Args:
            expr: 検索式（例: 'Y01', '?09', 'W?'）
                - 完全一致: 'Y01' (法区分Y、類01)
                - 類のみ: '?09' (任意の法区分、類09)
                - 法区分のみ: 'W?' (法区分W、任意の類)
                - 全指定: '?' または空文字
            limit: 最大取得件数
        
        Returns:
            検索結果リスト
        """
        if not expr or expr.strip() in ['？', '?']:
            # 全指定
            return self._get_all_law_class(limit)
        
        law_code, class_num = QueryParser.parse_law_class(expr)
        
        cursor = self.conn.cursor()
        conditions = []
        params = []
        
        if law_code:
            conditions.append("tci.law_code = ?")
            params.append(law_code)
        
        if class_num:
            # class_numは2桁の文字列として扱う
            # trademark_goods_servicesテーブルのclass_numと結合
            conditions.append("tgs.class_num = ?")
            params.append(class_num)
        
        if not conditions:
            return []
        
        where_clause = " AND ".join(conditions)
        params.append(limit)
        
        query = f"""
            SELECT DISTINCT
                tci.app_num,
                tci.reg_article_reg_num as reg_num,
                ts.search_use_t as trademark_name,
                tci.law_code,
                tgs.class_num,
                tci.law_code || tgs.class_num as law_class,
                tci.app_date,
                tci.reg_date,
                tci.final_disposition_type,
                tci.class_count
            FROM trademark_case_info tci
            LEFT JOIN trademark_goods_services tgs ON tci.app_num = tgs.app_num
            LEFT JOIN trademark_search ts ON tci.app_num = ts.app_num
            WHERE {where_clause}
            ORDER BY tci.app_date DESC
            LIMIT ?
        """
        
        cursor.execute(query, params)
        return [dict(row) for row in cursor.fetchall()]
    
    def _get_all_law_class(self, limit: int) -> List[Dict[str, Any]]:
        """全法区分＋類取得"""
        cursor = self.conn.cursor()
        query = """
            SELECT DISTINCT
                tci.app_num,
                tci.reg_article_reg_num as reg_num,
                ts.search_use_t as trademark_name,
                tci.law_code,
                tgs.class_num,
                tci.law_code || tgs.class_num as law_class,
                tci.app_date,
                tci.reg_date,
                tci.final_disposition_type,
                tci.class_count
            FROM trademark_case_info tci
            LEFT JOIN trademark_goods_services tgs ON tci.app_num = tgs.app_num
            LEFT JOIN trademark_search ts ON tci.app_num = ts.app_num
            ORDER BY tci.app_date DESC
            LIMIT ?
        """
        cursor.execute(query, (limit,))
        return [dict(row) for row in cursor.fetchall()]
    
    # ========== ウィーンコード検索 ==========
    
    def search_by_vienna_code(self, codes: str, limit: int = 100, unified_format: bool = False) -> List[Dict[str, Any]]:
        """ウィーンコード検索（TMSONAR ID:112）
        
        Args:
            codes: ウィーンコード（複数可、スペース/カンマ区切り）
                  階層的前方一致対応（例: '1.3.20' → '1.3.20.01'等を含む）
            limit: 最大取得件数
            unified_format: 統一フォーマットで返すか
        
        Returns:
            検索結果リスト
        """
        terms = QueryParser.split_terms(codes)
        if not terms or terms == ['?']:
            results = self._get_all_vienna_codes(limit)
            if unified_format:
                app_nums = [r['app_num'] for r in results]
                search_specific = {
                    r['app_num']: {
                        'matched_vienna_codes': r.get('vienna_codes'),
                        'search_term': codes
                    } for r in results
                }
                return self._format_unified_result(app_nums, search_specific)
            else:
                return results
        
        results = []
        for term in terms:
            cursor = self.conn.cursor()
            
            # ウィーンコードの階層分解（大分類.中分類.小分類.細分類）
            parts = term.split('.')
            conditions = []
            params = []
            
            if len(parts) >= 1 and parts[0]:
                # 大分類は2桁でゼロパディング
                large_class = parts[0].zfill(2)
                conditions.append("large_class = ?")
                params.append(large_class)
            
            if len(parts) >= 2 and parts[1]:
                # 中分類も2桁でゼロパディング
                mid_class = parts[1].zfill(2)
                conditions.append("mid_class = ?")
                params.append(mid_class)
            
            if len(parts) >= 3 and parts[2]:
                # 小分類も2桁でゼロパディング
                small_class = parts[2].zfill(2)
                conditions.append("small_class = ?")
                params.append(small_class)
            
            if len(parts) >= 4 and parts[3]:
                # 細分類も2桁でゼロパディング
                complement = parts[3].zfill(2)
                conditions.append("complement_sub_class = ?")
                params.append(complement)
            
            if not conditions:
                continue
            
            where_clause = " AND ".join(conditions)
            params.append(limit)
            
            query = f"""
                WITH vienna_matches AS (
                    SELECT DISTINCT
                        app_num,
                        large_class || '.' || mid_class || '.' || 
                        small_class || '.' || complement_sub_class as vienna_code
                    FROM trademark_vienna_codes
                    WHERE {where_clause}
                ),
                vienna_grouped AS (
                    SELECT 
                        app_num,
                        GROUP_CONCAT(vienna_code, ', ') as vienna_codes
                    FROM vienna_matches
                    GROUP BY app_num
                )
                SELECT 
                    vg.app_num,
                    vg.vienna_codes,
                    ts.search_use_t as trademark_name,
                    tci.app_date,
                    tci.reg_date,
                    tci.reg_article_reg_num as reg_num,
                    tci.final_disposition_type,
                    tci.law_code,
                    tci.class_count
                FROM vienna_grouped vg
                LEFT JOIN trademark_search ts ON vg.app_num = ts.app_num
                LEFT JOIN trademark_case_info tci ON vg.app_num = tci.app_num
                ORDER BY tci.app_date DESC
                LIMIT ?
            """
            
            cursor.execute(query, params)
            results.extend([dict(row) for row in cursor.fetchall()])
        
        # 重複除去（app_numベースで）
        seen = set()
        unique_results = []
        for r in results:
            if r['app_num'] not in seen:
                seen.add(r['app_num'])
                unique_results.append(r)
        
        # 統一フォーマットで返す
        if unified_format:
            app_nums = [r['app_num'] for r in unique_results[:limit]]
            search_specific = {
                r['app_num']: {
                    'matched_vienna_codes': r.get('vienna_codes'),
                    'search_term': codes
                } for r in unique_results[:limit]
            }
            return self._format_unified_result(app_nums, search_specific)
        else:
            return unique_results[:limit]
    
    def _get_all_vienna_codes(self, limit: int) -> List[Dict[str, Any]]:
        """全ウィーンコード取得"""
        cursor = self.conn.cursor()
        query = """
            WITH vienna_all AS (
                SELECT DISTINCT
                    app_num,
                    large_class || '.' || mid_class || '.' || 
                    small_class || '.' || complement_sub_class as vienna_code
                FROM trademark_vienna_codes
            ),
            vienna_grouped AS (
                SELECT 
                    app_num,
                    GROUP_CONCAT(vienna_code, ', ') as vienna_codes
                FROM vienna_all
                GROUP BY app_num
            )
            SELECT 
                vg.app_num,
                vg.vienna_codes,
                ts.search_use_t as trademark_name,
                tci.app_date,
                tci.reg_date,
                tci.reg_article_reg_num as reg_num,
                tci.final_disposition_type,
                tci.law_code,
                tci.class_count
            FROM vienna_grouped vg
            LEFT JOIN trademark_search ts ON vg.app_num = ts.app_num
            LEFT JOIN trademark_case_info tci ON vg.app_num = tci.app_num
            ORDER BY tci.app_date DESC
            LIMIT ?
        """
        cursor.execute(query, (limit,))
        return [dict(row) for row in cursor.fetchall()]
    
    # ========== 商標の詳細な説明検索 ==========
    
    def search_detailed_description(self, keywords: str, limit: int = 100) -> List[Dict[str, Any]]:
        """商標の詳細な説明検索（TMSONAR ID:126）
        
        Args:
            keywords: 検索キーワード（複数可、部分一致）
            limit: 最大取得件数
        
        Returns:
            検索結果リスト
        """
        terms = QueryParser.split_terms(keywords)
        if not terms or terms == ['?']:
            return self._get_all_detailed_descriptions(limit)
        
        results = []
        for term in terms:
            # 正規化（基本的な正規化のみ）
            normalized = TextNormalizer.normalize_text_jp(term)
            pattern = f"%{QueryParser.wildcard_like(normalized)}%"
            
            cursor = self.conn.cursor()
            query = """
                SELECT DISTINCT
                    tdd.app_num,
                    tdd.detailed_description,
                    ts.search_use_t as trademark_name,
                    tci.app_date,
                    tci.reg_date,
                    tci.reg_article_reg_num as reg_num,
                    tci.final_disposition_type,
                    tci.law_code,
                    tci.class_count
                FROM trademark_detailed_descriptions tdd
                LEFT JOIN trademark_search ts ON tdd.app_num = ts.app_num
                LEFT JOIN trademark_case_info tci ON tdd.app_num = tci.app_num
                WHERE tdd.detailed_description LIKE ? ESCAPE '\\'
                ORDER BY tci.app_date DESC
                LIMIT ?
            """
            
            cursor.execute(query, (pattern, limit))
            results.extend([dict(row) for row in cursor.fetchall()])
        
        # 重複除去
        seen = set()
        unique_results = []
        for r in results:
            if r['app_num'] not in seen:
                seen.add(r['app_num'])
                unique_results.append(r)
        
        return unique_results[:limit]
    
    def _get_all_detailed_descriptions(self, limit: int) -> List[Dict[str, Any]]:
        """全詳細説明取得"""
        cursor = self.conn.cursor()
        query = """
            SELECT DISTINCT
                tdd.app_num,
                tdd.detailed_description,
                ts.search_use_t as trademark_name,
                tci.app_date,
                tci.reg_date,
                tci.reg_article_reg_num as reg_num,
                tci.final_disposition_type,
                tci.law_code,
                tci.class_count
            FROM trademark_detailed_descriptions tdd
            LEFT JOIN trademark_search ts ON tdd.app_num = ts.app_num
            LEFT JOIN trademark_case_info tci ON tdd.app_num = tci.app_num
            ORDER BY tci.app_date DESC
            LIMIT ?
        """
        cursor.execute(query, (limit,))
        return [dict(row) for row in cursor.fetchall()]
    
    # ========== 出願種別検索 ==========
    
    def search_by_app_type(self, types: str, limit: int = 100) -> List[Dict[str, Any]]:
        """出願種別検索（TMSONAR ID:127）
        
        Args:
            types: 出願種別コード（複数可、スペース/カンマ区切り）
                  01:通常, 02:分割, 03:変更, 04:優先, 06:防護, 07:防護更新,
                  08:団体, 09:地域団体, 10:連合, 11:書換, 13:重複, 14:国際
            limit: 最大取得件数
        
        Returns:
            検索結果リスト
        """
        terms = QueryParser.split_terms(types)
        if not terms or terms == ['?']:
            return self._get_all_app_types(limit)
        
        # app_type1〜app_type5のいずれかに指定コードが含まれる商標を検索
        cursor = self.conn.cursor()
        
        # OR条件構築（各typeについて、app_type1〜5のいずれかでマッチ）
        type_conditions = []
        params = []
        for type_code in terms:
            type_code = type_code.zfill(2)  # 2桁にゼロパディング
            subconditions = []
            for i in range(1, 6):
                subconditions.append(f"tci.app_type{i} = ?")
                params.append(type_code)
            type_conditions.append(f"({' OR '.join(subconditions)})")
        
        where_clause = " OR ".join(type_conditions)
        params.append(limit)
        
        query = f"""
            SELECT DISTINCT
                tci.app_num,
                tci.app_type1,
                tci.app_type2,
                tci.app_type3,
                tci.app_type4,
                tci.app_type5,
                ts.search_use_t as trademark_name,
                tci.app_date,
                tci.reg_date,
                tci.reg_article_reg_num as reg_num,
                tci.final_disposition_type,
                tci.law_code,
                tci.class_count
            FROM trademark_case_info tci
            LEFT JOIN trademark_search ts ON tci.app_num = ts.app_num
            WHERE {where_clause}
            ORDER BY tci.app_date DESC
            LIMIT ?
        """
        
        cursor.execute(query, params)
        return [dict(row) for row in cursor.fetchall()]
    
    def _get_all_app_types(self, limit: int) -> List[Dict[str, Any]]:
        """全出願種別取得"""
        cursor = self.conn.cursor()
        query = """
            SELECT DISTINCT
                tci.app_num,
                tci.app_type1,
                tci.app_type2,
                tci.app_type3,
                tci.app_type4,
                tci.app_type5,
                ts.search_use_t as trademark_name,
                tci.app_date,
                tci.reg_date,
                tci.reg_article_reg_num as reg_num,
                tci.final_disposition_type,
                tci.law_code,
                tci.class_count
            FROM trademark_case_info tci
            LEFT JOIN trademark_search ts ON tci.app_num = ts.app_num
            WHERE tci.app_type1 IS NOT NULL
            ORDER BY tci.app_date DESC
            LIMIT ?
        """
        cursor.execute(query, (limit,))
        return [dict(row) for row in cursor.fetchall()]
    
    # ========== 商標タイプ検索（簡易版） ==========
    
    def search_by_trademark_type(self, type_expr: str, limit: int = 100) -> List[Dict[str, Any]]:
        """商標タイプ検索（TMSONAR ID:125 - 簡易版）
        
        注意: 現在のデータベースでは特殊商標の詳細分類（立体/音/動き等）は
              判別できないため、標準文字と特殊商標の有無のみ検索可能。
        
        Args:
            type_expr: 検索式
                      'standard': 標準文字商標
                      'special': 特殊商標（立体等）
                      '?': 全指定
            limit: 最大取得件数
        
        Returns:
            検索結果リスト
        """
        if not type_expr or type_expr.strip() in ['？', '?']:
            return self._get_all_trademark_types(limit)
        
        cursor = self.conn.cursor()
        
        if type_expr.lower() == 'standard':
            # 標準文字商標の検索
            query = """
                SELECT DISTINCT
                    tci.app_num,
                    tci.standard_char_exist,
                    tci.special_mark_exist,
                    ts.search_use_t as trademark_name,
                    tsc.standard_char_t,
                    tci.app_date,
                    tci.reg_date,
                    tci.reg_article_reg_num as reg_num,
                    tci.final_disposition_type,
                    tci.law_code,
                    tci.class_count
                FROM trademark_case_info tci
                LEFT JOIN trademark_search ts ON tci.app_num = ts.app_num
                LEFT JOIN trademark_standard_char tsc ON tci.app_num = tsc.app_num
                WHERE tci.standard_char_exist = '1' OR tsc.app_num IS NOT NULL
                ORDER BY tci.app_date DESC
                LIMIT ?
            """
            cursor.execute(query, (limit,))
        
        elif type_expr.lower() == 'special':
            # 特殊商標の検索
            query = """
                SELECT DISTINCT
                    tci.app_num,
                    tci.standard_char_exist,
                    tci.special_mark_exist,
                    ts.search_use_t as trademark_name,
                    tci.app_date,
                    tci.reg_date,
                    tci.reg_article_reg_num as reg_num,
                    tci.final_disposition_type,
                    tci.law_code,
                    tci.class_count
                FROM trademark_case_info tci
                LEFT JOIN trademark_search ts ON tci.app_num = ts.app_num
                WHERE tci.special_mark_exist = '1'
                ORDER BY tci.app_date DESC
                LIMIT ?
            """
            cursor.execute(query, (limit,))
        else:
            return []
        
        return [dict(row) for row in cursor.fetchall()]
    
    def _get_all_trademark_types(self, limit: int) -> List[Dict[str, Any]]:
        """全商標タイプ取得"""
        cursor = self.conn.cursor()
        query = """
            SELECT DISTINCT
                tci.app_num,
                tci.standard_char_exist,
                tci.special_mark_exist,
                ts.search_use_t as trademark_name,
                tci.app_date,
                tci.reg_date,
                tci.reg_article_reg_num as reg_num,
                tci.final_disposition_type,
                tci.law_code,
                tci.class_count
            FROM trademark_case_info tci
            LEFT JOIN trademark_search ts ON tci.app_num = ts.app_num
            ORDER BY tci.app_date DESC
            LIMIT ?
        """
        cursor.execute(query, (limit,))
        return [dict(row) for row in cursor.fetchall()]
    
    # ========== 統合検索インターフェース ==========
    
    def search(
        self, 
        search_type: SearchType,
        keyword: str = None,
        **kwargs
    ) -> List[Dict[str, Any]]:
        """統合検索インターフェース
        
        Args:
            search_type: 検索タイプ（SearchType enum）
            keyword: 検索キーワード
            **kwargs: 検索タイプごとの追加パラメータ
        
        Returns:
            検索結果のリスト
        """
        start_time = time.time()
        
        try:
            if search_type == SearchType.TRADEMARK:
                results = self.search_trademark_name(keyword, kwargs.get('limit', 100))
            
            elif search_type == SearchType.PHONETIC:
                results = self.search_phonetic(keyword, kwargs.get('limit', 100))
            
            elif search_type == SearchType.APP_NUM:
                result = self.search_by_app_num(keyword)
                results = [result] if result else []
            
            elif search_type == SearchType.REG_NUM:
                result = self.search_by_reg_num(keyword)
                results = [result] if result else []
            
            elif search_type == SearchType.DATE_RANGE:
                results = self.search_by_date_range(
                    kwargs.get('date_type', 'app_date'),
                    kwargs.get('start_date'),
                    kwargs.get('end_date'),
                    kwargs.get('limit', 100)
                )
            
            elif search_type == SearchType.STATUS:
                results = self.search_by_status(
                    kwargs.get('final_disposition_type'),
                    kwargs.get('final_disposition_date'),
                    kwargs.get('law_code'),
                    kwargs.get('class_count'),
                    kwargs.get('limit', 100)
                )
            
            elif search_type == SearchType.SIMILAR_GROUP:
                results = self.search_by_similar_group(keyword, kwargs.get('limit', 100))
            
            elif search_type == SearchType.GOODS_SERVICES:
                results = self.search_goods_services(
                    keyword, 
                    kwargs.get('limit', 100),
                    kwargs.get('item_and', True)
                )
            
            elif search_type == SearchType.APPLICANT:
                results = self.search_applicant(
                    keyword,
                    kwargs.get('limit', 100),
                    kwargs.get('use_or', False)
                )
            
            elif search_type == SearchType.LAW_CLASS:
                results = self.search_by_law_class(keyword, kwargs.get('limit', 100))
            
            elif search_type == SearchType.VIENNA_CODE:
                results = self.search_by_vienna_code(keyword, kwargs.get('limit', 100))
            
            elif search_type == SearchType.DETAILED_DESC:
                results = self.search_detailed_description(keyword, kwargs.get('limit', 100))
            
            elif search_type == SearchType.TRADEMARK_TYPE:
                results = self.search_by_trademark_type(keyword, kwargs.get('limit', 100))
            
            elif search_type == SearchType.APP_TYPE:
                results = self.search_by_app_type(keyword, kwargs.get('limit', 100))
            
            elif search_type == SearchType.REJECTION_CODE:
                results = self.search_by_rejection_code(keyword, kwargs.get('limit', 100))
            
            elif search_type == SearchType.INTERMEDIATE_CODE:
                results = self.search_by_intermediate_code(keyword, kwargs.get('limit', 100))
            
            elif search_type == SearchType.APPLICANT_ADDRESS:
                results = self.search_by_applicant_address(keyword, kwargs.get('limit', 100))
            
            elif search_type == SearchType.TRADEMARK_LENGTH:
                results = self.search_by_trademark_length(keyword, kwargs.get('limit', 100))
            
            elif search_type == SearchType.PHONETIC_LENGTH:
                results = self.search_by_phonetic_length(keyword, kwargs.get('limit', 100))
            
            elif search_type == SearchType.CLASS_COUNT:
                results = self.search_by_class_count(keyword, kwargs.get('limit', 100))
            
            elif search_type == SearchType.APPLICANT_COUNT:
                results = self.search_by_applicant_count(keyword, kwargs.get('limit', 100))
            
            elif search_type == SearchType.PHONETIC_COUNT:
                results = self.search_by_phonetic_count(keyword, kwargs.get('limit', 100))
            
            elif search_type == SearchType.ADDITIONAL_INFO:
                results = self.search_by_additional_info(keyword, kwargs.get('limit', 100))
            
            elif search_type == SearchType.COUNTRY_CODE:
                results = self.search_by_country_code(keyword, kwargs.get('limit', 100))
            
            elif search_type == SearchType.EXPIRY_DATE:
                results = self.search_by_expiry_date(keyword, kwargs.get('limit', 100))
            
            elif search_type == SearchType.PAYMENT_DATE:
                results = self.search_by_payment_date(keyword, kwargs.get('limit', 100))
            
            elif search_type == SearchType.DECISION_DATE:
                results = self.search_by_decision_date(keyword, kwargs.get('limit', 100))
            
            elif search_type == SearchType.APPEAL_NUM:
                results = self.search_by_appeal_num(keyword, kwargs.get('limit', 100))
            
            elif search_type == SearchType.DECISION_CLASS:
                results = self.search_by_decision_class(keyword, kwargs.get('limit', 100))
            
            else:
                results = []
            
            elapsed_time = time.time() - start_time
            
            print(f"\n検索完了: {len(results)}件 ({elapsed_time:.3f}秒)")
            
            return results
            
        except Exception as e:
            print(f"検索エラー: {e}")
            return []
    
    # ========== 追加検索機能（TMSONAR仕様完全準拠） ==========
    
    def search_by_rejection_code(self, codes: str, limit: int = 100) -> List[Dict[str, Any]]:
        """拒絶条文コード検索（TMSONAR ID:108）
        
        Args:
            codes: 拒絶条文コード（複数可、前方一致は末尾?）
                   例: 41:3条1項各号, 31:4条1項11号, 30:4条1項10号
            limit: 最大取得件数
        
        Returns:
            検索結果リスト
        """
        terms = QueryParser.split_terms(codes)
        if not terms or terms == ['?']:
            return self._get_all_rejection_codes(limit)
        
        cursor = self.conn.cursor()
        results = []
        
        for term in terms:
            if term.endswith('?'):
                # 前方一致検索
                prefix = term[:-1]
                query = """
                    SELECT DISTINCT
                        tdr.app_num,
                        tdr.rejection_reason_code,
                        tdr.intermediate_doc_code,
                        tdr.draft_date,
                        tdr.dispatch_date,
                        ts.search_use_t as trademark_name,
                        tci.app_date,
                        tci.reg_date
                    FROM trademark_draft_records tdr
                    LEFT JOIN trademark_search ts ON tdr.app_num = ts.app_num
                    LEFT JOIN trademark_case_info tci ON tdr.app_num = tci.app_num
                    WHERE tdr.rejection_reason_code LIKE ? ESCAPE '\\'
                    ORDER BY tdr.draft_date DESC
                    LIMIT ?
                """
                pattern = prefix.replace('_', '\\_').replace('%', '\\%') + '%'
                cursor.execute(query, (pattern, limit))
            else:
                # 完全一致検索
                query = """
                    SELECT DISTINCT
                        tdr.app_num,
                        tdr.rejection_reason_code,
                        tdr.intermediate_doc_code,
                        tdr.draft_date,
                        tdr.dispatch_date,
                        ts.search_use_t as trademark_name,
                        tci.app_date,
                        tci.reg_date
                    FROM trademark_draft_records tdr
                    LEFT JOIN trademark_search ts ON tdr.app_num = ts.app_num
                    LEFT JOIN trademark_case_info tci ON tdr.app_num = tci.app_num
                    WHERE tdr.rejection_reason_code = ?
                    ORDER BY tdr.draft_date DESC
                    LIMIT ?
                """
                cursor.execute(query, (term, limit))
            
            results.extend([dict(row) for row in cursor.fetchall()])
        
        # 重複除去
        seen = set()
        unique_results = []
        for r in results:
            key = (r['app_num'], r.get('rejection_reason_code'))
            if key not in seen:
                seen.add(key)
                unique_results.append(r)
        
        return unique_results[:limit]
    
    def _get_all_rejection_codes(self, limit: int) -> List[Dict[str, Any]]:
        """全拒絶条文取得"""
        cursor = self.conn.cursor()
        query = """
            SELECT DISTINCT
                tdr.app_num,
                tdr.rejection_reason_code,
                tdr.intermediate_doc_code,
                tdr.draft_date,
                tdr.dispatch_date,
                ts.search_use_t as trademark_name,
                tci.app_date,
                tci.reg_date
            FROM trademark_draft_records tdr
            LEFT JOIN trademark_search ts ON tdr.app_num = ts.app_num
            LEFT JOIN trademark_case_info tci ON tdr.app_num = tci.app_num
            WHERE tdr.rejection_reason_code IS NOT NULL AND tdr.rejection_reason_code != ''
            ORDER BY tdr.draft_date DESC
            LIMIT ?
        """
        cursor.execute(query, (limit,))
        return [dict(row) for row in cursor.fetchall()]
    
    def search_by_intermediate_code(self, codes: str, limit: int = 100) -> List[Dict[str, Any]]:
        """中間記録コード検索（TMSONAR ID:131）
        
        Args:
            codes: 中間記録コード（全指定?、複数可）
                   例: A01:拒絶理由通知書, A131:拒絶査定, A02:登録査定
            limit: 最大取得件数
        
        Returns:
            検索結果リスト
        """
        terms = QueryParser.split_terms(codes)
        if not terms or terms == ['?']:
            return self._get_all_intermediate_codes(limit)
        
        cursor = self.conn.cursor()
        results = []
        
        for term in terms:
            if term.endswith('?'):
                # 前方一致検索
                prefix = term[:-1]
                query = """
                    SELECT DISTINCT
                        tdr.app_num,
                        tdr.intermediate_doc_code,
                        tdr.rejection_reason_code,
                        tdr.draft_date,
                        tdr.dispatch_date,
                        ts.search_use_t as trademark_name,
                        tci.app_date,
                        tci.reg_date
                    FROM trademark_draft_records tdr
                    LEFT JOIN trademark_search ts ON tdr.app_num = ts.app_num
                    LEFT JOIN trademark_case_info tci ON tdr.app_num = tci.app_num
                    WHERE tdr.intermediate_doc_code LIKE ? ESCAPE '\\'
                    ORDER BY tdr.draft_date DESC
                    LIMIT ?
                """
                pattern = prefix.replace('_', '\\_').replace('%', '\\%') + '%'
                cursor.execute(query, (pattern, limit))
            else:
                # 完全一致検索
                query = """
                    SELECT DISTINCT
                        tdr.app_num,
                        tdr.intermediate_doc_code,
                        tdr.rejection_reason_code,
                        tdr.draft_date,
                        tdr.dispatch_date,
                        ts.search_use_t as trademark_name,
                        tci.app_date,
                        tci.reg_date
                    FROM trademark_draft_records tdr
                    LEFT JOIN trademark_search ts ON tdr.app_num = ts.app_num
                    LEFT JOIN trademark_case_info tci ON tdr.app_num = tci.app_num
                    WHERE tdr.intermediate_doc_code = ?
                    ORDER BY tdr.draft_date DESC
                    LIMIT ?
                """
                cursor.execute(query, (term, limit))
            
            results.extend([dict(row) for row in cursor.fetchall()])
        
        # 重複除去
        seen = set()
        unique_results = []
        for r in results:
            key = (r['app_num'], r.get('intermediate_doc_code'))
            if key not in seen:
                seen.add(key)
                unique_results.append(r)
        
        return unique_results[:limit]
    
    def _get_all_intermediate_codes(self, limit: int) -> List[Dict[str, Any]]:
        """全中間記録コード取得"""
        cursor = self.conn.cursor()
        query = """
            SELECT DISTINCT
                tdr.app_num,
                tdr.intermediate_doc_code,
                tdr.rejection_reason_code,
                tdr.draft_date,
                tdr.dispatch_date,
                ts.search_use_t as trademark_name,
                tci.app_date,
                tci.reg_date
            FROM trademark_draft_records tdr
            LEFT JOIN trademark_search ts ON tdr.app_num = ts.app_num
            LEFT JOIN trademark_case_info tci ON tdr.app_num = tci.app_num
            WHERE tdr.intermediate_doc_code IS NOT NULL AND tdr.intermediate_doc_code != ''
            ORDER BY tdr.draft_date DESC
            LIMIT ?
        """
        cursor.execute(query, (limit,))
        return [dict(row) for row in cursor.fetchall()]
    
    def search_by_applicant_address(self, address: str, limit: int = 100) -> List[Dict[str, Any]]:
        """出願人/権利者住所検索（TMSONAR ID:134）
        
        Args:
            address: 住所文字列（部分一致、?で全指定）
            limit: 最大取得件数
        
        Returns:
            検索結果リスト
        """
        if not address or address == '?':
            # 全件取得（申請人マスタから住所を取得）
            cursor = self.conn.cursor()
            query = """
                SELECT DISTINCT
                    taa.app_num,
                    COALESCE(ari.applicant_name, taa.applicant_agent_name) as applicant_name,
                    COALESCE(ari.applicant_address, taa.applicant_agent_address) as address,
                    ts.search_use_t as trademark_name,
                    tci.app_date,
                    tci.reg_date
                FROM trademark_applicants_agents taa
                LEFT JOIN applicant_registration_info ari 
                    ON taa.applicant_agent_code = ari.applicant_code
                LEFT JOIN trademark_search ts ON taa.app_num = ts.app_num
                LEFT JOIN trademark_case_info tci ON taa.app_num = tci.app_num
                WHERE (ari.applicant_address IS NOT NULL AND ari.applicant_address != '（省略）')
                    OR (taa.applicant_agent_address IS NOT NULL AND taa.applicant_agent_address != '（省略）')
                ORDER BY tci.app_date DESC
                LIMIT ?
            """
            cursor.execute(query, (limit,))
            return [dict(row) for row in cursor.fetchall()]
        
        # 住所正規化と部分一致検索
        normalized = TextNormalizer.normalize_address(address)
        pattern = '%' + normalized.replace('_', '\\_').replace('%', '\\%') + '%'
        
        cursor = self.conn.cursor()
        query = """
            SELECT DISTINCT
                taa.app_num,
                COALESCE(ari.applicant_name, taa.applicant_agent_name) as applicant_name,
                COALESCE(ari.applicant_address, taa.applicant_agent_address) as address,
                ts.search_use_t as trademark_name,
                tci.app_date,
                tci.reg_date
            FROM trademark_applicants_agents taa
            LEFT JOIN applicant_registration_info ari 
                ON taa.applicant_agent_code = ari.applicant_code
            LEFT JOIN trademark_search ts ON taa.app_num = ts.app_num
            LEFT JOIN trademark_case_info tci ON taa.app_num = tci.app_num
            WHERE (ari.applicant_address LIKE ? ESCAPE '\\' 
                   OR taa.applicant_agent_address LIKE ? ESCAPE '\\')
                AND ((ari.applicant_address IS NOT NULL AND ari.applicant_address != '（省略）')
                     OR (taa.applicant_agent_address IS NOT NULL AND taa.applicant_agent_address != '（省略）'))
            ORDER BY tci.app_date DESC
            LIMIT ?
        """
        cursor.execute(query, (pattern, pattern, limit))
        return [dict(row) for row in cursor.fetchall()]
    
    def search_by_trademark_length(self, length_range: str, limit: int = 100) -> List[Dict[str, Any]]:
        """商標文字数検索（TMSONAR ID:132）
        
        Args:
            length_range: 文字数範囲（例: '1:5', '1:', ':5', '3'）
            limit: 最大取得件数
        
        Returns:
            検索結果リスト
        """
        cursor = self.conn.cursor()
        
        # 範囲解析
        if ':' in length_range:
            parts = length_range.split(':')
            min_len = int(parts[0]) if parts[0] else 0
            max_len = int(parts[1]) if parts[1] else 999
        else:
            min_len = max_len = int(length_range)
        
        query = """
            SELECT DISTINCT
                ts.app_num,
                ts.search_use_t as trademark_name,
                LENGTH(ts.search_use_t_norm) as trademark_length,
                tci.app_date,
                tci.reg_date
            FROM trademark_search ts
            LEFT JOIN trademark_case_info tci ON ts.app_num = tci.app_num
            WHERE LENGTH(ts.search_use_t_norm) BETWEEN ? AND ?
            ORDER BY tci.app_date DESC
            LIMIT ?
        """
        cursor.execute(query, (min_len, max_len, limit))
        return [dict(row) for row in cursor.fetchall()]
    
    def search_by_phonetic_length(self, length_range: str, limit: int = 100) -> List[Dict[str, Any]]:
        """称呼音数検索（TMSONAR ID:133）
        
        Args:
            length_range: 音数範囲（例: '1:5', '1:', ':5', '3'）
            limit: 最大取得件数
        
        Returns:
            検索結果リスト
        """
        cursor = self.conn.cursor()
        
        # 範囲解析
        if ':' in length_range:
            parts = length_range.split(':')
            min_len = int(parts[0]) if parts[0] else 0
            max_len = int(parts[1]) if parts[1] else 999
        else:
            min_len = max_len = int(length_range)
        
        # trademark_pronunciationsテーブルを使用
        query = """
            SELECT DISTINCT
                tp.app_num,
                tp.pronunciation,
                LENGTH(tp.pronunciation_norm) as phonetic_length,
                ts.search_use_t as trademark_name,
                tci.app_date,
                tci.reg_date
            FROM trademark_pronunciations tp
            LEFT JOIN trademark_search ts ON tp.app_num = ts.app_num
            LEFT JOIN trademark_case_info tci ON tp.app_num = tci.app_num
            WHERE tp.pronunciation_norm IS NOT NULL
              AND LENGTH(tp.pronunciation_norm) BETWEEN ? AND ?
            ORDER BY tci.app_date DESC
            LIMIT ?
        """
        cursor.execute(query, (min_len, max_len, limit))
        return [dict(row) for row in cursor.fetchall()]
    
    def search_by_class_count(self, count_range: str, limit: int = 100) -> List[Dict[str, Any]]:
        """区分数検索（TMSONAR ID:137）
        
        Args:
            count_range: 区分数範囲（例: '1:5', '1:', ':5', '3'）、?で全指定
            limit: 最大取得件数
        
        Returns:
            検索結果リスト
        """
        cursor = self.conn.cursor()
        
        if not count_range or count_range == '?':
            # 全件取得
            query = """
                SELECT 
                    app_num,
                    class_count,
                    search_use_t as trademark_name,
                    app_date,
                    reg_date,
                    final_disposition_type
                FROM trademark_case_info tci
                LEFT JOIN trademark_search ts USING (app_num)
                WHERE class_count IS NOT NULL
                ORDER BY app_date DESC
                LIMIT ?
            """
            cursor.execute(query, (limit,))
            return [dict(row) for row in cursor.fetchall()]
        
        # 範囲解析
        if ':' in count_range:
            parts = count_range.split(':')
            min_count = int(parts[0]) if parts[0] else 0
            max_count = int(parts[1]) if parts[1] else 999
        else:
            min_count = max_count = int(count_range)
        
        query = """
            SELECT 
                app_num,
                class_count,
                search_use_t as trademark_name,
                app_date,
                reg_date,
                final_disposition_type
            FROM trademark_case_info tci
            LEFT JOIN trademark_search ts USING (app_num)
            WHERE class_count IS NOT NULL
              AND CAST(SUBSTR(class_count, 1, 3) AS INTEGER) BETWEEN ? AND ?
            ORDER BY app_date DESC
            LIMIT ?
        """
        cursor.execute(query, (min_count, max_count, limit))
        return [dict(row) for row in cursor.fetchall()]
    
    def search_by_applicant_count(self, count_range: str, limit: int = 100) -> List[Dict[str, Any]]:
        """出願人/権利者数検索（TMSONAR ID:138）
        
        Args:
            count_range: 出願人数範囲（例: '2:5', '2:', ':5', '3'）、?で全指定
            limit: 最大取得件数
        
        Returns:
            検索結果リスト
        """
        cursor = self.conn.cursor()
        
        # 範囲解析
        if not count_range or count_range == '?':
            min_count = 1
            max_count = 999
        elif ':' in count_range:
            parts = count_range.split(':')
            min_count = int(parts[0]) if parts[0] else 1
            max_count = int(parts[1]) if parts[1] else 999
        else:
            min_count = max_count = int(count_range)
        
        # 出願人数を集計してから結果を取得
        query = """
            WITH applicant_counts AS (
                SELECT 
                    app_num,
                    COUNT(DISTINCT applicant_agent_code) as applicant_count
                FROM trademark_applicants_agents
                WHERE applicant_agent_type = '1'
                GROUP BY app_num
                HAVING applicant_count BETWEEN ? AND ?
            )
            SELECT 
                ac.app_num,
                ac.applicant_count,
                ts.search_use_t as trademark_name,
                tci.app_date,
                tci.reg_date,
                GROUP_CONCAT(
                    DISTINCT COALESCE(ari.applicant_name, taa.applicant_agent_name)
                ) as applicant_names
            FROM applicant_counts ac
            LEFT JOIN trademark_search ts ON ac.app_num = ts.app_num
            LEFT JOIN trademark_case_info tci ON ac.app_num = tci.app_num
            LEFT JOIN trademark_applicants_agents taa 
                ON ac.app_num = taa.app_num AND taa.applicant_agent_type = '1'
            LEFT JOIN applicant_registration_info ari 
                ON taa.applicant_agent_code = ari.applicant_code
            GROUP BY ac.app_num, ac.applicant_count, ts.search_use_t, 
                     tci.app_date, tci.reg_date
            ORDER BY tci.app_date DESC
            LIMIT ?
        """
        cursor.execute(query, (min_count, max_count, limit))
        return [dict(row) for row in cursor.fetchall()]
    
    def search_by_phonetic_count(self, count_range: str, limit: int = 100) -> List[Dict[str, Any]]:
        """称呼数検索（TMSONAR ID:139）
        
        Args:
            count_range: 称呼数範囲（例: '2:5', '2:', ':5', '3'）、?で全指定
            limit: 最大取得件数
        
        Returns:
            検索結果リスト
        """
        cursor = self.conn.cursor()
        
        # 範囲解析
        if not count_range or count_range == '?':
            min_count = 1
            max_count = 999
        elif ':' in count_range:
            parts = count_range.split(':')
            min_count = int(parts[0]) if parts[0] else 1
            max_count = int(parts[1]) if parts[1] else 999
        else:
            min_count = max_count = int(count_range)
        
        # 称呼数を集計してから結果を取得
        query = """
            WITH phonetic_counts AS (
                SELECT 
                    app_num,
                    COUNT(DISTINCT pronunciation) as phonetic_count
                FROM trademark_pronunciations
                WHERE pronunciation IS NOT NULL
                GROUP BY app_num
                HAVING phonetic_count BETWEEN ? AND ?
            )
            SELECT 
                pc.app_num,
                pc.phonetic_count,
                ts.search_use_t as trademark_name,
                tci.app_date,
                tci.reg_date,
                GROUP_CONCAT(DISTINCT tp.pronunciation) as pronunciations
            FROM phonetic_counts pc
            LEFT JOIN trademark_search ts ON pc.app_num = ts.app_num
            LEFT JOIN trademark_case_info tci ON pc.app_num = tci.app_num
            LEFT JOIN trademark_pronunciations tp ON pc.app_num = tp.app_num
            GROUP BY pc.app_num, pc.phonetic_count, ts.search_use_t, 
                     tci.app_date, tci.reg_date
            ORDER BY tci.app_date DESC
            LIMIT ?
        """
        cursor.execute(query, (min_count, max_count, limit))
        return [dict(row) for row in cursor.fetchall()]
    
    def search_by_additional_info(self, info_codes: str, limit: int = 100) -> List[Dict[str, Any]]:
        """付加情報検索（TMSONAR ID:128）
        
        Args:
            info_codes: 付加情報コード（カンマ区切りで複数指定可）
                      例: '05'(標準文字), '04'(3条2項), '01,05'
            limit: 最大取得件数
        
        Returns:
            検索結果リスト
        """
        if not info_codes or info_codes == '?':
            # 全件取得
            cursor = self.conn.cursor()
            query = """
                SELECT DISTINCT
                    app_num,
                    search_use_t as trademark_name,
                    orig_app_type as additional_info,
                    app_date,
                    reg_date
                FROM trademark_case_info tci
                LEFT JOIN trademark_search ts USING (app_num)
                WHERE orig_app_type IS NOT NULL
                ORDER BY app_date DESC
                LIMIT ?
            """
            cursor.execute(query, (limit,))
            return [dict(row) for row in cursor.fetchall()]
        
        # コード分割
        codes = [c.strip() for c in info_codes.replace('，', ',').split(',')]
        
        cursor = self.conn.cursor()
        
        # orig_app_typeで検索（元の出願種別コード）
        placeholders = ','.join(['?' for _ in codes])
        query = f"""
            SELECT DISTINCT
                app_num,
                search_use_t as trademark_name,
                orig_app_type as additional_info,
                app_date,
                reg_date,
                final_disposition_type
            FROM trademark_case_info tci
            LEFT JOIN trademark_search ts USING (app_num)
            WHERE orig_app_type IN ({placeholders})
            ORDER BY app_date DESC
            LIMIT ?
        """
        params = codes + [limit]
        cursor.execute(query, params)
        return [dict(row) for row in cursor.fetchall()]
    
    def search_by_country_code(self, country_codes: str, limit: int = 100) -> List[Dict[str, Any]]:
        """国県コード検索（TMSONAR ID:129）
        
        Args:
            country_codes: 国県コード（カンマ区切りで複数指定可）
                          例: '13'(東京都), '27'(大阪府), 'US'(米国)
            limit: 最大取得件数
        
        Returns:
            検索結果リスト
        """
        cursor = self.conn.cursor()
        
        if not country_codes or country_codes == '?':
            # 全件取得
            query = """
                SELECT DISTINCT
                    taa.app_num,
                    taa.country_prefecture_code,
                    COALESCE(ari.applicant_name, taa.applicant_agent_name) as applicant_name,
                    ts.search_use_t as trademark_name,
                    tci.app_date,
                    tci.reg_date
                FROM trademark_applicants_agents taa
                LEFT JOIN applicant_registration_info ari 
                    ON taa.applicant_agent_code = ari.applicant_code
                LEFT JOIN trademark_search ts ON taa.app_num = ts.app_num
                LEFT JOIN trademark_case_info tci ON taa.app_num = tci.app_num
                WHERE taa.country_prefecture_code IS NOT NULL 
                  AND taa.country_prefecture_code != ''
                  AND taa.applicant_agent_type = '1'
                ORDER BY tci.app_date DESC
                LIMIT ?
            """
            cursor.execute(query, (limit,))
            return [dict(row) for row in cursor.fetchall()]
        
        # コード分割
        codes = [c.strip() for c in country_codes.replace('，', ',').split(',')]
        
        placeholders = ','.join(['?' for _ in codes])
        query = f"""
            SELECT DISTINCT
                taa.app_num,
                taa.country_prefecture_code,
                COALESCE(ari.applicant_name, taa.applicant_agent_name) as applicant_name,
                ts.search_use_t as trademark_name,
                tci.app_date,
                tci.reg_date
            FROM trademark_applicants_agents taa
            LEFT JOIN applicant_registration_info ari 
                ON taa.applicant_agent_code = ari.applicant_code
            LEFT JOIN trademark_search ts ON taa.app_num = ts.app_num
            LEFT JOIN trademark_case_info tci ON taa.app_num = tci.app_num
            WHERE taa.country_prefecture_code IN ({placeholders})
              AND taa.applicant_agent_type = '1'
            ORDER BY tci.app_date DESC
            LIMIT ?
        """
        params = codes + [limit]
        cursor.execute(query, params)
        return [dict(row) for row in cursor.fetchall()]
    
    def _search_by_date_field(self, date_field: str, date_range: str, table: str, limit: int = 100) -> List[Dict[str, Any]]:
        """汎用日付フィールド検索ヘルパー"""
        cursor = self.conn.cursor()
        
        # 範囲解析
        if ':' in date_range:
            parts = date_range.split(':')
            start_date = parts[0].replace('-', '').replace('/', '') if parts[0] else '00000000'
            end_date = parts[1].replace('-', '').replace('/', '') if parts[1] else '99999999'
        else:
            # 単一日付
            date = date_range.replace('-', '').replace('/', '')
            start_date = end_date = date
        
        if table == 'trademark_management_info':
            query = f"""
                SELECT 
                    tmi.app_num,
                    tmi.{date_field},
                    ts.search_use_t as trademark_name,
                    tci.app_date,
                    tci.reg_date,
                    tmi.reg_num
                FROM {table} tmi
                LEFT JOIN trademark_search ts ON tmi.app_num = ts.app_num
                LEFT JOIN trademark_case_info tci ON tmi.app_num = tci.app_num
                WHERE tmi.{date_field} BETWEEN ? AND ?
                  AND tmi.{date_field} != '00000000'
                ORDER BY tmi.{date_field} DESC
                LIMIT ?
            """
        else:
            query = f"""
                SELECT 
                    app_num,
                    {date_field},
                    search_use_t as trademark_name,
                    app_date,
                    reg_date
                FROM {table} t
                LEFT JOIN trademark_search ts USING (app_num)
                LEFT JOIN trademark_case_info tci USING (app_num)
                WHERE t.{date_field} BETWEEN ? AND ?
                  AND t.{date_field} != '00000000'
                ORDER BY t.{date_field} DESC
                LIMIT ?
            """
        
        cursor.execute(query, (start_date, end_date, limit))
        return [dict(row) for row in cursor.fetchall()]
    
    def search_by_expiry_date(self, date_range: str, limit: int = 100) -> List[Dict[str, Any]]:
        """存続期間満了日検索（TMSONAR ID:114）
        
        Args:
            date_range: 日付範囲（YYYYMMDD:YYYYMMDD、前後省略可）
            limit: 最大取得件数
        
        Returns:
            検索結果リスト
        """
        return self._search_by_date_field('conti_prd_expire_date', date_range, 'trademark_management_info', limit)
    
    def search_by_payment_date(self, date_range: str, limit: int = 100) -> List[Dict[str, Any]]:
        """分納満了日検索（TMSONAR ID:121）
        
        Args:
            date_range: 日付範囲（YYYYMMDD:YYYYMMDD、前後省略可）
            limit: 最大取得件数
        
        Returns:
            検索結果リスト
        """
        return self._search_by_date_field('next_pen_payment_limit_date', date_range, 'trademark_management_info', limit)
    
    def search_by_decision_date(self, date_range: str, limit: int = 100) -> List[Dict[str, Any]]:
        """最終処分日検索（TMSONAR ID:116）
        
        Args:
            date_range: 日付範囲（YYYYMMDD:YYYYMMDD、前後省略可）
            limit: 最大取得件数
        
        Returns:
            検索結果リスト
        """
        return self._search_by_date_field('final_decision_date', date_range, 'trademark_management_info', limit)
    
    def search_by_appeal_num(self, appeal_nums: str, limit: int = 100) -> List[Dict[str, Any]]:
        """審判番号検索（TMSONAR ID:120）
        
        Args:
            appeal_nums: 審判番号（完全一致または範囲）
                        例: '2023300949', '2023300000:2023400000'
            limit: 最大取得件数
        
        Returns:
            検索結果リスト
        """
        cursor = self.conn.cursor()
        
        # 範囲検索
        if ':' in appeal_nums:
            parts = appeal_nums.split(':')
            start_num = parts[0]
            end_num = parts[1]
            
            query = """
                SELECT 
                    tac.appeal_num,
                    tac.app_num,
                    tac.appeal_type,
                    tac.appeal_request_date,
                    ts.search_use_t as trademark_name,
                    tci.reg_article_reg_num as reg_num
                FROM trademark_appeal_cases tac
                LEFT JOIN trademark_search ts ON tac.app_num = ts.app_num
                LEFT JOIN trademark_case_info tci ON tac.app_num = tci.app_num
                WHERE tac.appeal_num BETWEEN ? AND ?
                ORDER BY tac.appeal_num DESC
                LIMIT ?
            """
            cursor.execute(query, (start_num, end_num, limit))
        else:
            # 完全一致
            query = """
                SELECT 
                    tac.appeal_num,
                    tac.app_num,
                    tac.appeal_type,
                    tac.appeal_request_date,
                    ts.search_use_t as trademark_name,
                    tci.reg_article_reg_num as reg_num
                FROM trademark_appeal_cases tac
                LEFT JOIN trademark_search ts ON tac.app_num = ts.app_num
                LEFT JOIN trademark_case_info tci ON tac.app_num = tci.app_num
                WHERE tac.appeal_num = ?
            """
            cursor.execute(query, (appeal_nums,))
        
        return [dict(row) for row in cursor.fetchall()]
    
    def search_by_decision_class(self, class_expr: str, limit: int = 100) -> List[Dict[str, Any]]:
        """審決分類検索（TMSONAR ID:109）
        
        Args:
            class_expr: 審決分類式（審判種別-判示コード-結論コード）
                       例: '1-121-Y', '1-?-Y', '?-121-?'
            limit: 最大取得件数
        
        Returns:
            検索結果リスト
        """
        cursor = self.conn.cursor()
        
        # 分類式を分解
        parts = class_expr.split('-') if '-' in class_expr else [class_expr]
        
        conditions = []
        params = []
        
        if len(parts) >= 1 and parts[0] != '?':
            conditions.append("tdc.appeal_type = ?")
            params.append(parts[0])
        
        if len(parts) >= 2 and parts[1] != '?':
            conditions.append("tdc.judgment_item_code = ?")
            params.append(parts[1])
        
        if len(parts) >= 3 and parts[2] != '?':
            conditions.append("tdc.decision_classification_conclusion_code = ?")
            params.append(parts[2])
        
        where_clause = " AND ".join(conditions) if conditions else "1=1"
        params.append(limit)
        
        query = f"""
            SELECT 
                tdc.appeal_num,
                tdc.appeal_type,
                tdc.judgment_item_code,
                tdc.decision_classification_conclusion_code,
                tac.app_num,
                ts.search_use_t as trademark_name
            FROM trademark_decision_classifications tdc
            LEFT JOIN trademark_appeal_cases tac ON tdc.appeal_num = tac.appeal_num
            LEFT JOIN trademark_search ts ON tac.app_num = ts.app_num
            WHERE {where_clause}
            ORDER BY tdc.appeal_num DESC
            LIMIT ?
        """
        
        cursor.execute(query, params)
        return [dict(row) for row in cursor.fetchall()]
    
    def search_by_info_provision_count(self, count_range: str, limit: int = 100) -> List[Dict[str, Any]]:
        """情報提供数検索（刊行物等提出書の提出数）（TMSONAR ID:135）
        
        Args:
            count_range: 数値範囲（例："1:", ":5", "1:3"）
            limit: 最大件数
        
        Returns:
            検索結果リスト
        """
        cursor = self.conn.cursor()
        
        # 範囲解析
        if not count_range or count_range == '?':
            min_count = 1
            max_count = 999
        elif ':' in count_range:
            parts = count_range.split(':')
            min_count = int(parts[0]) if parts[0] else 1
            max_count = int(parts[1]) if parts[1] else 999
        else:
            min_count = max_count = int(count_range)
        
        # 刊行物等提出書の中間記録コードでカウント
        # A50: 刊行物等提出書、A417: 刊行物等提出による通知書
        query = """
            WITH info_provision_counts AS (
                SELECT 
                    tci.app_num, 
                    COUNT(DISTINCT tdr.document_num) as info_count
                FROM trademark_case_info tci
                LEFT JOIN trademark_draft_records tdr 
                    ON tci.law_code = tdr.law_code 
                    AND tci.app_num = tdr.app_num
                    AND tdr.intermediate_doc_code IN ('A50', 'A417')
                GROUP BY tci.app_num
                HAVING COUNT(DISTINCT tdr.document_num) BETWEEN ? AND ?
            )
            SELECT 
                ipc.app_num,
                ipc.info_count,
                ts.search_use_t as trademark_name,
                tci.app_date,
                tci.reg_date,
                tci.final_disposition_type
            FROM info_provision_counts ipc
            LEFT JOIN trademark_search ts ON ipc.app_num = ts.app_num
            LEFT JOIN trademark_case_info tci ON ipc.app_num = tci.app_num
            ORDER BY tci.app_date DESC
            LIMIT ?
        """
        
        cursor.execute(query, (min_count, max_count, limit))
        return [dict(row) for row in cursor.fetchall()]
    
    def search_by_browsing_request_count(self, count_range: str, limit: int = 100) -> List[Dict[str, Any]]:
        """閲覧請求数検索（ファイル記録事項の閲覧請求書の提出数）（TMSONAR ID:136）
        
        Args:
            count_range: 数値範囲（例："1:", ":5", "1:3"）
            limit: 最大件数
        
        Returns:
            検索結果リスト
        """
        cursor = self.conn.cursor()
        
        # 範囲解析
        if not count_range or count_range == '?':
            min_count = 1
            max_count = 999
        elif ':' in count_range:
            parts = count_range.split(':')
            min_count = int(parts[0]) if parts[0] else 1
            max_count = int(parts[1]) if parts[1] else 999
        else:
            min_count = max_count = int(count_range)
        
        # 閲覧請求書の中間記録コードでカウント
        # A405: ファイル記録事項の閲覧(縦覧)請求書
        query = """
            WITH browsing_counts AS (
                SELECT 
                    tci.app_num, 
                    COUNT(DISTINCT tdr.document_num) as browse_count
                FROM trademark_case_info tci
                LEFT JOIN trademark_draft_records tdr 
                    ON tci.law_code = tdr.law_code 
                    AND tci.app_num = tdr.app_num
                    AND tdr.intermediate_doc_code = 'A405'
                GROUP BY tci.app_num
                HAVING COUNT(DISTINCT tdr.document_num) BETWEEN ? AND ?
            )
            SELECT 
                bc.app_num,
                bc.browse_count,
                ts.search_use_t as trademark_name,
                tci.app_date,
                tci.reg_date,
                tci.final_disposition_type
            FROM browsing_counts bc
            LEFT JOIN trademark_search ts ON bc.app_num = ts.app_num
            LEFT JOIN trademark_case_info tci ON bc.app_num = tci.app_num
            ORDER BY tci.app_date DESC
            LIMIT ?
        """
        
        cursor.execute(query, (min_count, max_count, limit))
        return [dict(row) for row in cursor.fetchall()]
    
    def _format_unified_result(self, app_nums: List[str], search_specific_data: Dict[str, Any] = None) -> List[Dict[str, Any]]:
        """統一フォーマットで検索結果を整形
        
        Args:
            app_nums: 出願番号リスト
            search_specific_data: 検索種別固有のデータ（出願番号をキーとした辞書）
        
        Returns:
            統一フォーマットの検索結果リスト
        """
        if not app_nums:
            return []
        
        cursor = self.conn.cursor()
        results = []
        
        # IN句の制限を考慮してバッチ処理
        for batch_start in range(0, len(app_nums), self.IN_CLAUSE_LIMIT):
            batch_app_nums = app_nums[batch_start:batch_start + self.IN_CLAUSE_LIMIT]
            placeholders = ','.join(['?' for _ in batch_app_nums])
            
            # 基本情報の取得クエリ
            query = f"""
                WITH image_data AS (
                    SELECT 
                        app_num,
                        GROUP_CONCAT(image_data, '') as image_data  -- 複数行の画像データを結合
                    FROM (
                        SELECT app_num, image_data, compression_format
                        FROM trademark_images
                        WHERE app_num IN ({placeholders})
                        AND image_data IS NOT NULL
                        AND LENGTH(image_data) > 0
                        -- JP形式（JPEG Base64）のみを対象とする
                        AND compression_format = 'JP'
                        ORDER BY app_num, rec_seq_num  -- 連番順に並べる
                    )
                    GROUP BY app_num
                ),
                basic_data AS (
                    SELECT DISTINCT
                        tci.app_num,
                        tci.app_date,
                        tci.reg_article_reg_num as reg_num,
                        tci.reg_date,
                        -- 商標名の優先順位: 画像→商標見本→標準文字→表示用商標
                        CASE 
                            WHEN ti.image_data IS NOT NULL THEN '[商標画像]'
                            ELSE COALESCE(
                                td.indct_use_t,
                                tsc.standard_char_t,
                                ts.search_use_t
                            )
                        END as trademark_name,
                        ti.image_data as trademark_image_data,
                        tci.final_disposition_type,
                        tci.final_disposition_date,
                        tci.law_code,
                        tci.reg_article_gazette_date,
                        tci.pub_article_gazette_date,
                        tmi.conti_prd_expire_date,
                        tmi.next_pen_payment_limit_date,
                        tbi.conti_prd_expire_date as basic_expiry_date,
                        -- 追加項目
                        tci.app_type1,
                        tci.app_type2,
                        tci.app_type3,
                        tci.app_type4,
                        tci.app_type5,
                        tci.orig_app_type,
                        tci.article3_2_flag,
                        tci.article5_4_flag,
                        tci.exam_type,
                        tci.decision_type,
                        tci.applicable_law_class,
                        -- 商標タイプ判定用フラグ
                        tci.standard_char_exist,
                        tci.special_mark_exist,
                        tci.color_exist,
                        -- 補助情報
                        tci.defensive_num,
                        tbi.prior_app_right_occr_date,
                        tci.renewal_reg_num,
                        tci.renewal_defensive_num
                    FROM trademark_case_info tci
                    LEFT JOIN image_data ti ON tci.app_num = ti.app_num
                    LEFT JOIN trademark_display td ON tci.app_num = td.app_num
                    LEFT JOIN trademark_standard_char tsc ON tci.app_num = tsc.app_num
                    LEFT JOIN trademark_search ts ON tci.app_num = ts.app_num
                    LEFT JOIN trademark_management_info tmi ON tci.app_num = tmi.app_num
                    LEFT JOIN trademark_basic_items tbi ON tci.app_num = tbi.app_num
                    WHERE tci.app_num IN ({placeholders})
                ),
                phonetics_data AS (
                    SELECT 
                        app_num,
                        GROUP_CONCAT(DISTINCT pronunciation) as phonetics
                    FROM trademark_pronunciations
                    WHERE app_num IN ({placeholders})
                    GROUP BY app_num
                ),
                applicants_data AS (
                    SELECT 
                        taa.app_num,
                        GROUP_CONCAT(DISTINCT 
                            CASE 
                                WHEN taa.applicant_agent_type = '1' THEN 
                                    COALESCE(ari.applicant_name, taa.applicant_agent_name)
                                ELSE NULL 
                            END
                        ) as applicants,
                        GROUP_CONCAT(DISTINCT 
                            CASE 
                                WHEN taa.applicant_agent_type = '1' THEN 
                                    taa.applicant_agent_address
                                ELSE NULL 
                            END
                        ) as applicant_addresses,
                        GROUP_CONCAT(DISTINCT 
                            CASE 
                                WHEN taa.applicant_agent_type = '1' THEN 
                                    taa.country_prefecture_code
                                ELSE NULL 
                            END
                        ) as applicant_country_codes,
                        GROUP_CONCAT(DISTINCT 
                            CASE 
                                WHEN taa.applicant_agent_type = '2' THEN 
                                    taa.applicant_agent_name
                                ELSE NULL 
                            END
                        ) as agents
                    FROM trademark_applicants_agents taa
                    LEFT JOIN applicant_registration_info ari 
                        ON taa.applicant_agent_code = ari.applicant_code
                    WHERE taa.app_num IN ({placeholders})
                    GROUP BY taa.app_num
                ),
                right_holders_data AS (
                    SELECT 
                        app_num,
                        GROUP_CONCAT(DISTINCT right_person_name) as right_holders
                    FROM trademark_right_holders
                    WHERE app_num IN ({placeholders})
                    GROUP BY app_num
                ),
                classes_data AS (
                    SELECT 
                        app_num,
                        GROUP_CONCAT(DISTINCT class_num) as classes
                    FROM trademark_goods_services
                    WHERE app_num IN ({placeholders})
                    GROUP BY app_num
                ),
                goods_services_data AS (
                    SELECT 
                        app_num,
                        class_num,
                        GROUP_CONCAT(goods_services_name, '、') as goods_services_name
                    FROM (
                        SELECT DISTINCT app_num, class_num, goods_services_name
                        FROM trademark_goods_services
                        WHERE app_num IN ({placeholders})
                    )
                    GROUP BY app_num, class_num
                ),
                similar_groups_data AS (
                    SELECT 
                        app_num,
                        class_num,
                        similar_group_codes
                    FROM trademark_similar_group_codes
                    WHERE app_num IN ({placeholders})
                ),
                vienna_data AS (
                    SELECT 
                        app_num,
                        GROUP_CONCAT(DISTINCT 
                            large_class || '.' || mid_class || '.' || 
                            small_class || '.' || complement_sub_class
                        ) as vienna_codes
                    FROM trademark_vienna_codes
                    WHERE app_num IN ({placeholders})
                    GROUP BY app_num
                ),
                rejection_data AS (
                    SELECT 
                        app_num,
                        GROUP_CONCAT(DISTINCT rejection_reason_code) as rejection_codes,
                        MAX(dispatch_date) as latest_rejection_date
                    FROM trademark_draft_records
                    WHERE app_num IN ({placeholders})
                    AND rejection_reason_code IS NOT NULL
                    AND rejection_reason_code != ''
                    GROUP BY app_num
                ),
                detail_desc_data AS (
                    SELECT 
                        app_num,
                        GROUP_CONCAT(detailed_description, ' ') as detailed_description
                    FROM trademark_detailed_descriptions
                    WHERE app_num IN ({placeholders})
                    GROUP BY app_num
                ),
                appeal_data AS (
                    SELECT 
                        app_num,
                        GROUP_CONCAT(DISTINCT appeal_num) as appeal_nums,
                        GROUP_CONCAT(DISTINCT appeal_type) as appeal_types
                    FROM trademark_appeal_cases
                    WHERE app_num IN ({placeholders})
                    GROUP BY app_num
                ),
                progress_data AS (
                    SELECT 
                        app_num,
                        GROUP_CONCAT(
                            intermediate_doc_code || ':' || record_date, '|'
                        ) as progress_records
                    FROM (
                        SELECT app_num, intermediate_doc_code, creation_date as record_date
                        FROM trademark_draft_records
                        WHERE app_num IN ({placeholders})
                        AND intermediate_doc_code IS NOT NULL
                        UNION ALL
                        SELECT app_num, intermediate_doc_code, receipt_date as record_date
                        FROM trademark_application_records
                        WHERE app_num IN ({placeholders})
                        AND intermediate_doc_code IS NOT NULL
                        ORDER BY app_num, record_date ASC
                        -- LIMIT削除: 各出願の全中間記録を取得
                    )
                    GROUP BY app_num
                )
                SELECT 
                    bd.*,
                    pd.phonetics,
                    ad.applicants,
                    ad.applicant_addresses,
                    ad.applicant_country_codes,
                    ad.agents,
                    rhd.right_holders,
                    cd.classes,
                    gsd.class_num as gs_class_num,
                    gsd.goods_services_name,
                    sgd.class_num as sg_class_num,
                    sgd.similar_group_codes,
                    vd.vienna_codes,
                    rd.rejection_codes,
                    rd.latest_rejection_date,
                    ddd.detailed_description,
                    apd.appeal_nums,
                    apd.appeal_types,
                    prd.progress_records
                FROM basic_data bd
                LEFT JOIN phonetics_data pd ON bd.app_num = pd.app_num
                LEFT JOIN applicants_data ad ON bd.app_num = ad.app_num
                LEFT JOIN right_holders_data rhd ON bd.app_num = rhd.app_num
                LEFT JOIN classes_data cd ON bd.app_num = cd.app_num
                LEFT JOIN goods_services_data gsd ON bd.app_num = gsd.app_num
                LEFT JOIN similar_groups_data sgd ON bd.app_num = sgd.app_num
                LEFT JOIN vienna_data vd ON bd.app_num = vd.app_num
                LEFT JOIN rejection_data rd ON bd.app_num = rd.app_num
                LEFT JOIN detail_desc_data ddd ON bd.app_num = ddd.app_num
                LEFT JOIN appeal_data apd ON bd.app_num = apd.app_num
                LEFT JOIN progress_data prd ON bd.app_num = prd.app_num
                ORDER BY bd.app_date DESC
            """
            
            # パラメータを14回繰り返す（各サブクエリで使用 - progress_dataで2回使用）
            params = batch_app_nums * 14
            cursor.execute(query, params)
            
            # 結果を出願番号ごとにグループ化
            app_num_data = {}
            for row in cursor.fetchall():
                app_num = row['app_num']
                if app_num not in app_num_data:
                    app_num_data[app_num] = {
                        'app_num': app_num,
                        'app_date': row['app_date'],
                        'reg_num': row['reg_num'],
                        'reg_date': row['reg_date'],
                        'trademark_name': row['trademark_name'],
                        'trademark_image_data': row['trademark_image_data'] if 'trademark_image_data' in dict(row) else None,  # 画像データを追加
                        'phonetics': row['phonetics'].split(',') if row['phonetics'] else [],
                        'applicants': row['applicants'].split(',') if row['applicants'] else [],
                        'applicant_addresses': row['applicant_addresses'].split(',') if row['applicant_addresses'] else [],
                        'applicant_country_codes': row['applicant_country_codes'].split(',') if row['applicant_country_codes'] else [],
                        'agents': row['agents'].split(',') if row['agents'] else [],
                        'right_holders': row['right_holders'].split(',') if row['right_holders'] else [],
                        'classes': row['classes'].split(',') if row['classes'] else [],
                        'goods_services': {},
                        'similar_groups': {},
                        'vienna_codes': row['vienna_codes'].split(',') if row['vienna_codes'] else [],
                        # 拒絶理由情報を追加
                        'rejection_codes': self._format_rejection_codes(row['rejection_codes']),
                        'latest_rejection_date': row['latest_rejection_date'],
                        # ステータス情報を追加（コードを日本語に変換）
                        'final_disposition_type': self._convert_code_to_name(row['final_disposition_type'], 'final_disposition'),
                        'final_disposition_date': row['final_disposition_date'],
                        # 最終処分記事（日本語変換）
                        'final_disposition_article': self._format_final_disposition(row['final_disposition_type']),
                        # 公報情報を追加
                        'reg_article_gazette_date': row['reg_article_gazette_date'],
                        'pub_article_gazette_date': row['pub_article_gazette_date'],
                        # 存続期間・分納情報を追加
                        'conti_prd_expire_date': row['conti_prd_expire_date'] or row['basic_expiry_date'],  # management_infoまたはbasic_itemsから
                        'next_pen_payment_limit_date': row['next_pen_payment_limit_date'],
                        # 出願種別・付加情報（コードを日本語に変換）
                        'app_type1': self._convert_code_to_name(row['app_type1'], 'app_type'),
                        'app_type2': self._convert_code_to_name(row['app_type2'], 'app_type'),
                        'app_type3': self._convert_code_to_name(row['app_type3'], 'app_type'),
                        'app_type4': self._convert_code_to_name(row['app_type4'], 'app_type'),
                        'app_type5': self._convert_code_to_name(row['app_type5'], 'app_type'),
                        'orig_app_type': self._convert_code_to_name(row['orig_app_type'], 'app_type'),
                        'article3_2_flag': row['article3_2_flag'],
                        'article5_4_flag': row['article5_4_flag'],
                        'exam_type': self._convert_code_to_name(row['exam_type'], 'exam_type'),
                        'decision_type': self._convert_code_to_name(row['decision_type'], 'decision_type'),
                        'applicable_law_class': self._convert_code_to_name(row['applicable_law_class'], 'international_class_version'),
                        # 商標タイプ
                        'trademark_type': self._determine_trademark_type(row),
                        # 補助情報
                        'defensive_num': row['defensive_num'],
                        'prior_app_right_occr_dt': row['prior_app_right_occr_date'],
                        'renewal_reg_num': row['renewal_reg_num'],
                        'renewal_defensive_num': row['renewal_defensive_num'],
                        'detailed_description': row['detailed_description'],
                        # 審判情報
                        'appeal_nums': row['appeal_nums'].split(',') if row['appeal_nums'] else [],
                        'appeal_types': self._format_appeal_types(row['appeal_types']),
                        # 中間記録（コードをマッピングして表示）
                        'progress_records': self._format_progress_records(row['progress_records'])
                    }
                
                # 指定商品・役務を追加
                if row['gs_class_num'] and row['goods_services_name']:
                    app_num_data[app_num]['goods_services'][row['gs_class_num']] = row['goods_services_name']
                
                # 類似群コードを追加
                if row['sg_class_num'] and row['similar_group_codes']:
                    app_num_data[app_num]['similar_groups'][row['sg_class_num']] = row['similar_group_codes'].split(',')
            
            # 検索種別固有データを追加
            for app_num, data in app_num_data.items():
                result = {
                    'basic_info': data,
                    'search_specific': search_specific_data.get(app_num, {}) if search_specific_data else {}
                }
                results.append(result)
        
        return results
    
    def _format_rejection_codes(self, codes_str: str) -> List[str]:
        """拒絶理由コードを条文記事に変換"""
        if not codes_str:
            return []
        
        formatted_codes = []
        for code in codes_str.split(','):
            code = code.strip()
            if code:
                # コードを条文記事に変換
                article = self.REJECTION_REASON_CODE_MAP.get(code)
                if article:
                    formatted_codes.append(article)
                else:
                    # マッピングがない場合はコードをそのまま表示
                    formatted_codes.append(code)
        
        return formatted_codes
    
    def _format_appeal_types(self, types_str: str) -> List[str]:
        """審判種別コードを日本語に変換"""
        if not types_str:
            return []
        
        formatted_types = []
        for type_code in types_str.split(','):
            type_code = type_code.strip()
            if type_code:
                # コードを日本語に変換
                type_name = self.APPEAL_TYPE_MAP.get(type_code, type_code)
                formatted_types.append(type_name)
        
        return formatted_types
    
    def _format_final_disposition(self, code: str) -> str:
        """最終処分コードを日本語の記事に変換"""
        if not code:
            return ""
        
        # FINAL_DISPOSITION_CODESを使って変換
        return self.FINAL_DISPOSITION_CODES.get(code, code)
    
    def _format_appeal_article_codes(self, codes_str: str) -> List[str]:
        """審判条文コードを日本語の条文記事に変換"""
        if not codes_str:
            return []
        
        formatted_codes = []
        for code in codes_str.split(','):
            code = code.strip()
            if code:
                # コードを条文記事に変換
                article = self.APPEAL_ARTICLE_CODE_MAP.get(code)
                if article:
                    formatted_codes.append(article)
                else:
                    # マッピングがない場合はコードをそのまま表示
                    formatted_codes.append(f"審判条文{code}")
        
        return formatted_codes
    
    def _format_progress_records(self, records_str: str) -> Dict[str, List[str]]:
        """中間記録コードを日本語に変換して分類して返す"""
        if not records_str:
            return {'exam': [], 'trial': [], 'registration': []}
        
        exam_records = []      # 審査中間記録
        trial_records = []     # 審判中間記録
        registration_records = [] # 登録中間記録
        
        for record in records_str.split('|'):
            if ':' in record:
                code, date = record.split(':', 1)
                
                # コードマッピングから日本語名を取得
                # 1. まず審査コード（A系）を確認
                code_name = self.INTERMEDIATE_CODE_MAP.get(code, None)
                
                # 2. 見つからない場合は審判コード（数字系・C系）を確認
                if code_name is None:
                    code_name = self.TRIAL_INTERMEDIATE_CODE_MAP.get(code, None)
                
                # 3. それでも見つからない場合は登録コード（R系）を確認
                if code_name is None:
                    code_name = self.REGISTRATION_INTERMEDIATE_CODE_MAP.get(code, None)
                
                # 4. 最後にマドプロコード（IB/MD/AP/M3系）を確認
                if code_name is None:
                    code_name = self.MADRID_INTERMEDIATE_CODE_MAP.get(code, code)
                
                # 日付をYYYY/MM/DD形式に変換
                if date and len(date) == 8:
                    formatted_date = f"{date[:4]}/{date[4:6]}/{date[6:]}"
                else:
                    formatted_date = date
                
                formatted_record = f"{code_name}:{formatted_date}"
                
                # コードの種別で分類
                first_char = code[0].upper()
                if first_char == 'R':
                    # R系 = 登録系
                    registration_records.append(formatted_record)
                elif first_char == 'C' or first_char.isdigit():
                    # C系または数字で始まる = 審判系
                    trial_records.append(formatted_record)
                else:
                    # A系およびその他（IB/MD/AP/M3など） = 審査系
                    exam_records.append(formatted_record)
        
        return {
            'exam': exam_records,
            'trial': trial_records,
            'registration': registration_records
        }
    
    def _determine_trademark_type(self, row) -> str:
        """商標タイプを判定
        
        Args:
            row: データベースの行データ
        
        Returns:
            商標タイプ名
        """
        # sqlite3.Rowオブジェクトを辞書に変換
        row_dict = dict(row) if not isinstance(row, dict) else row
        
        # 標準文字商標
        if row_dict.get('standard_char_exist') == '1':
            return '標準文字'
        
        # 特殊商標（立体、ホログラム等）
        if row_dict.get('special_mark_exist') == '1':
            # TODO: より詳細な判定が必要な場合は、追加テーブルを参照
            return '特殊商標'
        
        # 色彩商標
        if row_dict.get('color_exist') == '1':
            return '色彩'
        
        # 図形商標（画像データがある場合）
        if row_dict.get('trademark_image_data'):
            return '図形'
        
        # 通常商標
        return '通常'
    
    def _convert_code_to_name(self, code: str, code_type: str) -> str:
        """種別コードを日本語名に変換
        
        Args:
            code: 変換対象のコード
            code_type: コードの種類（'final_disposition', 'app_type', 'exam_type', 'decision_type'）
        
        Returns:
            日本語名（変換できない場合は元のコード）
        """
        if not code:
            return code
        
        # 半角を全角に変換してマッピングを試みる
        zenkaku_code = code.translate(str.maketrans('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', 
                                                    'ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ０１２３４５６７８９'))
        
        # コードタイプに応じて適切なマッピングを選択
        if code_type == 'final_disposition':
            # 審査最終処分と審判最終処分の両方を試す
            name = self.EXAMINATION_DISPOSITION_MAP.get(zenkaku_code)
            if not name:
                name = self.EXAMINATION_DISPOSITION_MAP.get(code)
            if not name:
                name = self.APPEAL_DISPOSITION_MAP.get(zenkaku_code)
            if not name:
                name = self.APPEAL_DISPOSITION_MAP.get(code)
            return name if name else code
        
        elif code_type == 'app_type':
            name = self.APPLICATION_TYPE_MAP.get(zenkaku_code)
            if not name:
                name = self.APPLICATION_TYPE_MAP.get(code)
            return name if name else code
        
        elif code_type == 'exam_type':
            name = self.EXAMINATION_TYPE_MAP.get(zenkaku_code)
            if not name:
                name = self.EXAMINATION_TYPE_MAP.get(code)
            return name if name else code
        
        elif code_type == 'decision_type':
            name = self.DECISION_TYPE_MAP.get(zenkaku_code)
            if not name:
                name = self.DECISION_TYPE_MAP.get(code)
            return name if name else code
        
        elif code_type == 'international_class_version':
            # 国際分類版のマッピング
            version_map = {
                'Z': '第12版',
                'Y': '第11版',
                'X': '第10版',
                'W': '第9版',
                'V': '第8版',
                'U': '第7版',
                'T': '第6版'
            }
            return version_map.get(code, code) if code else None
        
        else:
            return code
    
    # ========== 複合条件検索 ==========
    
    def _search_by_class_for_complex(self, class_num: str, limit: int = 10000) -> List[Dict[str, Any]]:
        """複合検索用の区分検索（内部メソッド）
        trademark_goods_servicesテーブルから直接検索する
        """
        cursor = self.conn.cursor()
        query = """
            SELECT DISTINCT
                tgs.app_num,
                tgs.class_num,
                ts.search_use_t as trademark_name,
                tci.app_date,
                tci.reg_date,
                tci.reg_article_reg_num as reg_num,
                tci.final_disposition_type,
                tci.law_code,
                tci.class_count
            FROM trademark_goods_services tgs
            LEFT JOIN trademark_search ts ON tgs.app_num = ts.app_num
            LEFT JOIN trademark_case_info tci ON tgs.app_num = tci.app_num
            WHERE tgs.class_num = ?
            LIMIT ?
        """
        cursor.execute(query, (class_num.zfill(2), limit))
        return [dict(row) for row in cursor.fetchall()]
    
    def search_complex(self, conditions: List[Dict[str, Any]], operator: str = 'AND', limit: int = 100, unified_format: bool = True) -> List[Dict[str, Any]]:
        """複合条件検索
        
        Args:
            conditions: 検索条件のリスト。各条件は以下の形式:
                       [{'type': 'trademark', 'keyword': 'プル'},
                        {'type': 'class', 'keyword': '09'}]
            operator: 条件の結合方法 ('AND' or 'OR')
            limit: 最大取得件数
            unified_format: 統一フォーマットで返すか
        
        Returns:
            検索結果リスト
        """
        if not conditions:
            return []
        
        # 各条件で検索を実行
        all_results = []
        for cond in conditions:
            search_type = cond.get('type')
            keyword = cond.get('keyword')
            
            if not keyword:
                continue
            
            # 各検索タイプに応じて検索実行
            if search_type == 'trademark':
                results = self.search_trademark_name(keyword, limit=10000, unified_format=False)
            elif search_type == 'phonetic':
                results = self.search_phonetic(keyword, limit=10000, unified_format=False)
            elif search_type == 'class':
                # 複合検索用の区分検索メソッドを使用
                results = self._search_by_class_for_complex(keyword, limit=10000)
            elif search_type == 'applicant':
                results = self.search_applicant(keyword, limit=10000, unified_format=False)
            elif search_type == 'goods_services':
                results = self.search_goods_services(keyword, limit=10000, unified_format=False)
            elif search_type == 'app_num':
                # 出願番号検索（単一結果をリストに変換）
                result = self.search_by_app_num(keyword, unified_format=False)
                results = [result] if result else []
            elif search_type == 'reg_num':
                # 登録番号検索（単一結果をリストに変換）
                result = self.search_by_reg_num(keyword, unified_format=False)
                results = [result] if result else []
            elif search_type == 'similar_group':
                # 類似群コード検索
                results = self.search_by_similar_group(keyword, limit=10000, unified_format=False)
            else:
                continue
            
            all_results.append(set(r.get('app_num') for r in results if r.get('app_num')))
        
        if not all_results:
            return []
        
        # AND/OR演算
        if operator == 'AND':
            # 全ての条件を満たす出願番号
            common_app_nums = set.intersection(*all_results) if all_results else set()
        else:  # OR
            # いずれかの条件を満たす出願番号
            common_app_nums = set.union(*all_results) if all_results else set()
        
        if not common_app_nums:
            return []
        
        # 統一フォーマットで結果を取得
        if unified_format:
            app_nums_list = list(common_app_nums)[:limit]
            search_specific = {
                app_num: {
                    'matched_conditions': [c.get('type') + ':' + c.get('keyword', '') for c in conditions],
                    'operator': operator
                } for app_num in app_nums_list
            }
            return self._format_unified_result(app_nums_list, search_specific)
        else:
            # 基本情報を取得して返す
            cursor = self.conn.cursor()
            placeholders = ','.join(['?'] * len(common_app_nums))
            query = f"""
                SELECT DISTINCT
                    tci.app_num,
                    tci.reg_article_reg_num as reg_num,
                    ts.search_use_t as trademark_name,
                    tci.app_date,
                    tci.reg_date,
                    tci.final_disposition_type,
                    tci.law_code,
                    tci.class_count
                FROM trademark_case_info tci
                LEFT JOIN trademark_search ts ON tci.app_num = ts.app_num
                WHERE tci.app_num IN ({placeholders})
                ORDER BY tci.app_date DESC
                LIMIT ?
            """
            params = list(common_app_nums) + [limit]
            cursor.execute(query, params)
            return [dict(row) for row in cursor.fetchall()]
    
    def close(self):
        """データベース接続を閉じる"""
        if self.conn:
            self.conn.close()


# ========== CLI インターフェース ==========

def print_results(results: List[Dict[str, Any]], max_display: int = 10):
    """検索結果の表示"""
    if not results:
        print("検索結果がありません")
        return
    
    print(f"\n{'='*100}")
    print(f"検索結果: {len(results)}件")
    print(f"{'='*100}")
    
    for i, result in enumerate(results[:max_display], 1):
        print(f"\n[{i}]")
        # 統一フォーマットの場合はbasic_infoから取得
        if 'basic_info' in result:
            info = result['basic_info']
            print(f"  出願番号: {info.get('app_num', 'N/A')}")
            print(f"  登録番号: {info.get('reg_num', 'N/A')}")
            print(f"  商標名: {info.get('trademark_name', 'N/A')}")
            
            # 称呼
            if info.get('phonetics'):
                print(f"  称呼: {', '.join(info.get('phonetics', []))}")
            
            print(f"  出願日: {info.get('app_date', 'N/A')}")
            print(f"  登録日: {info.get('reg_date', 'N/A')}")
            
            # 区分情報
            if info.get('classes'):
                print(f"  区分: {', '.join(info.get('classes', []))}")
            else:
                print(f"  区分: N/A")
            
            # 商品・役務情報
            if info.get('goods_services'):
                print(f"  商品・役務:")
                for class_num, goods in info['goods_services'].items():
                    print(f"    区分{class_num}: {goods}")
            
            # 類似群コード
            if info.get('similar_groups'):
                print(f"  類似群コード:")
                for class_num, codes in info['similar_groups'].items():
                    print(f"    区分{class_num}: {', '.join(codes)}")
            
            # 出願人
            if info.get('applicants'):
                print(f"  出願人: {', '.join(info['applicants'])}")
            
            # 代理人
            if info.get('agents'):
                print(f"  代理人: {', '.join(info['agents'])}")
            
            # 権利者
            if info.get('right_holders'):
                print(f"  権利者: {', '.join(info['right_holders'])}")
            
            # ステータス情報
            print(f"  最終処分コード: {info.get('final_disposition_type', info.get('final_disposition_code', 'N/A'))}")
            print(f"  最終処分日: {info.get('final_disposition_date', 'N/A')}")
            
            # 公報情報
            if info.get('reg_article_gazette_date'):
                print(f"  登録公報発行日: {info['reg_article_gazette_date']}")
            if info.get('pub_article_gazette_date'):
                print(f"  公開公報発行日: {info['pub_article_gazette_date']}")
            
            # 存続期間・分納情報
            if info.get('conti_prd_expire_date'):
                print(f"  存続期間満了日: {info['conti_prd_expire_date']}")
            if info.get('next_pen_payment_limit_date'):
                print(f"  次回分納期限日: {info['next_pen_payment_limit_date']}")
        else:
            # 旧フォーマットの場合
            print(f"  出願番号: {result.get('app_num', 'N/A')}")
            print(f"  登録番号: {result.get('reg_num', 'N/A')}")
            print(f"  商標名: {result.get('trademark_name', 'N/A')}")
            
            if result.get('pronunciation'):
                print(f"  称呼: {result.get('pronunciation', 'N/A')}")
            
            print(f"  出願日: {result.get('app_date', 'N/A')}")
            print(f"  登録日: {result.get('reg_date', 'N/A')}")
            print(f"  区分: {result.get('class_info', 'N/A')}")
            print(f"  最終処分コード: {result.get('final_disposition_code', 'N/A')}")
            print(f"  最終処分日: {result.get('final_disposition_date', 'N/A')}")
    
    if len(results) > max_display:
        print(f"\n... 他 {len(results) - max_display} 件")
    
    print(f"\n{'='*100}")


def interactive_mode():
    """対話モード"""
    print("\n" + "="*60)
    print("TMCloud 統合検索システム v1.0")
    print("="*60)
    
    search = TMCloudIntegratedSearch()
    
    while True:
        print("\n検索タイプを選択してください:")
        print("  1. 商標名検索")
        print("  2. 称呼検索")
        print("  3. 出願番号検索")
        print("  4. 登録番号検索")
        print("  5. 日付範囲検索")
        print("  6. ステータス検索")
        print("  7. 類似群コード検索")
        print("  q. 終了")
        
        choice = input("\n選択 [1-7, q]: ").strip()
        
        if choice == 'q':
            break
        
        try:
            if choice == '1':
                keyword = input("商標名を入力: ").strip()
                if keyword:
                    results = search.search(SearchType.TRADEMARK, keyword)
                    print_results(results)
            
            elif choice == '2':
                keyword = input("称呼を入力（カタカナ/ひらがな）: ").strip()
                if keyword:
                    results = search.search(SearchType.PHONETIC, keyword)
                    print_results(results)
            
            elif choice == '3':
                app_num = input("出願番号を入力: ").strip()
                if app_num:
                    results = search.search(SearchType.APP_NUM, app_num)
                    print_results(results)
            
            elif choice == '4':
                reg_num = input("登録番号を入力: ").strip()
                if reg_num:
                    results = search.search(SearchType.REG_NUM, reg_num)
                    print_results(results)
            
            elif choice == '5':
                print("日付タイプを選択:")
                print("  1. 出願日")
                print("  2. 登録日")
                print("  3. 公開日")
                date_choice = input("選択 [1-3]: ").strip()
                
                date_type_map = {
                    '1': 'app_date', 
                    '2': 'reg_date', 
                    '3': 'pub_article_gazette_date',
                    '4': 'reg_article_gazette_date'  # ID122: 登録公報発行日
                }
                date_type = date_type_map.get(date_choice, 'app_date')
                
                start_date = input("開始日 (YYYY-MM-DD): ").strip()
                end_date = input("終了日 (YYYY-MM-DD): ").strip()
                
                if start_date and end_date:
                    results = search.search(
                        SearchType.DATE_RANGE,
                        date_type=date_type,
                        start_date=start_date,
                        end_date=end_date
                    )
                    print_results(results)
            
            elif choice == '6':
                print("ステータス条件を入力（空欄でスキップ）:")
                final_disposition_type = input("  最終処分種別: ").strip() or None
                final_disposition_date = input("  最終処分日: ").strip() or None
                law_code = input("  四法コード: ").strip() or None
                class_count = input("  区分数: ").strip() or None
                
                results = search.search(
                    SearchType.STATUS,
                    final_disposition_type=final_disposition_type,
                    final_disposition_date=final_disposition_date,
                    law_code=law_code,
                    class_count=class_count
                )
                print_results(results)
            
            elif choice == '7':
                code = input("類似群コード（?でワイルドカード）: ").strip()
                if code:
                    results = search.search(SearchType.SIMILAR_GROUP, code)
                    print_results(results)
            
        except Exception as e:
            print(f"エラー: {e}")
    
    search.close()
    print("\n終了しました")


def main():
    """メインエントリーポイント"""
    import argparse
    
    parser = argparse.ArgumentParser(
        description='TMCloud 統合検索システム',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
使用例:
  # 対話モード
  python3 tmcloud_search_integrated.py
  
  # 商標名検索
  python3 tmcloud_search_integrated.py --type trademark --keyword "ソニー"
  
  # 称呼検索
  python3 tmcloud_search_integrated.py --type phonetic --keyword "アップル"
  
  # 出願番号検索
  python3 tmcloud_search_integrated.py --type app_num --keyword "2023123456"
  
  # 日付範囲検索
  python3 tmcloud_search_integrated.py --type date_range --date-type app_date --start 2023-01-01 --end 2023-12-31
        """
    )
    
    parser.add_argument('--type', choices=[
        'trademark', 'phonetic', 'app_num', 'reg_num', 
        'date_range', 'status', 'similar_group', 'goods_services', 'applicant',
        'law_class', 'vienna_code', 'detailed_desc', 'trademark_type', 'app_type'
    ], help='検索タイプ')
    parser.add_argument('--keyword', help='検索キーワード')
    parser.add_argument('--db', help='データベースファイルパス')
    parser.add_argument('--limit', type=int, default=100, help='最大取得件数')
    
    # 日付検索用
    parser.add_argument('--date-type', choices=['app_date', 'reg_date', 'pub_article_gazette_date'], 
                       help='日付タイプ')
    parser.add_argument('--start', help='開始日 (YYYY-MM-DD)')
    parser.add_argument('--end', help='終了日 (YYYY-MM-DD)')
    
    # ステータス検索用
    parser.add_argument('--final-disposition-type', help='最終処分種別')
    parser.add_argument('--final-disposition-date', help='最終処分日')
    parser.add_argument('--law-code', help='四法コード')
    parser.add_argument('--class-count', help='区分数')
    
    args = parser.parse_args()
    
    # コマンドライン引数がない場合は対話モード
    if not args.type:
        interactive_mode()
        return
    
    # コマンドライン実行
    search = TMCloudIntegratedSearch(args.db)
    
    search_type_map = {
        'trademark': SearchType.TRADEMARK,
        'phonetic': SearchType.PHONETIC,
        'app_num': SearchType.APP_NUM,
        'reg_num': SearchType.REG_NUM,
        'date_range': SearchType.DATE_RANGE,
        'status': SearchType.STATUS,
        'similar_group': SearchType.SIMILAR_GROUP,
        'goods_services': SearchType.GOODS_SERVICES,
        'applicant': SearchType.APPLICANT,
        'law_class': SearchType.LAW_CLASS,
        'vienna_code': SearchType.VIENNA_CODE,
        'detailed_desc': SearchType.DETAILED_DESC,
        'trademark_type': SearchType.TRADEMARK_TYPE,
        'app_type': SearchType.APP_TYPE
    }
    
    search_type = search_type_map[args.type]
    
    # 検索実行
    kwargs = {'limit': args.limit}
    
    if args.type == 'date_range':
        kwargs.update({
            'date_type': args.date_type or 'app_date',
            'start_date': args.start,
            'end_date': args.end
        })
        results = search.search(search_type, **kwargs)
    elif args.type == 'status':
        kwargs.update({
            'final_disposition_type': args.final_disposition_type,
            'final_disposition_date': args.final_disposition_date,
            'law_code': args.law_code,
            'class_count': args.class_count
        })
        results = search.search(search_type, **kwargs)
    else:
        results = search.search(search_type, args.keyword, **kwargs)
    
    print_results(results)
    search.close()


if __name__ == "__main__":
    main()